
c:/Users/hanzo/code/dumpster-fire/target/1.5.2/photon/dumpster-fire.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006c84  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a6ca0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000dc  20000000  080a6ca4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000588  200000dc  200000dc  000400dc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a6d80  080a6d80  00036d80  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a6da8  080a6da8  00036da8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b280b  00000000  00000000  00036dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f572  00000000  00000000  000e95b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00013b4c  00000000  00000000  000f8b29  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001f08  00000000  00000000  0010c675  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000033f0  00000000  00000000  0010e57d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000246b3  00000000  00000000  0011196d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00022868  00000000  00000000  00136020  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a910d  00000000  00000000  00158888  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b7cc  00000000  00000000  00201998  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fa53 	bl	80a14d8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fa58 	bl	80a14ee <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a6ca4 	.word	0x080a6ca4
 80a004c:	200000dc 	.word	0x200000dc
 80a0050:	200000dc 	.word	0x200000dc
 80a0054:	20000664 	.word	0x20000664
 80a0058:	20000664 	.word	0x20000664

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fcd3 	bl	80a0a08 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a6c70 	.word	0x080a6c70
 80a0084:	080a6ca0 	.word	0x080a6ca0

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b8cc 	b.w	80a0224 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f8ed 	bl	80a026c <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bc79 	b.w	80a098c <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f000 ba9b 	b.w	80a05d4 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <_Z6myPagePKcPFiPvttS0_P6HeaderES1_P6ReaderP6WriterS1_>:
     { "/rsa-utils/prng4.js", "application/javascript", prng4_js },
     { nullptr }
};

void myPage(const char* url, ResponseCallback* cb, void* cbArg, Reader* body, Writer* result, void* reserved)
{
 80a00b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a00b4:	4607      	mov	r7, r0
 80a00b6:	b085      	sub	sp, #20
 80a00b8:	460c      	mov	r4, r1
 80a00ba:	4615      	mov	r5, r2
    Serial.printlnf("handling page %s", url);
 80a00bc:	f000 fdcc 	bl	80a0c58 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 80a00c0:	463b      	mov	r3, r7
 80a00c2:	4a28      	ldr	r2, [pc, #160]	; (80a0164 <_Z6myPagePKcPFiPvttS0_P6HeaderES1_P6ReaderP6WriterS1_+0xb4>)
 80a00c4:	2101      	movs	r1, #1
 80a00c6:	f000 fbbd 	bl	80a0844 <_ZN5Print11printf_implEbPKcz>

    if (strcmp(url,"/index")==0) {
 80a00ca:	4927      	ldr	r1, [pc, #156]	; (80a0168 <_Z6myPagePKcPFiPvttS0_P6HeaderES1_P6ReaderP6WriterS1_+0xb8>)
 80a00cc:	4638      	mov	r0, r7
 80a00ce:	f001 fa79 	bl	80a15c4 <strcmp>
 80a00d2:	4606      	mov	r6, r0
 80a00d4:	b988      	cbnz	r0, 80a00fa <_Z6myPagePKcPFiPvttS0_P6HeaderES1_P6ReaderP6WriterS1_+0x4a>
        Serial.println("sending redirect");
 80a00d6:	f000 fdbf 	bl	80a0c58 <_Z16_fetch_usbserialv>
 80a00da:	4924      	ldr	r1, [pc, #144]	; (80a016c <_Z6myPagePKcPFiPvttS0_P6HeaderES1_P6ReaderP6WriterS1_+0xbc>)
 80a00dc:	f000 fb89 	bl	80a07f2 <_ZN5Print7printlnEPKc>

    struct __attribute__((packed)) Header {
    		uint16_t size;
    		const char* header_list;		// when non-null, a series of headers. Each header MUST be terminated by CRLF.

    		Header(const char* headers) : size(sizeof(*this)), header_list(headers) {}
 80a00e0:	2306      	movs	r3, #6
 80a00e2:	f8ad 3008 	strh.w	r3, [sp, #8]
 80a00e6:	4b22      	ldr	r3, [pc, #136]	; (80a0170 <_Z6myPagePKcPFiPvttS0_P6HeaderES1_P6ReaderP6WriterS1_+0xc0>)
        Header h("Location: /index.html\r\n");
        cb(cbArg, 0, 301, "text/plain", &h);
 80a00e8:	f240 122d 	movw	r2, #301	; 0x12d
 80a00ec:	f8cd 300a 	str.w	r3, [sp, #10]
 80a00f0:	ab02      	add	r3, sp, #8
 80a00f2:	9300      	str	r3, [sp, #0]
 80a00f4:	4631      	mov	r1, r6
 80a00f6:	4b1f      	ldr	r3, [pc, #124]	; (80a0174 <_Z6myPagePKcPFiPvttS0_P6HeaderES1_P6ReaderP6WriterS1_+0xc4>)
 80a00f8:	e01c      	b.n	80a0134 <_Z6myPagePKcPFiPvttS0_P6HeaderES1_P6ReaderP6WriterS1_+0x84>
    }

    int8_t idx = 0;
    for (;;idx++) {
        Page& p = myPages[idx];
        if (!p.url) {
 80a00fa:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80a0178 <_Z6myPagePKcPFiPvttS0_P6HeaderES1_P6ReaderP6WriterS1_+0xc8>
 80a00fe:	2600      	movs	r6, #0
 80a0100:	f04f 080c 	mov.w	r8, #12
 80a0104:	fa4f fa86 	sxtb.w	sl, r6
 80a0108:	fb08 f20a 	mul.w	r2, r8, sl
 80a010c:	f85b 1002 	ldr.w	r1, [fp, r2]
 80a0110:	eb0b 0902 	add.w	r9, fp, r2
 80a0114:	b149      	cbz	r1, 80a012a <_Z6myPagePKcPFiPvttS0_P6HeaderES1_P6ReaderP6WriterS1_+0x7a>
            idx = -1;
            break;
        }
        else if (strcmp(url, p.url)==0) {
 80a0116:	4638      	mov	r0, r7
 80a0118:	f001 fa54 	bl	80a15c4 <strcmp>
 80a011c:	3601      	adds	r6, #1
 80a011e:	4601      	mov	r1, r0
 80a0120:	2800      	cmp	r0, #0
 80a0122:	d1ef      	bne.n	80a0104 <_Z6myPagePKcPFiPvttS0_P6HeaderES1_P6ReaderP6WriterS1_+0x54>
            break;
        }
    }

    if (idx==-1) {
 80a0124:	f1ba 3fff 	cmp.w	sl, #4294967295
 80a0128:	d107      	bne.n	80a013a <_Z6myPagePKcPFiPvttS0_P6HeaderES1_P6ReaderP6WriterS1_+0x8a>
        cb(cbArg, 0, 404, nullptr, nullptr);
 80a012a:	2300      	movs	r3, #0
 80a012c:	4619      	mov	r1, r3
 80a012e:	9300      	str	r3, [sp, #0]
 80a0130:	f44f 72ca 	mov.w	r2, #404	; 0x194
 80a0134:	4628      	mov	r0, r5
 80a0136:	47a0      	blx	r4
 80a0138:	e010      	b.n	80a015c <_Z6myPagePKcPFiPvttS0_P6HeaderES1_P6ReaderP6WriterS1_+0xac>
    }
    else {
        cb(cbArg, 0, 200, myPages[idx].mime_type, nullptr);
 80a013a:	9000      	str	r0, [sp, #0]
 80a013c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80a0140:	22c8      	movs	r2, #200	; 0xc8
 80a0142:	4628      	mov	r0, r5
 80a0144:	47a0      	blx	r4
        result->write(myPages[idx].data);
 80a0146:	f8d9 4008 	ldr.w	r4, [r9, #8]
        inline void write(const uint8_t* buf, size_t length) {
            callback(this, buf, length);
        }

        inline void write(const char* s) {
            write((const uint8_t*)s, strlen(s));
 80a014a:	4620      	mov	r0, r4
 80a014c:	f001 fa44 	bl	80a15d8 <strlen>

        callback_t callback;
        void* state;

        inline void write(const uint8_t* buf, size_t length) {
            callback(this, buf, length);
 80a0150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a0152:	4602      	mov	r2, r0
 80a0154:	681b      	ldr	r3, [r3, #0]
 80a0156:	4621      	mov	r1, r4
 80a0158:	980e      	ldr	r0, [sp, #56]	; 0x38
 80a015a:	4798      	blx	r3
    }
}
 80a015c:	b005      	add	sp, #20
 80a015e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0162:	bf00      	nop
 80a0164:	080a4c52 	.word	0x080a4c52
 80a0168:	080a4c63 	.word	0x080a4c63
 80a016c:	080a4c6a 	.word	0x080a4c6a
 80a0170:	080a4c7b 	.word	0x080a4c7b
 80a0174:	080a4c93 	.word	0x080a4c93
 80a0178:	20000000 	.word	0x20000000

080a017c <_Z10flameLight6String>:
 // doing nothing, forever
}


int flameLight(String flameOn)
{
 80a017c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a0180:	4924      	ldr	r1, [pc, #144]	; (80a0214 <_Z10flameLight6String+0x98>)
 80a0182:	f000 faef 	bl	80a0764 <_ZNK6String6equalsEPKc>
  if(flameOn == "on")
 80a0186:	2800      	cmp	r0, #0
 80a0188:	d040      	beq.n	80a020c <_Z10flameLight6String+0x90>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a018a:	f000 f8c5 	bl	80a0318 <HAL_Timer_Get_Milli_Seconds>
 80a018e:	4680      	mov	r8, r0
 80a0190:	4f21      	ldr	r7, [pc, #132]	; (80a0218 <_Z10flameLight6String+0x9c>)
 80a0192:	4e22      	ldr	r6, [pc, #136]	; (80a021c <_Z10flameLight6String+0xa0>)
 80a0194:	4d22      	ldr	r5, [pc, #136]	; (80a0220 <_Z10flameLight6String+0xa4>)
 80a0196:	f000 f8bf 	bl	80a0318 <HAL_Timer_Get_Milli_Seconds>
  {
    elapsedMillis timeElapsed;
    unsigned int interval = 10000; //duration * 1s
    while(timeElapsed < interval){
 80a019a:	f242 730f 	movw	r3, #9999	; 0x270f
 80a019e:	ebc8 0000 	rsb	r0, r8, r0
 80a01a2:	4298      	cmp	r0, r3
 80a01a4:	d820      	bhi.n	80a01e8 <_Z10flameLight6String+0x6c>
        analogWrite(led1, random(120)+135);
 80a01a6:	2078      	movs	r0, #120	; 0x78
 80a01a8:	883c      	ldrh	r4, [r7, #0]
 80a01aa:	f000 fe7b 	bl	80a0ea4 <_Z6randomi>
 80a01ae:	f100 0187 	add.w	r1, r0, #135	; 0x87
 80a01b2:	4620      	mov	r0, r4
 80a01b4:	f000 ff99 	bl	80a10ea <_Z11analogWritetm>
        analogWrite(led2, random(120)+135);
 80a01b8:	2078      	movs	r0, #120	; 0x78
 80a01ba:	8834      	ldrh	r4, [r6, #0]
 80a01bc:	f000 fe72 	bl	80a0ea4 <_Z6randomi>
 80a01c0:	f100 0187 	add.w	r1, r0, #135	; 0x87
 80a01c4:	4620      	mov	r0, r4
 80a01c6:	f000 ff90 	bl	80a10ea <_Z11analogWritetm>
        analogWrite(led3, random(120)+135);
 80a01ca:	2078      	movs	r0, #120	; 0x78
 80a01cc:	882c      	ldrh	r4, [r5, #0]
 80a01ce:	f000 fe69 	bl	80a0ea4 <_Z6randomi>
 80a01d2:	f100 0187 	add.w	r1, r0, #135	; 0x87
 80a01d6:	4620      	mov	r0, r4
 80a01d8:	f000 ff87 	bl	80a10ea <_Z11analogWritetm>
        delay(random(100));
 80a01dc:	2064      	movs	r0, #100	; 0x64
 80a01de:	f000 fe61 	bl	80a0ea4 <_Z6randomi>
 80a01e2:	f000 fb81 	bl	80a08e8 <delay>
{
  if(flameOn == "on")
  {
    elapsedMillis timeElapsed;
    unsigned int interval = 10000; //duration * 1s
    while(timeElapsed < interval){
 80a01e6:	e7d6      	b.n	80a0196 <_Z10flameLight6String+0x1a>
        analogWrite(led1, random(120)+135);
        analogWrite(led2, random(120)+135);
        analogWrite(led3, random(120)+135);
        delay(random(100));
    }
    analogWrite(led1, 0);
 80a01e8:	4b0b      	ldr	r3, [pc, #44]	; (80a0218 <_Z10flameLight6String+0x9c>)
 80a01ea:	2100      	movs	r1, #0
 80a01ec:	8818      	ldrh	r0, [r3, #0]
 80a01ee:	f000 ff7c 	bl	80a10ea <_Z11analogWritetm>
    analogWrite(led2, 0);
 80a01f2:	4b0a      	ldr	r3, [pc, #40]	; (80a021c <_Z10flameLight6String+0xa0>)
 80a01f4:	2100      	movs	r1, #0
 80a01f6:	8818      	ldrh	r0, [r3, #0]
 80a01f8:	f000 ff77 	bl	80a10ea <_Z11analogWritetm>
    analogWrite(led3, 0);
 80a01fc:	4b08      	ldr	r3, [pc, #32]	; (80a0220 <_Z10flameLight6String+0xa4>)
 80a01fe:	2100      	movs	r1, #0
 80a0200:	8818      	ldrh	r0, [r3, #0]
 80a0202:	f000 ff72 	bl	80a10ea <_Z11analogWritetm>
    return 1;
 80a0206:	2001      	movs	r0, #1
 80a0208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  else return -1;
 80a020c:	f04f 30ff 	mov.w	r0, #4294967295
 80a0210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0214:	080a4c9e 	.word	0x080a4c9e
 80a0218:	200000e0 	.word	0x200000e0
 80a021c:	2000006c 	.word	0x2000006c
 80a0220:	20000070 	.word	0x20000070

080a0224 <setup>:

int led1 = D0; 
int led2 = D1;
int led3 = D2;

void setup() {
 80a0224:	b508      	push	{r3, lr}
    pinMode(led1, OUTPUT);
 80a0226:	4b0b      	ldr	r3, [pc, #44]	; (80a0254 <setup+0x30>)
 80a0228:	2101      	movs	r1, #1
 80a022a:	8818      	ldrh	r0, [r3, #0]
 80a022c:	f000 ff4c 	bl	80a10c8 <pinMode>
    pinMode(led2, OUTPUT);
 80a0230:	4b09      	ldr	r3, [pc, #36]	; (80a0258 <setup+0x34>)
 80a0232:	2101      	movs	r1, #1
 80a0234:	8818      	ldrh	r0, [r3, #0]
 80a0236:	f000 ff47 	bl	80a10c8 <pinMode>
    pinMode(led3, OUTPUT);
 80a023a:	4b08      	ldr	r3, [pc, #32]	; (80a025c <setup+0x38>)
 80a023c:	2101      	movs	r1, #1
 80a023e:	8818      	ldrh	r0, [r3, #0]
 80a0240:	f000 ff42 	bl	80a10c8 <pinMode>
    Particle.function("flame", flameLight);
}
 80a0244:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a0248:	4a05      	ldr	r2, [pc, #20]	; (80a0260 <setup+0x3c>)
 80a024a:	4906      	ldr	r1, [pc, #24]	; (80a0264 <setup+0x40>)
 80a024c:	4806      	ldr	r0, [pc, #24]	; (80a0268 <setup+0x44>)
 80a024e:	f000 bc1d 	b.w	80a0a8c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0252:	bf00      	nop
 80a0254:	200000e0 	.word	0x200000e0
 80a0258:	2000006c 	.word	0x2000006c
 80a025c:	20000070 	.word	0x20000070
 80a0260:	080a4ca1 	.word	0x080a4ca1
 80a0264:	080a017d 	.word	0x080a017d
 80a0268:	080a0a61 	.word	0x080a0a61

080a026c <loop>:

void loop(){
 80a026c:	4770      	bx	lr
	...

080a0270 <_GLOBAL__sub_I_myPages>:
    analogWrite(led2, 0);
    analogWrite(led3, 0);
    return 1;
  }
  else return -1;
 80a0270:	b508      	push	{r3, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0272:	f000 f809 	bl	80a0288 <HAL_Pin_Map>
 80a0276:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        cb(cbArg, 0, 200, myPages[idx].mime_type, nullptr);
        result->write(myPages[idx].data);
    }
}

STARTUP(softap_set_application_page_handler(myPage, nullptr));
 80a027a:	2100      	movs	r1, #0
 80a027c:	4801      	ldr	r0, [pc, #4]	; (80a0284 <_GLOBAL__sub_I_myPages+0x14>)
 80a027e:	f000 b915 	b.w	80a04ac <softap_set_application_page_handler>
 80a0282:	bf00      	nop
 80a0284:	080a00b1 	.word	0x080a00b1

080a0288 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0288:	b508      	push	{r3, lr}
 80a028a:	4b02      	ldr	r3, [pc, #8]	; (80a0294 <HAL_Pin_Map+0xc>)
 80a028c:	681b      	ldr	r3, [r3, #0]
 80a028e:	681b      	ldr	r3, [r3, #0]
 80a0290:	9301      	str	r3, [sp, #4]
 80a0292:	bd08      	pop	{r3, pc}
 80a0294:	080601b0 	.word	0x080601b0

080a0298 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a0298:	b508      	push	{r3, lr}
 80a029a:	4b02      	ldr	r3, [pc, #8]	; (80a02a4 <HAL_Validate_Pin_Function+0xc>)
 80a029c:	681b      	ldr	r3, [r3, #0]
 80a029e:	685b      	ldr	r3, [r3, #4]
 80a02a0:	9301      	str	r3, [sp, #4]
 80a02a2:	bd08      	pop	{r3, pc}
 80a02a4:	080601b0 	.word	0x080601b0

080a02a8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a02a8:	b508      	push	{r3, lr}
 80a02aa:	4b02      	ldr	r3, [pc, #8]	; (80a02b4 <HAL_Pin_Mode+0xc>)
 80a02ac:	681b      	ldr	r3, [r3, #0]
 80a02ae:	689b      	ldr	r3, [r3, #8]
 80a02b0:	9301      	str	r3, [sp, #4]
 80a02b2:	bd08      	pop	{r3, pc}
 80a02b4:	080601b0 	.word	0x080601b0

080a02b8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a02b8:	b508      	push	{r3, lr}
 80a02ba:	4b02      	ldr	r3, [pc, #8]	; (80a02c4 <HAL_Get_Pin_Mode+0xc>)
 80a02bc:	681b      	ldr	r3, [r3, #0]
 80a02be:	68db      	ldr	r3, [r3, #12]
 80a02c0:	9301      	str	r3, [sp, #4]
 80a02c2:	bd08      	pop	{r3, pc}
 80a02c4:	080601b0 	.word	0x080601b0

080a02c8 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
 80a02c8:	b508      	push	{r3, lr}
 80a02ca:	4b02      	ldr	r3, [pc, #8]	; (80a02d4 <HAL_DAC_Write+0xc>)
 80a02cc:	681b      	ldr	r3, [r3, #0]
 80a02ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a02d0:	9301      	str	r3, [sp, #4]
 80a02d2:	bd08      	pop	{r3, pc}
 80a02d4:	080601b0 	.word	0x080601b0

080a02d8 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
 80a02d8:	b508      	push	{r3, lr}
 80a02da:	4b02      	ldr	r3, [pc, #8]	; (80a02e4 <HAL_PWM_Write_Ext+0xc>)
 80a02dc:	681b      	ldr	r3, [r3, #0]
 80a02de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80a02e0:	9301      	str	r3, [sp, #4]
 80a02e2:	bd08      	pop	{r3, pc}
 80a02e4:	080601b0 	.word	0x080601b0

080a02e8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a02e8:	b508      	push	{r3, lr}
 80a02ea:	4b02      	ldr	r3, [pc, #8]	; (80a02f4 <HAL_SPI_Init+0xc>)
 80a02ec:	681b      	ldr	r3, [r3, #0]
 80a02ee:	69db      	ldr	r3, [r3, #28]
 80a02f0:	9301      	str	r3, [sp, #4]
 80a02f2:	bd08      	pop	{r3, pc}
 80a02f4:	080601b4 	.word	0x080601b4

080a02f8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a02f8:	b508      	push	{r3, lr}
 80a02fa:	4b02      	ldr	r3, [pc, #8]	; (80a0304 <HAL_SPI_Is_Enabled+0xc>)
 80a02fc:	681b      	ldr	r3, [r3, #0]
 80a02fe:	6a1b      	ldr	r3, [r3, #32]
 80a0300:	9301      	str	r3, [sp, #4]
 80a0302:	bd08      	pop	{r3, pc}
 80a0304:	080601b4 	.word	0x080601b4

080a0308 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0308:	b508      	push	{r3, lr}
 80a030a:	4b02      	ldr	r3, [pc, #8]	; (80a0314 <HAL_RNG_GetRandomNumber+0xc>)
 80a030c:	681b      	ldr	r3, [r3, #0]
 80a030e:	685b      	ldr	r3, [r3, #4]
 80a0310:	9301      	str	r3, [sp, #4]
 80a0312:	bd08      	pop	{r3, pc}
 80a0314:	0806019c 	.word	0x0806019c

080a0318 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0318:	b508      	push	{r3, lr}
 80a031a:	4b02      	ldr	r3, [pc, #8]	; (80a0324 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a031c:	681b      	ldr	r3, [r3, #0]
 80a031e:	695b      	ldr	r3, [r3, #20]
 80a0320:	9301      	str	r3, [sp, #4]
 80a0322:	bd08      	pop	{r3, pc}
 80a0324:	0806019c 	.word	0x0806019c

080a0328 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0328:	b508      	push	{r3, lr}
 80a032a:	4b02      	ldr	r3, [pc, #8]	; (80a0334 <os_mutex_recursive_create+0xc>)
 80a032c:	681b      	ldr	r3, [r3, #0]
 80a032e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0330:	9301      	str	r3, [sp, #4]
 80a0332:	bd08      	pop	{r3, pc}
 80a0334:	080601d0 	.word	0x080601d0

080a0338 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0338:	b508      	push	{r3, lr}
 80a033a:	4b02      	ldr	r3, [pc, #8]	; (80a0344 <os_mutex_recursive_destroy+0xc>)
 80a033c:	681b      	ldr	r3, [r3, #0]
 80a033e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0340:	9301      	str	r3, [sp, #4]
 80a0342:	bd08      	pop	{r3, pc}
 80a0344:	080601d0 	.word	0x080601d0

080a0348 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0348:	b508      	push	{r3, lr}
 80a034a:	4b02      	ldr	r3, [pc, #8]	; (80a0354 <HAL_USART_Init+0xc>)
 80a034c:	681b      	ldr	r3, [r3, #0]
 80a034e:	699b      	ldr	r3, [r3, #24]
 80a0350:	9301      	str	r3, [sp, #4]
 80a0352:	bd08      	pop	{r3, pc}
 80a0354:	080601c4 	.word	0x080601c4

080a0358 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0358:	b508      	push	{r3, lr}
 80a035a:	4b02      	ldr	r3, [pc, #8]	; (80a0364 <HAL_USART_Write_Data+0xc>)
 80a035c:	681b      	ldr	r3, [r3, #0]
 80a035e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0360:	9301      	str	r3, [sp, #4]
 80a0362:	bd08      	pop	{r3, pc}
 80a0364:	080601c4 	.word	0x080601c4

080a0368 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0368:	b508      	push	{r3, lr}
 80a036a:	4b02      	ldr	r3, [pc, #8]	; (80a0374 <HAL_USART_Available_Data+0xc>)
 80a036c:	681b      	ldr	r3, [r3, #0]
 80a036e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0370:	9301      	str	r3, [sp, #4]
 80a0372:	bd08      	pop	{r3, pc}
 80a0374:	080601c4 	.word	0x080601c4

080a0378 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0378:	b508      	push	{r3, lr}
 80a037a:	4b02      	ldr	r3, [pc, #8]	; (80a0384 <HAL_USART_Read_Data+0xc>)
 80a037c:	681b      	ldr	r3, [r3, #0]
 80a037e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0380:	9301      	str	r3, [sp, #4]
 80a0382:	bd08      	pop	{r3, pc}
 80a0384:	080601c4 	.word	0x080601c4

080a0388 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0388:	b508      	push	{r3, lr}
 80a038a:	4b02      	ldr	r3, [pc, #8]	; (80a0394 <HAL_USART_Peek_Data+0xc>)
 80a038c:	681b      	ldr	r3, [r3, #0]
 80a038e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0390:	9301      	str	r3, [sp, #4]
 80a0392:	bd08      	pop	{r3, pc}
 80a0394:	080601c4 	.word	0x080601c4

080a0398 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0398:	b508      	push	{r3, lr}
 80a039a:	4b02      	ldr	r3, [pc, #8]	; (80a03a4 <HAL_USART_Flush_Data+0xc>)
 80a039c:	681b      	ldr	r3, [r3, #0]
 80a039e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a03a0:	9301      	str	r3, [sp, #4]
 80a03a2:	bd08      	pop	{r3, pc}
 80a03a4:	080601c4 	.word	0x080601c4

080a03a8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a03a8:	b508      	push	{r3, lr}
 80a03aa:	4b02      	ldr	r3, [pc, #8]	; (80a03b4 <HAL_USART_Is_Enabled+0xc>)
 80a03ac:	681b      	ldr	r3, [r3, #0]
 80a03ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a03b0:	9301      	str	r3, [sp, #4]
 80a03b2:	bd08      	pop	{r3, pc}
 80a03b4:	080601c4 	.word	0x080601c4

080a03b8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a03b8:	b508      	push	{r3, lr}
 80a03ba:	4b02      	ldr	r3, [pc, #8]	; (80a03c4 <HAL_USART_Available_Data_For_Write+0xc>)
 80a03bc:	681b      	ldr	r3, [r3, #0]
 80a03be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a03c0:	9301      	str	r3, [sp, #4]
 80a03c2:	bd08      	pop	{r3, pc}
 80a03c4:	080601c4 	.word	0x080601c4

080a03c8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a03c8:	b508      	push	{r3, lr}
 80a03ca:	4b02      	ldr	r3, [pc, #8]	; (80a03d4 <HAL_I2C_Write_Data+0xc>)
 80a03cc:	681b      	ldr	r3, [r3, #0]
 80a03ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a03d0:	9301      	str	r3, [sp, #4]
 80a03d2:	bd08      	pop	{r3, pc}
 80a03d4:	080601ac 	.word	0x080601ac

080a03d8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a03d8:	b508      	push	{r3, lr}
 80a03da:	4b02      	ldr	r3, [pc, #8]	; (80a03e4 <HAL_I2C_Available_Data+0xc>)
 80a03dc:	681b      	ldr	r3, [r3, #0]
 80a03de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a03e0:	9301      	str	r3, [sp, #4]
 80a03e2:	bd08      	pop	{r3, pc}
 80a03e4:	080601ac 	.word	0x080601ac

080a03e8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a03e8:	b508      	push	{r3, lr}
 80a03ea:	4b02      	ldr	r3, [pc, #8]	; (80a03f4 <HAL_I2C_Read_Data+0xc>)
 80a03ec:	681b      	ldr	r3, [r3, #0]
 80a03ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a03f0:	9301      	str	r3, [sp, #4]
 80a03f2:	bd08      	pop	{r3, pc}
 80a03f4:	080601ac 	.word	0x080601ac

080a03f8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a03f8:	b508      	push	{r3, lr}
 80a03fa:	4b02      	ldr	r3, [pc, #8]	; (80a0404 <HAL_I2C_Peek_Data+0xc>)
 80a03fc:	681b      	ldr	r3, [r3, #0]
 80a03fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0400:	9301      	str	r3, [sp, #4]
 80a0402:	bd08      	pop	{r3, pc}
 80a0404:	080601ac 	.word	0x080601ac

080a0408 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0408:	b508      	push	{r3, lr}
 80a040a:	4b02      	ldr	r3, [pc, #8]	; (80a0414 <HAL_I2C_Flush_Data+0xc>)
 80a040c:	681b      	ldr	r3, [r3, #0]
 80a040e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0410:	9301      	str	r3, [sp, #4]
 80a0412:	bd08      	pop	{r3, pc}
 80a0414:	080601ac 	.word	0x080601ac

080a0418 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0418:	b508      	push	{r3, lr}
 80a041a:	4b02      	ldr	r3, [pc, #8]	; (80a0424 <HAL_I2C_Is_Enabled+0xc>)
 80a041c:	681b      	ldr	r3, [r3, #0]
 80a041e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0420:	9301      	str	r3, [sp, #4]
 80a0422:	bd08      	pop	{r3, pc}
 80a0424:	080601ac 	.word	0x080601ac

080a0428 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a0428:	b508      	push	{r3, lr}
 80a042a:	4b03      	ldr	r3, [pc, #12]	; (80a0438 <HAL_I2C_Init+0x10>)
 80a042c:	681b      	ldr	r3, [r3, #0]
 80a042e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0432:	9301      	str	r3, [sp, #4]
 80a0434:	bd08      	pop	{r3, pc}
 80a0436:	0000      	.short	0x0000
 80a0438:	080601ac 	.word	0x080601ac

080a043c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a043c:	b508      	push	{r3, lr}
 80a043e:	4b02      	ldr	r3, [pc, #8]	; (80a0448 <HAL_USB_USART_Init+0xc>)
 80a0440:	681b      	ldr	r3, [r3, #0]
 80a0442:	681b      	ldr	r3, [r3, #0]
 80a0444:	9301      	str	r3, [sp, #4]
 80a0446:	bd08      	pop	{r3, pc}
 80a0448:	080601d8 	.word	0x080601d8

080a044c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a044c:	b508      	push	{r3, lr}
 80a044e:	4b02      	ldr	r3, [pc, #8]	; (80a0458 <HAL_USB_USART_Available_Data+0xc>)
 80a0450:	681b      	ldr	r3, [r3, #0]
 80a0452:	691b      	ldr	r3, [r3, #16]
 80a0454:	9301      	str	r3, [sp, #4]
 80a0456:	bd08      	pop	{r3, pc}
 80a0458:	080601d8 	.word	0x080601d8

080a045c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a045c:	b508      	push	{r3, lr}
 80a045e:	4b02      	ldr	r3, [pc, #8]	; (80a0468 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0460:	681b      	ldr	r3, [r3, #0]
 80a0462:	695b      	ldr	r3, [r3, #20]
 80a0464:	9301      	str	r3, [sp, #4]
 80a0466:	bd08      	pop	{r3, pc}
 80a0468:	080601d8 	.word	0x080601d8

080a046c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a046c:	b508      	push	{r3, lr}
 80a046e:	4b02      	ldr	r3, [pc, #8]	; (80a0478 <HAL_USB_USART_Receive_Data+0xc>)
 80a0470:	681b      	ldr	r3, [r3, #0]
 80a0472:	699b      	ldr	r3, [r3, #24]
 80a0474:	9301      	str	r3, [sp, #4]
 80a0476:	bd08      	pop	{r3, pc}
 80a0478:	080601d8 	.word	0x080601d8

080a047c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a047c:	b508      	push	{r3, lr}
 80a047e:	4b02      	ldr	r3, [pc, #8]	; (80a0488 <HAL_USB_USART_Send_Data+0xc>)
 80a0480:	681b      	ldr	r3, [r3, #0]
 80a0482:	69db      	ldr	r3, [r3, #28]
 80a0484:	9301      	str	r3, [sp, #4]
 80a0486:	bd08      	pop	{r3, pc}
 80a0488:	080601d8 	.word	0x080601d8

080a048c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a048c:	b508      	push	{r3, lr}
 80a048e:	4b02      	ldr	r3, [pc, #8]	; (80a0498 <HAL_USB_USART_Flush_Data+0xc>)
 80a0490:	681b      	ldr	r3, [r3, #0]
 80a0492:	6a1b      	ldr	r3, [r3, #32]
 80a0494:	9301      	str	r3, [sp, #4]
 80a0496:	bd08      	pop	{r3, pc}
 80a0498:	080601d8 	.word	0x080601d8

080a049c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a049c:	b508      	push	{r3, lr}
 80a049e:	4b02      	ldr	r3, [pc, #8]	; (80a04a8 <inet_gethostbyname+0xc>)
 80a04a0:	681b      	ldr	r3, [r3, #0]
 80a04a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a04a4:	9301      	str	r3, [sp, #4]
 80a04a6:	bd08      	pop	{r3, pc}
 80a04a8:	080601c0 	.word	0x080601c0

080a04ac <softap_set_application_page_handler>:
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
DYNALIB_FN(21, hal_wlan, wlan_set_ipaddress, void(const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, void*))
DYNALIB_FN(22, hal_wlan, wlan_set_ipaddress_source, void(IPAddressSource, bool, void*))
DYNALIB_FN(23, hal_wlan, wlan_scan, int(wlan_scan_result_t, void*))
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
 80a04ac:	b508      	push	{r3, lr}
 80a04ae:	4b02      	ldr	r3, [pc, #8]	; (80a04b8 <softap_set_application_page_handler+0xc>)
 80a04b0:	681b      	ldr	r3, [r3, #0]
 80a04b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a04b4:	9301      	str	r3, [sp, #4]
 80a04b6:	bd08      	pop	{r3, pc}
 80a04b8:	080601c0 	.word	0x080601c0

080a04bc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a04bc:	b508      	push	{r3, lr}
 80a04be:	4b02      	ldr	r3, [pc, #8]	; (80a04c8 <set_system_mode+0xc>)
 80a04c0:	681b      	ldr	r3, [r3, #0]
 80a04c2:	685b      	ldr	r3, [r3, #4]
 80a04c4:	9301      	str	r3, [sp, #4]
 80a04c6:	bd08      	pop	{r3, pc}
 80a04c8:	080601a4 	.word	0x080601a4

080a04cc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a04cc:	b508      	push	{r3, lr}
 80a04ce:	4b02      	ldr	r3, [pc, #8]	; (80a04d8 <system_delay_ms+0xc>)
 80a04d0:	681b      	ldr	r3, [r3, #0]
 80a04d2:	695b      	ldr	r3, [r3, #20]
 80a04d4:	9301      	str	r3, [sp, #4]
 80a04d6:	bd08      	pop	{r3, pc}
 80a04d8:	080601a4 	.word	0x080601a4

080a04dc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a04dc:	b508      	push	{r3, lr}
 80a04de:	4b03      	ldr	r3, [pc, #12]	; (80a04ec <system_ctrl_set_app_request_handler+0x10>)
 80a04e0:	681b      	ldr	r3, [r3, #0]
 80a04e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a04e6:	9301      	str	r3, [sp, #4]
 80a04e8:	bd08      	pop	{r3, pc}
 80a04ea:	0000      	.short	0x0000
 80a04ec:	080601a4 	.word	0x080601a4

080a04f0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a04f0:	b508      	push	{r3, lr}
 80a04f2:	4b03      	ldr	r3, [pc, #12]	; (80a0500 <system_ctrl_set_result+0x10>)
 80a04f4:	681b      	ldr	r3, [r3, #0]
 80a04f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a04fa:	9301      	str	r3, [sp, #4]
 80a04fc:	bd08      	pop	{r3, pc}
 80a04fe:	0000      	.short	0x0000
 80a0500:	080601a4 	.word	0x080601a4

080a0504 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0504:	b508      	push	{r3, lr}
 80a0506:	4b02      	ldr	r3, [pc, #8]	; (80a0510 <network_connect+0xc>)
 80a0508:	681b      	ldr	r3, [r3, #0]
 80a050a:	685b      	ldr	r3, [r3, #4]
 80a050c:	9301      	str	r3, [sp, #4]
 80a050e:	bd08      	pop	{r3, pc}
 80a0510:	080601c8 	.word	0x080601c8

080a0514 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0514:	b508      	push	{r3, lr}
 80a0516:	4b02      	ldr	r3, [pc, #8]	; (80a0520 <network_connecting+0xc>)
 80a0518:	681b      	ldr	r3, [r3, #0]
 80a051a:	689b      	ldr	r3, [r3, #8]
 80a051c:	9301      	str	r3, [sp, #4]
 80a051e:	bd08      	pop	{r3, pc}
 80a0520:	080601c8 	.word	0x080601c8

080a0524 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0524:	b508      	push	{r3, lr}
 80a0526:	4b02      	ldr	r3, [pc, #8]	; (80a0530 <network_disconnect+0xc>)
 80a0528:	681b      	ldr	r3, [r3, #0]
 80a052a:	68db      	ldr	r3, [r3, #12]
 80a052c:	9301      	str	r3, [sp, #4]
 80a052e:	bd08      	pop	{r3, pc}
 80a0530:	080601c8 	.word	0x080601c8

080a0534 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0534:	b508      	push	{r3, lr}
 80a0536:	4b02      	ldr	r3, [pc, #8]	; (80a0540 <network_ready+0xc>)
 80a0538:	681b      	ldr	r3, [r3, #0]
 80a053a:	691b      	ldr	r3, [r3, #16]
 80a053c:	9301      	str	r3, [sp, #4]
 80a053e:	bd08      	pop	{r3, pc}
 80a0540:	080601c8 	.word	0x080601c8

080a0544 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0544:	b508      	push	{r3, lr}
 80a0546:	4b02      	ldr	r3, [pc, #8]	; (80a0550 <network_on+0xc>)
 80a0548:	681b      	ldr	r3, [r3, #0]
 80a054a:	695b      	ldr	r3, [r3, #20]
 80a054c:	9301      	str	r3, [sp, #4]
 80a054e:	bd08      	pop	{r3, pc}
 80a0550:	080601c8 	.word	0x080601c8

080a0554 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0554:	b508      	push	{r3, lr}
 80a0556:	4b02      	ldr	r3, [pc, #8]	; (80a0560 <network_off+0xc>)
 80a0558:	681b      	ldr	r3, [r3, #0]
 80a055a:	699b      	ldr	r3, [r3, #24]
 80a055c:	9301      	str	r3, [sp, #4]
 80a055e:	bd08      	pop	{r3, pc}
 80a0560:	080601c8 	.word	0x080601c8

080a0564 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0564:	b508      	push	{r3, lr}
 80a0566:	4b02      	ldr	r3, [pc, #8]	; (80a0570 <network_listen+0xc>)
 80a0568:	681b      	ldr	r3, [r3, #0]
 80a056a:	69db      	ldr	r3, [r3, #28]
 80a056c:	9301      	str	r3, [sp, #4]
 80a056e:	bd08      	pop	{r3, pc}
 80a0570:	080601c8 	.word	0x080601c8

080a0574 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0574:	b508      	push	{r3, lr}
 80a0576:	4b02      	ldr	r3, [pc, #8]	; (80a0580 <network_listening+0xc>)
 80a0578:	681b      	ldr	r3, [r3, #0]
 80a057a:	6a1b      	ldr	r3, [r3, #32]
 80a057c:	9301      	str	r3, [sp, #4]
 80a057e:	bd08      	pop	{r3, pc}
 80a0580:	080601c8 	.word	0x080601c8

080a0584 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0584:	b508      	push	{r3, lr}
 80a0586:	4b02      	ldr	r3, [pc, #8]	; (80a0590 <network_set_listen_timeout+0xc>)
 80a0588:	681b      	ldr	r3, [r3, #0]
 80a058a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a058c:	9301      	str	r3, [sp, #4]
 80a058e:	bd08      	pop	{r3, pc}
 80a0590:	080601c8 	.word	0x080601c8

080a0594 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0594:	b508      	push	{r3, lr}
 80a0596:	4b02      	ldr	r3, [pc, #8]	; (80a05a0 <network_get_listen_timeout+0xc>)
 80a0598:	681b      	ldr	r3, [r3, #0]
 80a059a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a059c:	9301      	str	r3, [sp, #4]
 80a059e:	bd08      	pop	{r3, pc}
 80a05a0:	080601c8 	.word	0x080601c8

080a05a4 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a05a4:	b508      	push	{r3, lr}
 80a05a6:	4b02      	ldr	r3, [pc, #8]	; (80a05b0 <spark_function+0xc>)
 80a05a8:	681b      	ldr	r3, [r3, #0]
 80a05aa:	685b      	ldr	r3, [r3, #4]
 80a05ac:	9301      	str	r3, [sp, #4]
 80a05ae:	bd08      	pop	{r3, pc}
 80a05b0:	080601cc 	.word	0x080601cc

080a05b4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a05b4:	b508      	push	{r3, lr}
 80a05b6:	4b02      	ldr	r3, [pc, #8]	; (80a05c0 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a05b8:	681b      	ldr	r3, [r3, #0]
 80a05ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a05bc:	9301      	str	r3, [sp, #4]
 80a05be:	bd08      	pop	{r3, pc}
 80a05c0:	080601cc 	.word	0x080601cc

080a05c4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a05c4:	b508      	push	{r3, lr}
 80a05c6:	4b02      	ldr	r3, [pc, #8]	; (80a05d0 <malloc+0xc>)
 80a05c8:	681b      	ldr	r3, [r3, #0]
 80a05ca:	681b      	ldr	r3, [r3, #0]
 80a05cc:	9301      	str	r3, [sp, #4]
 80a05ce:	bd08      	pop	{r3, pc}
 80a05d0:	080601a0 	.word	0x080601a0

080a05d4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a05d4:	b508      	push	{r3, lr}
 80a05d6:	4b02      	ldr	r3, [pc, #8]	; (80a05e0 <free+0xc>)
 80a05d8:	681b      	ldr	r3, [r3, #0]
 80a05da:	685b      	ldr	r3, [r3, #4]
 80a05dc:	9301      	str	r3, [sp, #4]
 80a05de:	bd08      	pop	{r3, pc}
 80a05e0:	080601a0 	.word	0x080601a0

080a05e4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a05e4:	b508      	push	{r3, lr}
 80a05e6:	4b02      	ldr	r3, [pc, #8]	; (80a05f0 <realloc+0xc>)
 80a05e8:	681b      	ldr	r3, [r3, #0]
 80a05ea:	689b      	ldr	r3, [r3, #8]
 80a05ec:	9301      	str	r3, [sp, #4]
 80a05ee:	bd08      	pop	{r3, pc}
 80a05f0:	080601a0 	.word	0x080601a0

080a05f4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a05f4:	b508      	push	{r3, lr}
 80a05f6:	4b02      	ldr	r3, [pc, #8]	; (80a0600 <vsnprintf+0xc>)
 80a05f8:	681b      	ldr	r3, [r3, #0]
 80a05fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a05fc:	9301      	str	r3, [sp, #4]
 80a05fe:	bd08      	pop	{r3, pc}
 80a0600:	080601a0 	.word	0x080601a0

080a0604 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0604:	b570      	push	{r4, r5, r6, lr}
 80a0606:	4604      	mov	r4, r0
 80a0608:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a060a:	2500      	movs	r5, #0
 80a060c:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0610:	f7ff fe8a 	bl	80a0328 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a0614:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a0616:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a0618:	f7ff fe66 	bl	80a02e8 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a061c:	6065      	str	r5, [r4, #4]
}
 80a061e:	4620      	mov	r0, r4
 80a0620:	bd70      	pop	{r4, r5, r6, pc}

080a0622 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a0622:	7800      	ldrb	r0, [r0, #0]
 80a0624:	f7ff be68 	b.w	80a02f8 <HAL_SPI_Is_Enabled>

080a0628 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a0628:	b510      	push	{r4, lr}
 80a062a:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a062c:	6800      	ldr	r0, [r0, #0]
 80a062e:	b118      	cbz	r0, 80a0638 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a0630:	f7ff ffd0 	bl	80a05d4 <free>
            wakeupSource_ = nullptr;
 80a0634:	2300      	movs	r3, #0
 80a0636:	6023      	str	r3, [r4, #0]
 80a0638:	bd10      	pop	{r4, pc}

080a063a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a063a:	b510      	push	{r4, lr}
 80a063c:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a063e:	f7ff fff3 	bl	80a0628 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0642:	4620      	mov	r0, r4
 80a0644:	bd10      	pop	{r4, pc}
	...

080a0648 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0648:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a064c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a064e:	4c08      	ldr	r4, [pc, #32]	; (80a0670 <_GLOBAL__sub_I_System+0x28>)
 80a0650:	2000      	movs	r0, #0
 80a0652:	6020      	str	r0, [r4, #0]
 80a0654:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0656:	71a0      	strb	r0, [r4, #6]
 80a0658:	8120      	strh	r0, [r4, #8]
 80a065a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a065c:	f7ff ff2e 	bl	80a04bc <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a0660:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a0666:	4a03      	ldr	r2, [pc, #12]	; (80a0674 <_GLOBAL__sub_I_System+0x2c>)
 80a0668:	4903      	ldr	r1, [pc, #12]	; (80a0678 <_GLOBAL__sub_I_System+0x30>)
 80a066a:	f000 bdbd 	b.w	80a11e8 <__aeabi_atexit>
 80a066e:	bf00      	nop
 80a0670:	200000e4 	.word	0x200000e4
 80a0674:	200000dc 	.word	0x200000dc
 80a0678:	080a063b 	.word	0x080a063b

080a067c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a067c:	b510      	push	{r4, lr}
 80a067e:	4604      	mov	r4, r0
{
	free(buffer);
 80a0680:	6800      	ldr	r0, [r0, #0]
 80a0682:	f7ff ffa7 	bl	80a05d4 <free>
}
 80a0686:	4620      	mov	r0, r4
 80a0688:	bd10      	pop	{r4, pc}

080a068a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a068a:	b510      	push	{r4, lr}
 80a068c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a068e:	6800      	ldr	r0, [r0, #0]
 80a0690:	b108      	cbz	r0, 80a0696 <_ZN6String10invalidateEv+0xc>
 80a0692:	f7ff ff9f 	bl	80a05d4 <free>
	buffer = NULL;
 80a0696:	2300      	movs	r3, #0
 80a0698:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a069a:	60a3      	str	r3, [r4, #8]
 80a069c:	6063      	str	r3, [r4, #4]
 80a069e:	bd10      	pop	{r4, pc}

080a06a0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a06a0:	b538      	push	{r3, r4, r5, lr}
 80a06a2:	4604      	mov	r4, r0
 80a06a4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a06a6:	6800      	ldr	r0, [r0, #0]
 80a06a8:	3101      	adds	r1, #1
 80a06aa:	f7ff ff9b 	bl	80a05e4 <realloc>
	if (newbuffer) {
 80a06ae:	b110      	cbz	r0, 80a06b6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a06b0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a06b4:	2001      	movs	r0, #1
	}
	return 0;
}
 80a06b6:	bd38      	pop	{r3, r4, r5, pc}

080a06b8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a06b8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a06ba:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a06bc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a06be:	b113      	cbz	r3, 80a06c6 <_ZN6String7reserveEj+0xe>
 80a06c0:	6843      	ldr	r3, [r0, #4]
 80a06c2:	428b      	cmp	r3, r1
 80a06c4:	d207      	bcs.n	80a06d6 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a06c6:	4620      	mov	r0, r4
 80a06c8:	f7ff ffea 	bl	80a06a0 <_ZN6String12changeBufferEj>
 80a06cc:	b120      	cbz	r0, 80a06d8 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a06ce:	68a3      	ldr	r3, [r4, #8]
 80a06d0:	b90b      	cbnz	r3, 80a06d6 <_ZN6String7reserveEj+0x1e>
 80a06d2:	6822      	ldr	r2, [r4, #0]
 80a06d4:	7013      	strb	r3, [r2, #0]
 80a06d6:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a06d8:	bd10      	pop	{r4, pc}

080a06da <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a06da:	b570      	push	{r4, r5, r6, lr}
 80a06dc:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a06de:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a06e0:	4604      	mov	r4, r0
 80a06e2:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a06e4:	f7ff ffe8 	bl	80a06b8 <_ZN6String7reserveEj>
 80a06e8:	b918      	cbnz	r0, 80a06f2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a06ea:	4620      	mov	r0, r4
 80a06ec:	f7ff ffcd 	bl	80a068a <_ZN6String10invalidateEv>
		return *this;
 80a06f0:	e009      	b.n	80a0706 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a06f2:	462a      	mov	r2, r5
 80a06f4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a06f6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a06f8:	6820      	ldr	r0, [r4, #0]
 80a06fa:	f000 feed 	bl	80a14d8 <memcpy>
	buffer[len] = 0;
 80a06fe:	6822      	ldr	r2, [r4, #0]
 80a0700:	68a3      	ldr	r3, [r4, #8]
 80a0702:	2100      	movs	r1, #0
 80a0704:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a0706:	4620      	mov	r0, r4
 80a0708:	bd70      	pop	{r4, r5, r6, pc}

080a070a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a070a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a070c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a070e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0710:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0712:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0714:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0716:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a0718:	460d      	mov	r5, r1
 80a071a:	b139      	cbz	r1, 80a072c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a071c:	4608      	mov	r0, r1
 80a071e:	f000 ff5b 	bl	80a15d8 <strlen>
 80a0722:	4629      	mov	r1, r5
 80a0724:	4602      	mov	r2, r0
 80a0726:	4620      	mov	r0, r4
 80a0728:	f7ff ffd7 	bl	80a06da <_ZN6String4copyEPKcj>
}
 80a072c:	4620      	mov	r0, r4
 80a072e:	bd38      	pop	{r3, r4, r5, pc}

080a0730 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a0730:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a0732:	b510      	push	{r4, lr}
 80a0734:	460b      	mov	r3, r1
 80a0736:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a0738:	d007      	beq.n	80a074a <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a073a:	6809      	ldr	r1, [r1, #0]
 80a073c:	b119      	cbz	r1, 80a0746 <_ZN6StringaSERKS_+0x16>
 80a073e:	689a      	ldr	r2, [r3, #8]
 80a0740:	f7ff ffcb 	bl	80a06da <_ZN6String4copyEPKcj>
 80a0744:	e001      	b.n	80a074a <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a0746:	f7ff ffa0 	bl	80a068a <_ZN6String10invalidateEv>

	return *this;
}
 80a074a:	4620      	mov	r0, r4
 80a074c:	bd10      	pop	{r4, pc}

080a074e <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a074e:	b510      	push	{r4, lr}
 80a0750:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0752:	2300      	movs	r3, #0
 80a0754:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0756:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0758:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a075a:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a075c:	f7ff ffe8 	bl	80a0730 <_ZN6StringaSERKS_>
}
 80a0760:	4620      	mov	r0, r4
 80a0762:	bd10      	pop	{r4, pc}

080a0764 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a0764:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a0766:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a0768:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a076a:	b912      	cbnz	r2, 80a0772 <_ZNK6String6equalsEPKc+0xe>
 80a076c:	b919      	cbnz	r1, 80a0776 <_ZNK6String6equalsEPKc+0x12>
 80a076e:	2001      	movs	r0, #1
 80a0770:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a0772:	b911      	cbnz	r1, 80a077a <_ZNK6String6equalsEPKc+0x16>
 80a0774:	6803      	ldr	r3, [r0, #0]
 80a0776:	7818      	ldrb	r0, [r3, #0]
 80a0778:	e002      	b.n	80a0780 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a077a:	6800      	ldr	r0, [r0, #0]
 80a077c:	f000 ff22 	bl	80a15c4 <strcmp>
 80a0780:	fab0 f080 	clz	r0, r0
 80a0784:	0940      	lsrs	r0, r0, #5
}
 80a0786:	bd08      	pop	{r3, pc}

080a0788 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a078a:	4606      	mov	r6, r0
 80a078c:	460d      	mov	r5, r1
 80a078e:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0790:	2400      	movs	r4, #0
  while (size--) {
 80a0792:	42bd      	cmp	r5, r7
 80a0794:	d00c      	beq.n	80a07b0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0796:	6833      	ldr	r3, [r6, #0]
 80a0798:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a079c:	689b      	ldr	r3, [r3, #8]
 80a079e:	4630      	mov	r0, r6
 80a07a0:	4798      	blx	r3
     if (chunk>=0)
 80a07a2:	2800      	cmp	r0, #0
 80a07a4:	db01      	blt.n	80a07aa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a07a6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a07a8:	e7f3      	b.n	80a0792 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a07aa:	2c00      	cmp	r4, #0
 80a07ac:	bf08      	it	eq
 80a07ae:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a07b0:	4620      	mov	r0, r4
 80a07b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a07b4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a07b4:	b570      	push	{r4, r5, r6, lr}
 80a07b6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a07b8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a07ba:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a07bc:	b149      	cbz	r1, 80a07d2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a07be:	f000 ff0b 	bl	80a15d8 <strlen>
 80a07c2:	682b      	ldr	r3, [r5, #0]
 80a07c4:	4602      	mov	r2, r0
 80a07c6:	4621      	mov	r1, r4
 80a07c8:	4628      	mov	r0, r5
    }
 80a07ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a07ce:	68db      	ldr	r3, [r3, #12]
 80a07d0:	4718      	bx	r3
    }
 80a07d2:	bd70      	pop	{r4, r5, r6, pc}

080a07d4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a07d4:	6803      	ldr	r3, [r0, #0]
 80a07d6:	689b      	ldr	r3, [r3, #8]
 80a07d8:	4718      	bx	r3

080a07da <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a07da:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a07dc:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a07de:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a07e0:	f7ff fff8 	bl	80a07d4 <_ZN5Print5printEc>
  n += print('\n');
 80a07e4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a07e6:	4604      	mov	r4, r0
  n += print('\n');
 80a07e8:	4628      	mov	r0, r5
 80a07ea:	f7ff fff3 	bl	80a07d4 <_ZN5Print5printEc>
  return n;
}
 80a07ee:	4420      	add	r0, r4
 80a07f0:	bd38      	pop	{r3, r4, r5, pc}

080a07f2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a07f2:	b538      	push	{r3, r4, r5, lr}
 80a07f4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a07f6:	f7ff ffdd 	bl	80a07b4 <_ZN5Print5writeEPKc>
 80a07fa:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a07fc:	4628      	mov	r0, r5
 80a07fe:	f7ff ffec 	bl	80a07da <_ZN5Print7printlnEv>
  return n;
}
 80a0802:	4420      	add	r0, r4
 80a0804:	bd38      	pop	{r3, r4, r5, pc}

080a0806 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0806:	2a01      	cmp	r2, #1
 80a0808:	bf98      	it	ls
 80a080a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a080c:	b530      	push	{r4, r5, lr}
 80a080e:	460b      	mov	r3, r1
 80a0810:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0812:	2100      	movs	r1, #0
 80a0814:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0818:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a081c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a0820:	fb05 3312 	mls	r3, r5, r2, r3
 80a0824:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0826:	2b09      	cmp	r3, #9
 80a0828:	bf94      	ite	ls
 80a082a:	3330      	addls	r3, #48	; 0x30
 80a082c:	3337      	addhi	r3, #55	; 0x37
 80a082e:	b2db      	uxtb	r3, r3
 80a0830:	4621      	mov	r1, r4
 80a0832:	f804 3901 	strb.w	r3, [r4], #-1
 80a0836:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0838:	2d00      	cmp	r5, #0
 80a083a:	d1ef      	bne.n	80a081c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a083c:	f7ff ffba 	bl	80a07b4 <_ZN5Print5writeEPKc>
}
 80a0840:	b00b      	add	sp, #44	; 0x2c
 80a0842:	bd30      	pop	{r4, r5, pc}

080a0844 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a0844:	b40c      	push	{r2, r3}
 80a0846:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a084a:	b087      	sub	sp, #28
 80a084c:	af00      	add	r7, sp, #0
 80a084e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a0852:	f854 9b04 	ldr.w	r9, [r4], #4
 80a0856:	4605      	mov	r5, r0
 80a0858:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a085a:	4623      	mov	r3, r4
 80a085c:	464a      	mov	r2, r9
 80a085e:	2114      	movs	r1, #20
 80a0860:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a0862:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a0864:	f7ff fec6 	bl	80a05f4 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a0868:	2813      	cmp	r0, #19
 80a086a:	d805      	bhi.n	80a0878 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a086c:	1d39      	adds	r1, r7, #4
 80a086e:	4628      	mov	r0, r5
 80a0870:	f7ff ffa0 	bl	80a07b4 <_ZN5Print5writeEPKc>
 80a0874:	4604      	mov	r4, r0
 80a0876:	e013      	b.n	80a08a0 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a0878:	f100 0308 	add.w	r3, r0, #8
 80a087c:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a0880:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a0882:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a0886:	1c41      	adds	r1, r0, #1
 80a0888:	4623      	mov	r3, r4
 80a088a:	464a      	mov	r2, r9
 80a088c:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a088e:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a0890:	f7ff feb0 	bl	80a05f4 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0894:	4669      	mov	r1, sp
 80a0896:	4628      	mov	r0, r5
 80a0898:	f7ff ff8c 	bl	80a07b4 <_ZN5Print5writeEPKc>
 80a089c:	4604      	mov	r4, r0
 80a089e:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a08a0:	b11e      	cbz	r6, 80a08aa <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a08a2:	4628      	mov	r0, r5
 80a08a4:	f7ff ff99 	bl	80a07da <_ZN5Print7printlnEv>
 80a08a8:	4404      	add	r4, r0
    return n;
}
 80a08aa:	4620      	mov	r0, r4
 80a08ac:	371c      	adds	r7, #28
 80a08ae:	46bd      	mov	sp, r7
 80a08b0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a08b4:	b002      	add	sp, #8
 80a08b6:	4770      	bx	lr

080a08b8 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a08b8:	2300      	movs	r3, #0
 80a08ba:	461a      	mov	r2, r3
 80a08bc:	4619      	mov	r1, r3
 80a08be:	6840      	ldr	r0, [r0, #4]
 80a08c0:	f7ff be40 	b.w	80a0544 <network_on>

080a08c4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a08c4:	4a01      	ldr	r2, [pc, #4]	; (80a08cc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a08c6:	4b02      	ldr	r3, [pc, #8]	; (80a08d0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a08c8:	601a      	str	r2, [r3, #0]
 80a08ca:	4770      	bx	lr
 80a08cc:	080a6a70 	.word	0x080a6a70
 80a08d0:	200000f0 	.word	0x200000f0

080a08d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a08d4:	4b02      	ldr	r3, [pc, #8]	; (80a08e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a08d6:	681a      	ldr	r2, [r3, #0]
 80a08d8:	4b02      	ldr	r3, [pc, #8]	; (80a08e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a08da:	601a      	str	r2, [r3, #0]
 80a08dc:	4770      	bx	lr
 80a08de:	bf00      	nop
 80a08e0:	20000074 	.word	0x20000074
 80a08e4:	200000f4 	.word	0x200000f4

080a08e8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a08e8:	2100      	movs	r1, #0
 80a08ea:	f7ff bdef 	b.w	80a04cc <system_delay_ms>

080a08ee <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a08ee:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a08f0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a08f2:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a08f4:	b113      	cbz	r3, 80a08fc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a08f6:	2203      	movs	r2, #3
 80a08f8:	4601      	mov	r1, r0
 80a08fa:	4798      	blx	r3
    }
 80a08fc:	4620      	mov	r0, r4
 80a08fe:	bd10      	pop	{r4, pc}

080a0900 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0900:	b510      	push	{r4, lr}
 80a0902:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0904:	f7ff fff3 	bl	80a08ee <_ZNSt14_Function_baseD1Ev>
 80a0908:	4620      	mov	r0, r4
 80a090a:	bd10      	pop	{r4, pc}

080a090c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a090c:	4803      	ldr	r0, [pc, #12]	; (80a091c <_GLOBAL__sub_I_RGB+0x10>)
 80a090e:	2300      	movs	r3, #0
 80a0910:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0912:	4a03      	ldr	r2, [pc, #12]	; (80a0920 <_GLOBAL__sub_I_RGB+0x14>)
 80a0914:	4903      	ldr	r1, [pc, #12]	; (80a0924 <_GLOBAL__sub_I_RGB+0x18>)
 80a0916:	f000 bc67 	b.w	80a11e8 <__aeabi_atexit>
 80a091a:	bf00      	nop
 80a091c:	200000f8 	.word	0x200000f8
 80a0920:	200000dc 	.word	0x200000dc
 80a0924:	080a0901 	.word	0x080a0901

080a0928 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0928:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a092a:	4b14      	ldr	r3, [pc, #80]	; (80a097c <serialEventRun+0x54>)
 80a092c:	b133      	cbz	r3, 80a093c <serialEventRun+0x14>
 80a092e:	f000 f993 	bl	80a0c58 <_Z16_fetch_usbserialv>
 80a0932:	6803      	ldr	r3, [r0, #0]
 80a0934:	691b      	ldr	r3, [r3, #16]
 80a0936:	4798      	blx	r3
 80a0938:	2800      	cmp	r0, #0
 80a093a:	dc16      	bgt.n	80a096a <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a093c:	4b10      	ldr	r3, [pc, #64]	; (80a0980 <serialEventRun+0x58>)
 80a093e:	b133      	cbz	r3, 80a094e <serialEventRun+0x26>
 80a0940:	f000 fa48 	bl	80a0dd4 <_Z22__fetch_global_Serial1v>
 80a0944:	6803      	ldr	r3, [r0, #0]
 80a0946:	691b      	ldr	r3, [r3, #16]
 80a0948:	4798      	blx	r3
 80a094a:	2800      	cmp	r0, #0
 80a094c:	dc10      	bgt.n	80a0970 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a094e:	4b0d      	ldr	r3, [pc, #52]	; (80a0984 <serialEventRun+0x5c>)
 80a0950:	b10b      	cbz	r3, 80a0956 <serialEventRun+0x2e>
 80a0952:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0956:	4b0c      	ldr	r3, [pc, #48]	; (80a0988 <serialEventRun+0x60>)
 80a0958:	b17b      	cbz	r3, 80a097a <serialEventRun+0x52>
 80a095a:	f000 f9b9 	bl	80a0cd0 <_Z17_fetch_usbserial1v>
 80a095e:	6803      	ldr	r3, [r0, #0]
 80a0960:	691b      	ldr	r3, [r3, #16]
 80a0962:	4798      	blx	r3
 80a0964:	2800      	cmp	r0, #0
 80a0966:	dc06      	bgt.n	80a0976 <serialEventRun+0x4e>
 80a0968:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a096a:	f3af 8000 	nop.w
 80a096e:	e7e5      	b.n	80a093c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0970:	f3af 8000 	nop.w
 80a0974:	e7eb      	b.n	80a094e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0976:	f3af 8000 	nop.w
 80a097a:	bd08      	pop	{r3, pc}
	...

080a098c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a098c:	b508      	push	{r3, lr}
	serialEventRun();
 80a098e:	f7ff ffcb 	bl	80a0928 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0992:	f7ff fcc1 	bl	80a0318 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0996:	4b01      	ldr	r3, [pc, #4]	; (80a099c <_post_loop+0x10>)
 80a0998:	6018      	str	r0, [r3, #0]
 80a099a:	bd08      	pop	{r3, pc}
 80a099c:	2000058c 	.word	0x2000058c

080a09a0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a09a0:	4802      	ldr	r0, [pc, #8]	; (80a09ac <_Z33system_initialize_user_backup_ramv+0xc>)
 80a09a2:	4a03      	ldr	r2, [pc, #12]	; (80a09b0 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a09a4:	4903      	ldr	r1, [pc, #12]	; (80a09b4 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a09a6:	1a12      	subs	r2, r2, r0
 80a09a8:	f000 bd96 	b.w	80a14d8 <memcpy>
 80a09ac:	40024000 	.word	0x40024000
 80a09b0:	40024004 	.word	0x40024004
 80a09b4:	080a6ca0 	.word	0x080a6ca0

080a09b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a09b8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a09ba:	2300      	movs	r3, #0
 80a09bc:	9300      	str	r3, [sp, #0]
 80a09be:	461a      	mov	r2, r3
 80a09c0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a09c4:	f7ff fd94 	bl	80a04f0 <system_ctrl_set_result>
}
 80a09c8:	b003      	add	sp, #12
 80a09ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a09d0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a09d0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a09d2:	8843      	ldrh	r3, [r0, #2]
 80a09d4:	2b0a      	cmp	r3, #10
 80a09d6:	d008      	beq.n	80a09ea <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a09d8:	2b50      	cmp	r3, #80	; 0x50
 80a09da:	d109      	bne.n	80a09f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a09dc:	4b09      	ldr	r3, [pc, #36]	; (80a0a04 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a09de:	681b      	ldr	r3, [r3, #0]
 80a09e0:	b13b      	cbz	r3, 80a09f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a09e2:	b003      	add	sp, #12
 80a09e4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a09e8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a09ea:	f7ff ffe5 	bl	80a09b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a09ee:	e006      	b.n	80a09fe <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a09f0:	2300      	movs	r3, #0
 80a09f2:	9300      	str	r3, [sp, #0]
 80a09f4:	461a      	mov	r2, r3
 80a09f6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a09fa:	f7ff fd79 	bl	80a04f0 <system_ctrl_set_result>
        break;
    }
}
 80a09fe:	b003      	add	sp, #12
 80a0a00:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0a04:	20000108 	.word	0x20000108

080a0a08 <module_user_init_hook>:

void module_user_init_hook()
{
 80a0a08:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0a0a:	4c10      	ldr	r4, [pc, #64]	; (80a0a4c <module_user_init_hook+0x44>)
 80a0a0c:	4d10      	ldr	r5, [pc, #64]	; (80a0a50 <module_user_init_hook+0x48>)
 80a0a0e:	6823      	ldr	r3, [r4, #0]
 80a0a10:	42ab      	cmp	r3, r5
 80a0a12:	4b10      	ldr	r3, [pc, #64]	; (80a0a54 <module_user_init_hook+0x4c>)
 80a0a14:	bf0c      	ite	eq
 80a0a16:	2201      	moveq	r2, #1
 80a0a18:	2200      	movne	r2, #0
 80a0a1a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0a1c:	d002      	beq.n	80a0a24 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0a1e:	f7ff ffbf 	bl	80a09a0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0a22:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0a24:	f7ff fc70 	bl	80a0308 <HAL_RNG_GetRandomNumber>
 80a0a28:	4604      	mov	r4, r0
    srand(seed);
 80a0a2a:	f000 fd69 	bl	80a1500 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0a2e:	4b0a      	ldr	r3, [pc, #40]	; (80a0a58 <module_user_init_hook+0x50>)
 80a0a30:	b113      	cbz	r3, 80a0a38 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a0a32:	4620      	mov	r0, r4
 80a0a34:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0a38:	2100      	movs	r1, #0
 80a0a3a:	4807      	ldr	r0, [pc, #28]	; (80a0a58 <module_user_init_hook+0x50>)
 80a0a3c:	f7ff fdba 	bl	80a05b4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0a40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0a44:	2100      	movs	r1, #0
 80a0a46:	4805      	ldr	r0, [pc, #20]	; (80a0a5c <module_user_init_hook+0x54>)
 80a0a48:	f7ff bd48 	b.w	80a04dc <system_ctrl_set_app_request_handler>
 80a0a4c:	40024000 	.word	0x40024000
 80a0a50:	9a271c1e 	.word	0x9a271c1e
 80a0a54:	2000010c 	.word	0x2000010c
 80a0a58:	00000000 	.word	0x00000000
 80a0a5c:	080a09d1 	.word	0x080a09d1

080a0a60 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a0a60:	b510      	push	{r4, lr}
 80a0a62:	b088      	sub	sp, #32
 80a0a64:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a0a66:	4668      	mov	r0, sp
 80a0a68:	f7ff fe4f 	bl	80a070a <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a0a6c:	4669      	mov	r1, sp
 80a0a6e:	a804      	add	r0, sp, #16
 80a0a70:	f7ff fe6d 	bl	80a074e <_ZN6StringC1ERKS_>
 80a0a74:	a804      	add	r0, sp, #16
 80a0a76:	47a0      	blx	r4
 80a0a78:	4604      	mov	r4, r0
 80a0a7a:	a804      	add	r0, sp, #16
 80a0a7c:	f7ff fdfe 	bl	80a067c <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a0a80:	4668      	mov	r0, sp
 80a0a82:	f7ff fdfb 	bl	80a067c <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a0a86:	4620      	mov	r0, r4
 80a0a88:	b008      	add	sp, #32
 80a0a8a:	bd10      	pop	{r4, pc}

080a0a8c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a0a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0a8e:	4607      	mov	r7, r0
 80a0a90:	460e      	mov	r6, r1
 80a0a92:	4615      	mov	r5, r2
 80a0a94:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a0a96:	2410      	movs	r4, #16
 80a0a98:	4622      	mov	r2, r4
 80a0a9a:	2100      	movs	r1, #0
 80a0a9c:	4668      	mov	r0, sp
 80a0a9e:	f000 fd26 	bl	80a14ee <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a0aa2:	2200      	movs	r2, #0
 80a0aa4:	4669      	mov	r1, sp
 80a0aa6:	4610      	mov	r0, r2
         size = sizeof(*this);
 80a0aa8:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 80a0aac:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a0aae:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a0ab0:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a0ab2:	f7ff fd77 	bl	80a05a4 <spark_function>
}
 80a0ab6:	b005      	add	sp, #20
 80a0ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0aba <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0aba:	4770      	bx	lr

080a0abc <_ZN9IPAddressD0Ev>:
 80a0abc:	b510      	push	{r4, lr}
 80a0abe:	4604      	mov	r4, r0
 80a0ac0:	2118      	movs	r1, #24
 80a0ac2:	f000 fb9f 	bl	80a1204 <_ZdlPvj>
 80a0ac6:	4620      	mov	r0, r4
 80a0ac8:	bd10      	pop	{r4, pc}

080a0aca <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0acc:	460f      	mov	r7, r1
 80a0ace:	f100 0608 	add.w	r6, r0, #8
 80a0ad2:	1d05      	adds	r5, r0, #4
 80a0ad4:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a0ad6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0ada:	220a      	movs	r2, #10
 80a0adc:	4638      	mov	r0, r7
 80a0ade:	f7ff fe92 	bl	80a0806 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0ae2:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0ae4:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0ae6:	d007      	beq.n	80a0af8 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0ae8:	2c00      	cmp	r4, #0
 80a0aea:	d0f4      	beq.n	80a0ad6 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0aec:	212e      	movs	r1, #46	; 0x2e
 80a0aee:	4638      	mov	r0, r7
 80a0af0:	f7ff fe70 	bl	80a07d4 <_ZN5Print5printEc>
 80a0af4:	4404      	add	r4, r0
 80a0af6:	e7ee      	b.n	80a0ad6 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0af8:	4620      	mov	r0, r4
 80a0afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0afc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0afc:	b510      	push	{r4, lr}
 80a0afe:	4604      	mov	r4, r0
 80a0b00:	4b04      	ldr	r3, [pc, #16]	; (80a0b14 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0b02:	2211      	movs	r2, #17
 80a0b04:	f840 3b04 	str.w	r3, [r0], #4
 80a0b08:	2100      	movs	r1, #0
 80a0b0a:	f000 fcf0 	bl	80a14ee <memset>
{
    clear();
}
 80a0b0e:	4620      	mov	r0, r4
 80a0b10:	bd10      	pop	{r4, pc}
 80a0b12:	bf00      	nop
 80a0b14:	080a6b0c 	.word	0x080a6b0c

080a0b18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0b18:	4603      	mov	r3, r0
 80a0b1a:	4a07      	ldr	r2, [pc, #28]	; (80a0b38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0b1c:	b510      	push	{r4, lr}
 80a0b1e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0b22:	f101 0210 	add.w	r2, r1, #16
 80a0b26:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0b2a:	4291      	cmp	r1, r2
 80a0b2c:	f843 4b04 	str.w	r4, [r3], #4
 80a0b30:	d1f9      	bne.n	80a0b26 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0b32:	780a      	ldrb	r2, [r1, #0]
 80a0b34:	701a      	strb	r2, [r3, #0]
}
 80a0b36:	bd10      	pop	{r4, pc}
 80a0b38:	080a6b0c 	.word	0x080a6b0c

080a0b3c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0b3c:	4a02      	ldr	r2, [pc, #8]	; (80a0b48 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0b3e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0b40:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0b42:	2204      	movs	r2, #4
 80a0b44:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a0b46:	4770      	bx	lr
 80a0b48:	080a6b0c 	.word	0x080a6b0c

080a0b4c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0b4c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0b4e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0b52:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0b56:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0b5a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0b5e:	2304      	movs	r3, #4
 80a0b60:	6041      	str	r1, [r0, #4]
 80a0b62:	7503      	strb	r3, [r0, #20]
 80a0b64:	bd10      	pop	{r4, pc}
	...

080a0b68 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0b6a:	4d04      	ldr	r5, [pc, #16]	; (80a0b7c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0b6c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0b6e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0b72:	9500      	str	r5, [sp, #0]
 80a0b74:	f7ff ffea 	bl	80a0b4c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0b78:	b003      	add	sp, #12
 80a0b7a:	bd30      	pop	{r4, r5, pc}
 80a0b7c:	080a6b0c 	.word	0x080a6b0c

080a0b80 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0b80:	7441      	strb	r1, [r0, #17]
 80a0b82:	4770      	bx	lr

080a0b84 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0b84:	4770      	bx	lr

080a0b86 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a0b86:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0b88:	2100      	movs	r1, #0
 80a0b8a:	7c00      	ldrb	r0, [r0, #16]
 80a0b8c:	f7ff fc6e 	bl	80a046c <HAL_USB_USART_Receive_Data>
}
 80a0b90:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0b94:	bf28      	it	cs
 80a0b96:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0b9a:	bd08      	pop	{r3, pc}

080a0b9c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a0b9c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0b9e:	2101      	movs	r1, #1
 80a0ba0:	7c00      	ldrb	r0, [r0, #16]
 80a0ba2:	f7ff fc63 	bl	80a046c <HAL_USB_USART_Receive_Data>
}
 80a0ba6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0baa:	bf28      	it	cs
 80a0bac:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0bb0:	bd08      	pop	{r3, pc}

080a0bb2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a0bb2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0bb4:	7c00      	ldrb	r0, [r0, #16]
 80a0bb6:	f7ff fc51 	bl	80a045c <HAL_USB_USART_Available_Data_For_Write>
}
 80a0bba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0bbe:	bd08      	pop	{r3, pc}

080a0bc0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a0bc0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0bc2:	7c00      	ldrb	r0, [r0, #16]
 80a0bc4:	f7ff fc42 	bl	80a044c <HAL_USB_USART_Available_Data>
}
 80a0bc8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0bcc:	bd08      	pop	{r3, pc}

080a0bce <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a0bce:	7c00      	ldrb	r0, [r0, #16]
 80a0bd0:	f7ff bc5c 	b.w	80a048c <HAL_USB_USART_Flush_Data>

080a0bd4 <_ZN9USBSerialD0Ev>:
 80a0bd4:	b510      	push	{r4, lr}
 80a0bd6:	4604      	mov	r4, r0
 80a0bd8:	2114      	movs	r1, #20
 80a0bda:	f000 fb13 	bl	80a1204 <_ZdlPvj>
 80a0bde:	4620      	mov	r0, r4
 80a0be0:	bd10      	pop	{r4, pc}

080a0be2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0be2:	b538      	push	{r3, r4, r5, lr}
 80a0be4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0be6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0be8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0bea:	f7ff fc37 	bl	80a045c <HAL_USB_USART_Available_Data_For_Write>
 80a0bee:	2800      	cmp	r0, #0
 80a0bf0:	dc01      	bgt.n	80a0bf6 <_ZN9USBSerial5writeEh+0x14>
 80a0bf2:	7c60      	ldrb	r0, [r4, #17]
 80a0bf4:	b128      	cbz	r0, 80a0c02 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0bf6:	4629      	mov	r1, r5
 80a0bf8:	7c20      	ldrb	r0, [r4, #16]
 80a0bfa:	f7ff fc3f 	bl	80a047c <HAL_USB_USART_Send_Data>
 80a0bfe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a0c02:	bd38      	pop	{r3, r4, r5, pc}

080a0c04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0c04:	b510      	push	{r4, lr}
 80a0c06:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0c08:	2300      	movs	r3, #0
 80a0c0a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0c0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0c10:	60a3      	str	r3, [r4, #8]
 80a0c12:	4b05      	ldr	r3, [pc, #20]	; (80a0c28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a0c14:	4608      	mov	r0, r1
 80a0c16:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a0c18:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a0c1a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a0c1c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a0c1e:	4611      	mov	r1, r2
 80a0c20:	f7ff fc0c 	bl	80a043c <HAL_USB_USART_Init>
}
 80a0c24:	4620      	mov	r0, r4
 80a0c26:	bd10      	pop	{r4, pc}
 80a0c28:	080a6b20 	.word	0x080a6b20

080a0c2c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a0c2c:	b510      	push	{r4, lr}
 80a0c2e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0c30:	2214      	movs	r2, #20
 80a0c32:	2100      	movs	r1, #0
 80a0c34:	f000 fc5b 	bl	80a14ee <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0c38:	4b05      	ldr	r3, [pc, #20]	; (80a0c50 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0c3a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0c3c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0c3e:	4b05      	ldr	r3, [pc, #20]	; (80a0c54 <_Z19acquireSerialBufferv+0x28>)
 80a0c40:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0c42:	f240 1301 	movw	r3, #257	; 0x101
 80a0c46:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0c48:	2381      	movs	r3, #129	; 0x81
 80a0c4a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0c4c:	bd10      	pop	{r4, pc}
 80a0c4e:	bf00      	nop
 80a0c50:	20000195 	.word	0x20000195
 80a0c54:	20000114 	.word	0x20000114

080a0c58 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0c58:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0c5a:	4d0e      	ldr	r5, [pc, #56]	; (80a0c94 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0c5c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0c5e:	a801      	add	r0, sp, #4
 80a0c60:	f7ff ffe4 	bl	80a0c2c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0c64:	6829      	ldr	r1, [r5, #0]
 80a0c66:	f011 0401 	ands.w	r4, r1, #1
 80a0c6a:	d110      	bne.n	80a0c8e <_Z16_fetch_usbserialv+0x36>
 80a0c6c:	4628      	mov	r0, r5
 80a0c6e:	f7ff fa16 	bl	80a009e <__cxa_guard_acquire>
 80a0c72:	b160      	cbz	r0, 80a0c8e <_Z16_fetch_usbserialv+0x36>
 80a0c74:	aa01      	add	r2, sp, #4
 80a0c76:	4621      	mov	r1, r4
 80a0c78:	4807      	ldr	r0, [pc, #28]	; (80a0c98 <_Z16_fetch_usbserialv+0x40>)
 80a0c7a:	f7ff ffc3 	bl	80a0c04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0c7e:	4628      	mov	r0, r5
 80a0c80:	f7ff fa12 	bl	80a00a8 <__cxa_guard_release>
 80a0c84:	4a05      	ldr	r2, [pc, #20]	; (80a0c9c <_Z16_fetch_usbserialv+0x44>)
 80a0c86:	4906      	ldr	r1, [pc, #24]	; (80a0ca0 <_Z16_fetch_usbserialv+0x48>)
 80a0c88:	4803      	ldr	r0, [pc, #12]	; (80a0c98 <_Z16_fetch_usbserialv+0x40>)
 80a0c8a:	f000 faad 	bl	80a11e8 <__aeabi_atexit>
	return _usbserial;
}
 80a0c8e:	4802      	ldr	r0, [pc, #8]	; (80a0c98 <_Z16_fetch_usbserialv+0x40>)
 80a0c90:	b007      	add	sp, #28
 80a0c92:	bd30      	pop	{r4, r5, pc}
 80a0c94:	20000110 	.word	0x20000110
 80a0c98:	20000298 	.word	0x20000298
 80a0c9c:	200000dc 	.word	0x200000dc
 80a0ca0:	080a0b85 	.word	0x080a0b85

080a0ca4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0ca4:	b510      	push	{r4, lr}
 80a0ca6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0ca8:	2214      	movs	r2, #20
 80a0caa:	2100      	movs	r1, #0
 80a0cac:	f000 fc1f 	bl	80a14ee <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0cb0:	4b05      	ldr	r3, [pc, #20]	; (80a0cc8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0cb2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0cb4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0cb6:	4b05      	ldr	r3, [pc, #20]	; (80a0ccc <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0cb8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0cba:	f240 1301 	movw	r3, #257	; 0x101
 80a0cbe:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0cc0:	2381      	movs	r3, #129	; 0x81
 80a0cc2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0cc4:	bd10      	pop	{r4, pc}
 80a0cc6:	bf00      	nop
 80a0cc8:	20000348 	.word	0x20000348
 80a0ccc:	200002b0 	.word	0x200002b0

080a0cd0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0cd0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0cd2:	4c0e      	ldr	r4, [pc, #56]	; (80a0d0c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0cd4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0cd6:	a801      	add	r0, sp, #4
 80a0cd8:	f7ff ffe4 	bl	80a0ca4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0cdc:	6823      	ldr	r3, [r4, #0]
 80a0cde:	07db      	lsls	r3, r3, #31
 80a0ce0:	d410      	bmi.n	80a0d04 <_Z17_fetch_usbserial1v+0x34>
 80a0ce2:	4620      	mov	r0, r4
 80a0ce4:	f7ff f9db 	bl	80a009e <__cxa_guard_acquire>
 80a0ce8:	b160      	cbz	r0, 80a0d04 <_Z17_fetch_usbserial1v+0x34>
 80a0cea:	aa01      	add	r2, sp, #4
 80a0cec:	2101      	movs	r1, #1
 80a0cee:	4808      	ldr	r0, [pc, #32]	; (80a0d10 <_Z17_fetch_usbserial1v+0x40>)
 80a0cf0:	f7ff ff88 	bl	80a0c04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0cf4:	4620      	mov	r0, r4
 80a0cf6:	f7ff f9d7 	bl	80a00a8 <__cxa_guard_release>
 80a0cfa:	4a06      	ldr	r2, [pc, #24]	; (80a0d14 <_Z17_fetch_usbserial1v+0x44>)
 80a0cfc:	4906      	ldr	r1, [pc, #24]	; (80a0d18 <_Z17_fetch_usbserial1v+0x48>)
 80a0cfe:	4804      	ldr	r0, [pc, #16]	; (80a0d10 <_Z17_fetch_usbserial1v+0x40>)
 80a0d00:	f000 fa72 	bl	80a11e8 <__aeabi_atexit>
  return _usbserial1;
}
 80a0d04:	4802      	ldr	r0, [pc, #8]	; (80a0d10 <_Z17_fetch_usbserial1v+0x40>)
 80a0d06:	b006      	add	sp, #24
 80a0d08:	bd10      	pop	{r4, pc}
 80a0d0a:	bf00      	nop
 80a0d0c:	200002ac 	.word	0x200002ac
 80a0d10:	20000334 	.word	0x20000334
 80a0d14:	200000dc 	.word	0x200000dc
 80a0d18:	080a0b85 	.word	0x080a0b85

080a0d1c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0d1c:	4770      	bx	lr

080a0d1e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0d1e:	7441      	strb	r1, [r0, #17]
 80a0d20:	4770      	bx	lr

080a0d22 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a0d22:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a0d24:	7c00      	ldrb	r0, [r0, #16]
 80a0d26:	f7ff fb47 	bl	80a03b8 <HAL_USART_Available_Data_For_Write>
}
 80a0d2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0d2e:	bd08      	pop	{r3, pc}

080a0d30 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0d30:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a0d32:	7c00      	ldrb	r0, [r0, #16]
 80a0d34:	f7ff fb18 	bl	80a0368 <HAL_USART_Available_Data>
}
 80a0d38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0d3c:	bd08      	pop	{r3, pc}

080a0d3e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0d3e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a0d40:	7c00      	ldrb	r0, [r0, #16]
 80a0d42:	f7ff fb21 	bl	80a0388 <HAL_USART_Peek_Data>
}
 80a0d46:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0d4a:	bf28      	it	cs
 80a0d4c:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0d50:	bd08      	pop	{r3, pc}

080a0d52 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0d52:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a0d54:	7c00      	ldrb	r0, [r0, #16]
 80a0d56:	f7ff fb0f 	bl	80a0378 <HAL_USART_Read_Data>
}
 80a0d5a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0d5e:	bf28      	it	cs
 80a0d60:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0d64:	bd08      	pop	{r3, pc}

080a0d66 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a0d66:	7c00      	ldrb	r0, [r0, #16]
 80a0d68:	f7ff bb16 	b.w	80a0398 <HAL_USART_Flush_Data>

080a0d6c <_ZN11USARTSerialD0Ev>:
 80a0d6c:	b510      	push	{r4, lr}
 80a0d6e:	4604      	mov	r4, r0
 80a0d70:	2114      	movs	r1, #20
 80a0d72:	f000 fa47 	bl	80a1204 <_ZdlPvj>
 80a0d76:	4620      	mov	r0, r4
 80a0d78:	bd10      	pop	{r4, pc}

080a0d7a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0d7a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0d7c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0d7e:	4604      	mov	r4, r0
 80a0d80:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0d82:	b925      	cbnz	r5, 80a0d8e <_ZN11USARTSerial5writeEh+0x14>
 80a0d84:	7c00      	ldrb	r0, [r0, #16]
 80a0d86:	f7ff fb17 	bl	80a03b8 <HAL_USART_Available_Data_For_Write>
 80a0d8a:	2800      	cmp	r0, #0
 80a0d8c:	dd05      	ble.n	80a0d9a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0d8e:	4631      	mov	r1, r6
 80a0d90:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0d92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0d96:	f7ff badf 	b.w	80a0358 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a0d9a:	4628      	mov	r0, r5
 80a0d9c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0da0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0da0:	b510      	push	{r4, lr}
 80a0da2:	4604      	mov	r4, r0
 80a0da4:	4608      	mov	r0, r1
 80a0da6:	4611      	mov	r1, r2
 80a0da8:	2200      	movs	r2, #0
 80a0daa:	6062      	str	r2, [r4, #4]
 80a0dac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0db0:	60a2      	str	r2, [r4, #8]
 80a0db2:	4a05      	ldr	r2, [pc, #20]	; (80a0dc8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0db4:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0db6:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0db8:	2201      	movs	r2, #1
 80a0dba:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0dbc:	461a      	mov	r2, r3
 80a0dbe:	f7ff fac3 	bl	80a0348 <HAL_USART_Init>
}
 80a0dc2:	4620      	mov	r0, r4
 80a0dc4:	bd10      	pop	{r4, pc}
 80a0dc6:	bf00      	nop
 80a0dc8:	080a6b50 	.word	0x080a6b50

080a0dcc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a0dcc:	7c00      	ldrb	r0, [r0, #16]
 80a0dce:	f7ff baeb 	b.w	80a03a8 <HAL_USART_Is_Enabled>
	...

080a0dd4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0dd4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0dd6:	4d0c      	ldr	r5, [pc, #48]	; (80a0e08 <_Z22__fetch_global_Serial1v+0x34>)
 80a0dd8:	6829      	ldr	r1, [r5, #0]
 80a0dda:	f011 0401 	ands.w	r4, r1, #1
 80a0dde:	d111      	bne.n	80a0e04 <_Z22__fetch_global_Serial1v+0x30>
 80a0de0:	4628      	mov	r0, r5
 80a0de2:	f7ff f95c 	bl	80a009e <__cxa_guard_acquire>
 80a0de6:	b168      	cbz	r0, 80a0e04 <_Z22__fetch_global_Serial1v+0x30>
 80a0de8:	4a08      	ldr	r2, [pc, #32]	; (80a0e0c <_Z22__fetch_global_Serial1v+0x38>)
 80a0dea:	4621      	mov	r1, r4
 80a0dec:	4b08      	ldr	r3, [pc, #32]	; (80a0e10 <_Z22__fetch_global_Serial1v+0x3c>)
 80a0dee:	4809      	ldr	r0, [pc, #36]	; (80a0e14 <_Z22__fetch_global_Serial1v+0x40>)
 80a0df0:	f7ff ffd6 	bl	80a0da0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0df4:	4628      	mov	r0, r5
 80a0df6:	f7ff f957 	bl	80a00a8 <__cxa_guard_release>
 80a0dfa:	4a07      	ldr	r2, [pc, #28]	; (80a0e18 <_Z22__fetch_global_Serial1v+0x44>)
 80a0dfc:	4907      	ldr	r1, [pc, #28]	; (80a0e1c <_Z22__fetch_global_Serial1v+0x48>)
 80a0dfe:	4805      	ldr	r0, [pc, #20]	; (80a0e14 <_Z22__fetch_global_Serial1v+0x40>)
 80a0e00:	f000 f9f2 	bl	80a11e8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a0e04:	4803      	ldr	r0, [pc, #12]	; (80a0e14 <_Z22__fetch_global_Serial1v+0x40>)
 80a0e06:	bd38      	pop	{r3, r4, r5, pc}
 80a0e08:	200004e4 	.word	0x200004e4
 80a0e0c:	200004e8 	.word	0x200004e8
 80a0e10:	20000460 	.word	0x20000460
 80a0e14:	2000044c 	.word	0x2000044c
 80a0e18:	200000dc 	.word	0x200000dc
 80a0e1c:	080a0d1d 	.word	0x080a0d1d

080a0e20 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a0e20:	4770      	bx	lr

080a0e22 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0e24:	4606      	mov	r6, r0
 80a0e26:	4615      	mov	r5, r2
 80a0e28:	460c      	mov	r4, r1
 80a0e2a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0e2c:	42bc      	cmp	r4, r7
 80a0e2e:	d006      	beq.n	80a0e3e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0e30:	6833      	ldr	r3, [r6, #0]
 80a0e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0e36:	689b      	ldr	r3, [r3, #8]
 80a0e38:	4630      	mov	r0, r6
 80a0e3a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0e3c:	e7f6      	b.n	80a0e2c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0e3e:	4628      	mov	r0, r5
 80a0e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0e42 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0e42:	2200      	movs	r2, #0
 80a0e44:	7c00      	ldrb	r0, [r0, #16]
 80a0e46:	f7ff babf 	b.w	80a03c8 <HAL_I2C_Write_Data>

080a0e4a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0e4a:	2100      	movs	r1, #0
 80a0e4c:	7c00      	ldrb	r0, [r0, #16]
 80a0e4e:	f7ff bac3 	b.w	80a03d8 <HAL_I2C_Available_Data>

080a0e52 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0e52:	2100      	movs	r1, #0
 80a0e54:	7c00      	ldrb	r0, [r0, #16]
 80a0e56:	f7ff bac7 	b.w	80a03e8 <HAL_I2C_Read_Data>

080a0e5a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0e5a:	2100      	movs	r1, #0
 80a0e5c:	7c00      	ldrb	r0, [r0, #16]
 80a0e5e:	f7ff bacb 	b.w	80a03f8 <HAL_I2C_Peek_Data>

080a0e62 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0e62:	2100      	movs	r1, #0
 80a0e64:	7c00      	ldrb	r0, [r0, #16]
 80a0e66:	f7ff bacf 	b.w	80a0408 <HAL_I2C_Flush_Data>

080a0e6a <_ZN7TwoWireD0Ev>:
 80a0e6a:	b510      	push	{r4, lr}
 80a0e6c:	4604      	mov	r4, r0
 80a0e6e:	2114      	movs	r1, #20
 80a0e70:	f000 f9c8 	bl	80a1204 <_ZdlPvj>
 80a0e74:	4620      	mov	r0, r4
 80a0e76:	bd10      	pop	{r4, pc}

080a0e78 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a0e78:	b510      	push	{r4, lr}
 80a0e7a:	4604      	mov	r4, r0
 80a0e7c:	2300      	movs	r3, #0
 80a0e7e:	6063      	str	r3, [r4, #4]
 80a0e80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0e84:	60a3      	str	r3, [r4, #8]
 80a0e86:	4b04      	ldr	r3, [pc, #16]	; (80a0e98 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a0e88:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a0e8a:	4608      	mov	r0, r1
 80a0e8c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a0e8e:	4611      	mov	r1, r2
 80a0e90:	f7ff faca 	bl	80a0428 <HAL_I2C_Init>
}
 80a0e94:	4620      	mov	r0, r4
 80a0e96:	bd10      	pop	{r4, pc}
 80a0e98:	080a6b80 	.word	0x080a6b80

080a0e9c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0e9c:	2100      	movs	r1, #0
 80a0e9e:	7c00      	ldrb	r0, [r0, #16]
 80a0ea0:	f7ff baba 	b.w	80a0418 <HAL_I2C_Is_Enabled>

080a0ea4 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
 80a0ea4:	b510      	push	{r4, lr}
  if (0 == max) {
 80a0ea6:	4604      	mov	r4, r0
 80a0ea8:	b130      	cbz	r0, 80a0eb8 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
 80a0eaa:	f000 fb51 	bl	80a1550 <rand>
 80a0eae:	fb90 f3f4 	sdiv	r3, r0, r4
 80a0eb2:	fb03 0014 	mls	r0, r3, r4, r0
 80a0eb6:	bd10      	pop	{r4, pc}
}
 80a0eb8:	bd10      	pop	{r4, pc}

080a0eba <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0eba:	2200      	movs	r2, #0
 80a0ebc:	4611      	mov	r1, r2
 80a0ebe:	6840      	ldr	r0, [r0, #4]
 80a0ec0:	f7ff bb38 	b.w	80a0534 <network_ready>

080a0ec4 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0ec6:	4616      	mov	r6, r2
 80a0ec8:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0eca:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0ecc:	460f      	mov	r7, r1
 80a0ece:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a0ed0:	2100      	movs	r1, #0
 80a0ed2:	a803      	add	r0, sp, #12
 80a0ed4:	f000 fb0b 	bl	80a14ee <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0ed8:	4630      	mov	r0, r6
 80a0eda:	f000 fb7d 	bl	80a15d8 <strlen>
 80a0ede:	2500      	movs	r5, #0
 80a0ee0:	9500      	str	r5, [sp, #0]
 80a0ee2:	b281      	uxth	r1, r0
 80a0ee4:	687b      	ldr	r3, [r7, #4]
 80a0ee6:	aa03      	add	r2, sp, #12
 80a0ee8:	4630      	mov	r0, r6
 80a0eea:	f7ff fad7 	bl	80a049c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0eee:	b120      	cbz	r0, 80a0efa <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a0ef0:	4629      	mov	r1, r5
 80a0ef2:	4620      	mov	r0, r4
 80a0ef4:	f7ff fe22 	bl	80a0b3c <_ZN9IPAddressC1Em>
 80a0ef8:	e003      	b.n	80a0f02 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a0efa:	a903      	add	r1, sp, #12
 80a0efc:	4620      	mov	r0, r4
 80a0efe:	f7ff fe0b 	bl	80a0b18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a0f02:	4620      	mov	r0, r4
 80a0f04:	b009      	add	sp, #36	; 0x24
 80a0f06:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0f08 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a0f08:	2200      	movs	r2, #0
 80a0f0a:	4611      	mov	r1, r2
 80a0f0c:	6840      	ldr	r0, [r0, #4]
 80a0f0e:	f7ff bb31 	b.w	80a0574 <network_listening>

080a0f12 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a0f12:	2200      	movs	r2, #0
 80a0f14:	4611      	mov	r1, r2
 80a0f16:	6840      	ldr	r0, [r0, #4]
 80a0f18:	f7ff bb3c 	b.w	80a0594 <network_get_listen_timeout>

080a0f1c <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a0f1c:	2200      	movs	r2, #0
 80a0f1e:	6840      	ldr	r0, [r0, #4]
 80a0f20:	f7ff bb30 	b.w	80a0584 <network_set_listen_timeout>

080a0f24 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0f24:	2200      	movs	r2, #0
 80a0f26:	f081 0101 	eor.w	r1, r1, #1
 80a0f2a:	6840      	ldr	r0, [r0, #4]
 80a0f2c:	f7ff bb1a 	b.w	80a0564 <network_listen>

080a0f30 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a0f30:	2300      	movs	r3, #0
 80a0f32:	461a      	mov	r2, r3
 80a0f34:	4619      	mov	r1, r3
 80a0f36:	6840      	ldr	r0, [r0, #4]
 80a0f38:	f7ff bb0c 	b.w	80a0554 <network_off>

080a0f3c <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a0f3c:	2200      	movs	r2, #0
 80a0f3e:	4611      	mov	r1, r2
 80a0f40:	6840      	ldr	r0, [r0, #4]
 80a0f42:	f7ff bae7 	b.w	80a0514 <network_connecting>

080a0f46 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0f46:	2200      	movs	r2, #0
 80a0f48:	2102      	movs	r1, #2
 80a0f4a:	6840      	ldr	r0, [r0, #4]
 80a0f4c:	f7ff baea 	b.w	80a0524 <network_disconnect>

080a0f50 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0f50:	2300      	movs	r3, #0
 80a0f52:	461a      	mov	r2, r3
 80a0f54:	6840      	ldr	r0, [r0, #4]
 80a0f56:	f7ff bad5 	b.w	80a0504 <network_connect>
	...

080a0f5c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0f5c:	4b02      	ldr	r3, [pc, #8]	; (80a0f68 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0f5e:	2204      	movs	r2, #4
 80a0f60:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0f62:	4a02      	ldr	r2, [pc, #8]	; (80a0f6c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0f64:	601a      	str	r2, [r3, #0]
 80a0f66:	4770      	bx	lr
 80a0f68:	2000056c 	.word	0x2000056c
 80a0f6c:	080a6ba8 	.word	0x080a6ba8

080a0f70 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0f70:	2300      	movs	r3, #0
 80a0f72:	461a      	mov	r2, r3
 80a0f74:	6840      	ldr	r0, [r0, #4]
 80a0f76:	f7ff bac5 	b.w	80a0504 <network_connect>

080a0f7a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0f7a:	2200      	movs	r2, #0
 80a0f7c:	2102      	movs	r1, #2
 80a0f7e:	6840      	ldr	r0, [r0, #4]
 80a0f80:	f7ff bad0 	b.w	80a0524 <network_disconnect>

080a0f84 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0f84:	2200      	movs	r2, #0
 80a0f86:	4611      	mov	r1, r2
 80a0f88:	6840      	ldr	r0, [r0, #4]
 80a0f8a:	f7ff bac3 	b.w	80a0514 <network_connecting>

080a0f8e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0f8e:	2200      	movs	r2, #0
 80a0f90:	4611      	mov	r1, r2
 80a0f92:	6840      	ldr	r0, [r0, #4]
 80a0f94:	f7ff bace 	b.w	80a0534 <network_ready>

080a0f98 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0f98:	2300      	movs	r3, #0
 80a0f9a:	461a      	mov	r2, r3
 80a0f9c:	4619      	mov	r1, r3
 80a0f9e:	6840      	ldr	r0, [r0, #4]
 80a0fa0:	f7ff bad0 	b.w	80a0544 <network_on>

080a0fa4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0fa4:	2300      	movs	r3, #0
 80a0fa6:	461a      	mov	r2, r3
 80a0fa8:	4619      	mov	r1, r3
 80a0faa:	6840      	ldr	r0, [r0, #4]
 80a0fac:	f7ff bad2 	b.w	80a0554 <network_off>

080a0fb0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0fb0:	2200      	movs	r2, #0
 80a0fb2:	f081 0101 	eor.w	r1, r1, #1
 80a0fb6:	6840      	ldr	r0, [r0, #4]
 80a0fb8:	f7ff bad4 	b.w	80a0564 <network_listen>

080a0fbc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0fbc:	2200      	movs	r2, #0
 80a0fbe:	6840      	ldr	r0, [r0, #4]
 80a0fc0:	f7ff bae0 	b.w	80a0584 <network_set_listen_timeout>

080a0fc4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0fc4:	2200      	movs	r2, #0
 80a0fc6:	4611      	mov	r1, r2
 80a0fc8:	6840      	ldr	r0, [r0, #4]
 80a0fca:	f7ff bae3 	b.w	80a0594 <network_get_listen_timeout>

080a0fce <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0fce:	2200      	movs	r2, #0
 80a0fd0:	4611      	mov	r1, r2
 80a0fd2:	6840      	ldr	r0, [r0, #4]
 80a0fd4:	f7ff bace 	b.w	80a0574 <network_listening>

080a0fd8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0fd8:	b570      	push	{r4, r5, r6, lr}
 80a0fda:	4616      	mov	r6, r2
 80a0fdc:	b08e      	sub	sp, #56	; 0x38
 80a0fde:	4604      	mov	r4, r0
    IPAddress addr;
 80a0fe0:	a808      	add	r0, sp, #32
 80a0fe2:	f7ff fd8b 	bl	80a0afc <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0fe6:	2211      	movs	r2, #17
 80a0fe8:	2100      	movs	r1, #0
 80a0fea:	a803      	add	r0, sp, #12
 80a0fec:	f000 fa7f 	bl	80a14ee <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0ff0:	4630      	mov	r0, r6
 80a0ff2:	f000 faf1 	bl	80a15d8 <strlen>
 80a0ff6:	2500      	movs	r5, #0
 80a0ff8:	4b0a      	ldr	r3, [pc, #40]	; (80a1024 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0ffa:	9500      	str	r5, [sp, #0]
 80a0ffc:	b281      	uxth	r1, r0
 80a0ffe:	685b      	ldr	r3, [r3, #4]
 80a1000:	aa03      	add	r2, sp, #12
 80a1002:	4630      	mov	r0, r6
 80a1004:	f7ff fa4a 	bl	80a049c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1008:	b120      	cbz	r0, 80a1014 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a100a:	4629      	mov	r1, r5
 80a100c:	4620      	mov	r0, r4
 80a100e:	f7ff fd95 	bl	80a0b3c <_ZN9IPAddressC1Em>
 80a1012:	e003      	b.n	80a101c <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1014:	a903      	add	r1, sp, #12
 80a1016:	4620      	mov	r0, r4
 80a1018:	f7ff fd7e 	bl	80a0b18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a101c:	4620      	mov	r0, r4
 80a101e:	b00e      	add	sp, #56	; 0x38
 80a1020:	bd70      	pop	{r4, r5, r6, pc}
 80a1022:	bf00      	nop
 80a1024:	2000056c 	.word	0x2000056c

080a1028 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a1028:	4b02      	ldr	r3, [pc, #8]	; (80a1034 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a102a:	4a03      	ldr	r2, [pc, #12]	; (80a1038 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a102c:	601a      	str	r2, [r3, #0]
 80a102e:	2200      	movs	r2, #0
 80a1030:	605a      	str	r2, [r3, #4]
 80a1032:	4770      	bx	lr
 80a1034:	20000574 	.word	0x20000574
 80a1038:	080a6bdc 	.word	0x080a6bdc

080a103c <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a103c:	b510      	push	{r4, lr}
 80a103e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a1040:	6880      	ldr	r0, [r0, #8]
 80a1042:	b108      	cbz	r0, 80a1048 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a1044:	f7ff f978 	bl	80a0338 <os_mutex_recursive_destroy>
 80a1048:	4620      	mov	r0, r4
 80a104a:	bd10      	pop	{r4, pc}

080a104c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a104c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a104e:	4e1a      	ldr	r6, [pc, #104]	; (80a10b8 <pinAvailable+0x6c>)
 80a1050:	4604      	mov	r4, r0
 80a1052:	6831      	ldr	r1, [r6, #0]
 80a1054:	f011 0501 	ands.w	r5, r1, #1
 80a1058:	d10f      	bne.n	80a107a <pinAvailable+0x2e>
 80a105a:	4630      	mov	r0, r6
 80a105c:	f7ff f81f 	bl	80a009e <__cxa_guard_acquire>
 80a1060:	b158      	cbz	r0, 80a107a <pinAvailable+0x2e>
 80a1062:	4629      	mov	r1, r5
 80a1064:	4815      	ldr	r0, [pc, #84]	; (80a10bc <pinAvailable+0x70>)
 80a1066:	f7ff facd 	bl	80a0604 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a106a:	4630      	mov	r0, r6
 80a106c:	f7ff f81c 	bl	80a00a8 <__cxa_guard_release>
 80a1070:	4a13      	ldr	r2, [pc, #76]	; (80a10c0 <pinAvailable+0x74>)
 80a1072:	4914      	ldr	r1, [pc, #80]	; (80a10c4 <pinAvailable+0x78>)
 80a1074:	4811      	ldr	r0, [pc, #68]	; (80a10bc <pinAvailable+0x70>)
 80a1076:	f000 f8b7 	bl	80a11e8 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a107a:	4810      	ldr	r0, [pc, #64]	; (80a10bc <pinAvailable+0x70>)
 80a107c:	f7ff fad1 	bl	80a0622 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a1080:	b128      	cbz	r0, 80a108e <pinAvailable+0x42>
 80a1082:	f1a4 030d 	sub.w	r3, r4, #13
 80a1086:	2b02      	cmp	r3, #2
 80a1088:	d801      	bhi.n	80a108e <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a108a:	2000      	movs	r0, #0
 80a108c:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a108e:	f000 f885 	bl	80a119c <_Z19__fetch_global_Wirev>
 80a1092:	f7ff ff03 	bl	80a0e9c <_ZN7TwoWire9isEnabledEv>
 80a1096:	b108      	cbz	r0, 80a109c <pinAvailable+0x50>
 80a1098:	2c01      	cmp	r4, #1
 80a109a:	d9f6      	bls.n	80a108a <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a109c:	f7ff fe9a 	bl	80a0dd4 <_Z22__fetch_global_Serial1v>
 80a10a0:	f7ff fe94 	bl	80a0dcc <_ZN11USARTSerial9isEnabledEv>
 80a10a4:	b118      	cbz	r0, 80a10ae <pinAvailable+0x62>
 80a10a6:	f1a4 0312 	sub.w	r3, r4, #18
 80a10aa:	2b01      	cmp	r3, #1
 80a10ac:	d9ed      	bls.n	80a108a <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a10ae:	2c17      	cmp	r4, #23
 80a10b0:	bf8c      	ite	hi
 80a10b2:	2000      	movhi	r0, #0
 80a10b4:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a10b6:	bd70      	pop	{r4, r5, r6, pc}
 80a10b8:	2000057c 	.word	0x2000057c
 80a10bc:	20000580 	.word	0x20000580
 80a10c0:	200000dc 	.word	0x200000dc
 80a10c4:	080a103d 	.word	0x080a103d

080a10c8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a10c8:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a10ca:	b538      	push	{r3, r4, r5, lr}
 80a10cc:	4604      	mov	r4, r0
 80a10ce:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a10d0:	d80a      	bhi.n	80a10e8 <pinMode+0x20>
 80a10d2:	29ff      	cmp	r1, #255	; 0xff
 80a10d4:	d008      	beq.n	80a10e8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a10d6:	f7ff ffb9 	bl	80a104c <pinAvailable>
 80a10da:	b128      	cbz	r0, 80a10e8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a10dc:	4629      	mov	r1, r5
 80a10de:	4620      	mov	r0, r4
}
 80a10e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a10e4:	f7ff b8e0 	b.w	80a02a8 <HAL_Pin_Mode>
 80a10e8:	bd38      	pop	{r3, r4, r5, pc}

080a10ea <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
 80a10ea:	b538      	push	{r3, r4, r5, lr}
 80a10ec:	4604      	mov	r4, r0
 80a10ee:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 80a10f0:	f7ff ffac 	bl	80a104c <pinAvailable>
 80a10f4:	b1f0      	cbz	r0, 80a1134 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
 80a10f6:	2104      	movs	r1, #4
 80a10f8:	4620      	mov	r0, r4
 80a10fa:	f7ff f8cd 	bl	80a0298 <HAL_Validate_Pin_Function>
 80a10fe:	2804      	cmp	r0, #4
 80a1100:	d105      	bne.n	80a110e <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 80a1102:	b2a9      	uxth	r1, r5
 80a1104:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
 80a1106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
 80a110a:	f7ff b8dd 	b.w	80a02c8 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 80a110e:	2102      	movs	r1, #2
 80a1110:	4620      	mov	r0, r4
 80a1112:	f7ff f8c1 	bl	80a0298 <HAL_Validate_Pin_Function>
 80a1116:	2802      	cmp	r0, #2
 80a1118:	d10c      	bne.n	80a1134 <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
 80a111a:	4620      	mov	r0, r4
 80a111c:	f7ff f8cc 	bl	80a02b8 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 80a1120:	2801      	cmp	r0, #1
 80a1122:	d001      	beq.n	80a1128 <_Z11analogWritetm+0x3e>
 80a1124:	2804      	cmp	r0, #4
 80a1126:	d105      	bne.n	80a1134 <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 80a1128:	4629      	mov	r1, r5
 80a112a:	4620      	mov	r0, r4
    }
}
 80a112c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 80a1130:	f7ff b8d2 	b.w	80a02d8 <HAL_PWM_Write_Ext>
 80a1134:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1138 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1138:	b513      	push	{r0, r1, r4, lr}
 80a113a:	4c08      	ldr	r4, [pc, #32]	; (80a115c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a113c:	2300      	movs	r3, #0
 80a113e:	461a      	mov	r2, r3
 80a1140:	4619      	mov	r1, r3
 80a1142:	9300      	str	r3, [sp, #0]
 80a1144:	4620      	mov	r0, r4
 80a1146:	f7ff fd0f 	bl	80a0b68 <_ZN9IPAddressC1Ehhhh>
 80a114a:	4620      	mov	r0, r4
 80a114c:	4a04      	ldr	r2, [pc, #16]	; (80a1160 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a114e:	4905      	ldr	r1, [pc, #20]	; (80a1164 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1150:	b002      	add	sp, #8
 80a1152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1156:	f000 b847 	b.w	80a11e8 <__aeabi_atexit>
 80a115a:	bf00      	nop
 80a115c:	20000590 	.word	0x20000590
 80a1160:	200000dc 	.word	0x200000dc
 80a1164:	080a0abb 	.word	0x080a0abb

080a1168 <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a1168:	b570      	push	{r4, r5, r6, lr}
 80a116a:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a116c:	2514      	movs	r5, #20
 80a116e:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1170:	4e09      	ldr	r6, [pc, #36]	; (80a1198 <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1172:	2100      	movs	r1, #0
 80a1174:	f000 f9bb 	bl	80a14ee <memset>
 80a1178:	8025      	strh	r5, [r4, #0]
 80a117a:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a117c:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a117e:	60a5      	str	r5, [r4, #8]
 80a1180:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1182:	4628      	mov	r0, r5
 80a1184:	f000 f840 	bl	80a1208 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1188:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a118a:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a118c:	4628      	mov	r0, r5
 80a118e:	f000 f83b 	bl	80a1208 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1192:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a1194:	4620      	mov	r0, r4
 80a1196:	bd70      	pop	{r4, r5, r6, pc}
 80a1198:	080a6c08 	.word	0x080a6c08

080a119c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a119c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a119e:	4d0e      	ldr	r5, [pc, #56]	; (80a11d8 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a11a0:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a11a2:	6829      	ldr	r1, [r5, #0]
 80a11a4:	f011 0401 	ands.w	r4, r1, #1
 80a11a8:	d113      	bne.n	80a11d2 <_Z19__fetch_global_Wirev+0x36>
 80a11aa:	4628      	mov	r0, r5
 80a11ac:	f7fe ff77 	bl	80a009e <__cxa_guard_acquire>
 80a11b0:	b178      	cbz	r0, 80a11d2 <_Z19__fetch_global_Wirev+0x36>
 80a11b2:	a801      	add	r0, sp, #4
 80a11b4:	f7ff ffd8 	bl	80a1168 <_Z17acquireWireBufferv>
 80a11b8:	aa01      	add	r2, sp, #4
 80a11ba:	4621      	mov	r1, r4
 80a11bc:	4807      	ldr	r0, [pc, #28]	; (80a11dc <_Z19__fetch_global_Wirev+0x40>)
 80a11be:	f7ff fe5b 	bl	80a0e78 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a11c2:	4628      	mov	r0, r5
 80a11c4:	f7fe ff70 	bl	80a00a8 <__cxa_guard_release>
 80a11c8:	4a05      	ldr	r2, [pc, #20]	; (80a11e0 <_Z19__fetch_global_Wirev+0x44>)
 80a11ca:	4906      	ldr	r1, [pc, #24]	; (80a11e4 <_Z19__fetch_global_Wirev+0x48>)
 80a11cc:	4803      	ldr	r0, [pc, #12]	; (80a11dc <_Z19__fetch_global_Wirev+0x40>)
 80a11ce:	f000 f80b 	bl	80a11e8 <__aeabi_atexit>
	return wire;
}
 80a11d2:	4802      	ldr	r0, [pc, #8]	; (80a11dc <_Z19__fetch_global_Wirev+0x40>)
 80a11d4:	b007      	add	sp, #28
 80a11d6:	bd30      	pop	{r4, r5, pc}
 80a11d8:	200005a8 	.word	0x200005a8
 80a11dc:	200005ac 	.word	0x200005ac
 80a11e0:	200000dc 	.word	0x200000dc
 80a11e4:	080a0e21 	.word	0x080a0e21

080a11e8 <__aeabi_atexit>:
 80a11e8:	460b      	mov	r3, r1
 80a11ea:	4601      	mov	r1, r0
 80a11ec:	4618      	mov	r0, r3
 80a11ee:	f000 b965 	b.w	80a14bc <__cxa_atexit>
	...

080a11f4 <_ZSt15get_new_handlerv>:
 80a11f4:	4b02      	ldr	r3, [pc, #8]	; (80a1200 <_ZSt15get_new_handlerv+0xc>)
 80a11f6:	6818      	ldr	r0, [r3, #0]
 80a11f8:	f3bf 8f5f 	dmb	sy
 80a11fc:	4770      	bx	lr
 80a11fe:	bf00      	nop
 80a1200:	200005c0 	.word	0x200005c0

080a1204 <_ZdlPvj>:
 80a1204:	f7fe bf49 	b.w	80a009a <_ZdlPv>

080a1208 <_ZnajRKSt9nothrow_t>:
 80a1208:	f000 b800 	b.w	80a120c <_ZnwjRKSt9nothrow_t>

080a120c <_ZnwjRKSt9nothrow_t>:
 80a120c:	b510      	push	{r4, lr}
 80a120e:	2800      	cmp	r0, #0
 80a1210:	bf14      	ite	ne
 80a1212:	4604      	movne	r4, r0
 80a1214:	2401      	moveq	r4, #1
 80a1216:	4620      	mov	r0, r4
 80a1218:	f7ff f9d4 	bl	80a05c4 <malloc>
 80a121c:	b920      	cbnz	r0, 80a1228 <_ZnwjRKSt9nothrow_t+0x1c>
 80a121e:	f7ff ffe9 	bl	80a11f4 <_ZSt15get_new_handlerv>
 80a1222:	b108      	cbz	r0, 80a1228 <_ZnwjRKSt9nothrow_t+0x1c>
 80a1224:	4780      	blx	r0
 80a1226:	e7f6      	b.n	80a1216 <_ZnwjRKSt9nothrow_t+0xa>
 80a1228:	bd10      	pop	{r4, pc}
	...

080a122c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a122c:	4b18      	ldr	r3, [pc, #96]	; (80a1290 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a122e:	681a      	ldr	r2, [r3, #0]
 80a1230:	07d1      	lsls	r1, r2, #31
 80a1232:	bf5c      	itt	pl
 80a1234:	2201      	movpl	r2, #1
 80a1236:	601a      	strpl	r2, [r3, #0]
 80a1238:	4b16      	ldr	r3, [pc, #88]	; (80a1294 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a123a:	681a      	ldr	r2, [r3, #0]
 80a123c:	07d2      	lsls	r2, r2, #31
 80a123e:	bf5c      	itt	pl
 80a1240:	2201      	movpl	r2, #1
 80a1242:	601a      	strpl	r2, [r3, #0]
 80a1244:	4b14      	ldr	r3, [pc, #80]	; (80a1298 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1246:	681a      	ldr	r2, [r3, #0]
 80a1248:	07d0      	lsls	r0, r2, #31
 80a124a:	bf5c      	itt	pl
 80a124c:	2201      	movpl	r2, #1
 80a124e:	601a      	strpl	r2, [r3, #0]
 80a1250:	4b12      	ldr	r3, [pc, #72]	; (80a129c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1252:	681a      	ldr	r2, [r3, #0]
 80a1254:	07d1      	lsls	r1, r2, #31
 80a1256:	bf5c      	itt	pl
 80a1258:	2201      	movpl	r2, #1
 80a125a:	601a      	strpl	r2, [r3, #0]
 80a125c:	4b10      	ldr	r3, [pc, #64]	; (80a12a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a125e:	681a      	ldr	r2, [r3, #0]
 80a1260:	07d2      	lsls	r2, r2, #31
 80a1262:	bf5c      	itt	pl
 80a1264:	2201      	movpl	r2, #1
 80a1266:	601a      	strpl	r2, [r3, #0]
 80a1268:	4b0e      	ldr	r3, [pc, #56]	; (80a12a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a126a:	681a      	ldr	r2, [r3, #0]
 80a126c:	07d0      	lsls	r0, r2, #31
 80a126e:	bf5c      	itt	pl
 80a1270:	2201      	movpl	r2, #1
 80a1272:	601a      	strpl	r2, [r3, #0]
 80a1274:	4b0c      	ldr	r3, [pc, #48]	; (80a12a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1276:	681a      	ldr	r2, [r3, #0]
 80a1278:	07d1      	lsls	r1, r2, #31
 80a127a:	bf5c      	itt	pl
 80a127c:	2201      	movpl	r2, #1
 80a127e:	601a      	strpl	r2, [r3, #0]
 80a1280:	4b0a      	ldr	r3, [pc, #40]	; (80a12ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1282:	681a      	ldr	r2, [r3, #0]
 80a1284:	07d2      	lsls	r2, r2, #31
 80a1286:	bf5c      	itt	pl
 80a1288:	2201      	movpl	r2, #1
 80a128a:	601a      	strpl	r2, [r3, #0]
 80a128c:	4770      	bx	lr
 80a128e:	bf00      	nop
 80a1290:	200005e0 	.word	0x200005e0
 80a1294:	200005dc 	.word	0x200005dc
 80a1298:	200005d8 	.word	0x200005d8
 80a129c:	200005d4 	.word	0x200005d4
 80a12a0:	200005d0 	.word	0x200005d0
 80a12a4:	200005cc 	.word	0x200005cc
 80a12a8:	200005c8 	.word	0x200005c8
 80a12ac:	200005c4 	.word	0x200005c4

080a12b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a12b0:	4b24      	ldr	r3, [pc, #144]	; (80a1344 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a12b2:	681a      	ldr	r2, [r3, #0]
 80a12b4:	07d0      	lsls	r0, r2, #31
 80a12b6:	bf5c      	itt	pl
 80a12b8:	2201      	movpl	r2, #1
 80a12ba:	601a      	strpl	r2, [r3, #0]
 80a12bc:	4b22      	ldr	r3, [pc, #136]	; (80a1348 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a12be:	681a      	ldr	r2, [r3, #0]
 80a12c0:	07d1      	lsls	r1, r2, #31
 80a12c2:	bf5c      	itt	pl
 80a12c4:	2201      	movpl	r2, #1
 80a12c6:	601a      	strpl	r2, [r3, #0]
 80a12c8:	4b20      	ldr	r3, [pc, #128]	; (80a134c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a12ca:	681a      	ldr	r2, [r3, #0]
 80a12cc:	07d2      	lsls	r2, r2, #31
 80a12ce:	bf5c      	itt	pl
 80a12d0:	2201      	movpl	r2, #1
 80a12d2:	601a      	strpl	r2, [r3, #0]
 80a12d4:	4b1e      	ldr	r3, [pc, #120]	; (80a1350 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a12d6:	681a      	ldr	r2, [r3, #0]
 80a12d8:	07d0      	lsls	r0, r2, #31
 80a12da:	bf5c      	itt	pl
 80a12dc:	2201      	movpl	r2, #1
 80a12de:	601a      	strpl	r2, [r3, #0]
 80a12e0:	4b1c      	ldr	r3, [pc, #112]	; (80a1354 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a12e2:	681a      	ldr	r2, [r3, #0]
 80a12e4:	07d1      	lsls	r1, r2, #31
 80a12e6:	bf5c      	itt	pl
 80a12e8:	2201      	movpl	r2, #1
 80a12ea:	601a      	strpl	r2, [r3, #0]
 80a12ec:	4b1a      	ldr	r3, [pc, #104]	; (80a1358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a12ee:	681a      	ldr	r2, [r3, #0]
 80a12f0:	07d2      	lsls	r2, r2, #31
 80a12f2:	bf5c      	itt	pl
 80a12f4:	2201      	movpl	r2, #1
 80a12f6:	601a      	strpl	r2, [r3, #0]
 80a12f8:	4b18      	ldr	r3, [pc, #96]	; (80a135c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a12fa:	681a      	ldr	r2, [r3, #0]
 80a12fc:	07d0      	lsls	r0, r2, #31
 80a12fe:	bf5c      	itt	pl
 80a1300:	2201      	movpl	r2, #1
 80a1302:	601a      	strpl	r2, [r3, #0]
 80a1304:	4b16      	ldr	r3, [pc, #88]	; (80a1360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1306:	681a      	ldr	r2, [r3, #0]
 80a1308:	07d1      	lsls	r1, r2, #31
 80a130a:	bf5c      	itt	pl
 80a130c:	2201      	movpl	r2, #1
 80a130e:	601a      	strpl	r2, [r3, #0]
 80a1310:	4b14      	ldr	r3, [pc, #80]	; (80a1364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1312:	681a      	ldr	r2, [r3, #0]
 80a1314:	07d2      	lsls	r2, r2, #31
 80a1316:	bf5c      	itt	pl
 80a1318:	2201      	movpl	r2, #1
 80a131a:	601a      	strpl	r2, [r3, #0]
 80a131c:	4b12      	ldr	r3, [pc, #72]	; (80a1368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a131e:	681a      	ldr	r2, [r3, #0]
 80a1320:	07d0      	lsls	r0, r2, #31
 80a1322:	bf5c      	itt	pl
 80a1324:	2201      	movpl	r2, #1
 80a1326:	601a      	strpl	r2, [r3, #0]
 80a1328:	4b10      	ldr	r3, [pc, #64]	; (80a136c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a132a:	681a      	ldr	r2, [r3, #0]
 80a132c:	07d1      	lsls	r1, r2, #31
 80a132e:	bf5c      	itt	pl
 80a1330:	2201      	movpl	r2, #1
 80a1332:	601a      	strpl	r2, [r3, #0]
 80a1334:	4b0e      	ldr	r3, [pc, #56]	; (80a1370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1336:	681a      	ldr	r2, [r3, #0]
 80a1338:	07d2      	lsls	r2, r2, #31
 80a133a:	bf5c      	itt	pl
 80a133c:	2201      	movpl	r2, #1
 80a133e:	601a      	strpl	r2, [r3, #0]
 80a1340:	4770      	bx	lr
 80a1342:	bf00      	nop
 80a1344:	20000610 	.word	0x20000610
 80a1348:	2000060c 	.word	0x2000060c
 80a134c:	20000608 	.word	0x20000608
 80a1350:	20000604 	.word	0x20000604
 80a1354:	20000600 	.word	0x20000600
 80a1358:	200005fc 	.word	0x200005fc
 80a135c:	200005f8 	.word	0x200005f8
 80a1360:	200005f4 	.word	0x200005f4
 80a1364:	200005f0 	.word	0x200005f0
 80a1368:	200005ec 	.word	0x200005ec
 80a136c:	200005e8 	.word	0x200005e8
 80a1370:	200005e4 	.word	0x200005e4

080a1374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1374:	4b24      	ldr	r3, [pc, #144]	; (80a1408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1376:	681a      	ldr	r2, [r3, #0]
 80a1378:	07d0      	lsls	r0, r2, #31
 80a137a:	bf5c      	itt	pl
 80a137c:	2201      	movpl	r2, #1
 80a137e:	601a      	strpl	r2, [r3, #0]
 80a1380:	4b22      	ldr	r3, [pc, #136]	; (80a140c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1382:	681a      	ldr	r2, [r3, #0]
 80a1384:	07d1      	lsls	r1, r2, #31
 80a1386:	bf5c      	itt	pl
 80a1388:	2201      	movpl	r2, #1
 80a138a:	601a      	strpl	r2, [r3, #0]
 80a138c:	4b20      	ldr	r3, [pc, #128]	; (80a1410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a138e:	681a      	ldr	r2, [r3, #0]
 80a1390:	07d2      	lsls	r2, r2, #31
 80a1392:	bf5c      	itt	pl
 80a1394:	2201      	movpl	r2, #1
 80a1396:	601a      	strpl	r2, [r3, #0]
 80a1398:	4b1e      	ldr	r3, [pc, #120]	; (80a1414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a139a:	681a      	ldr	r2, [r3, #0]
 80a139c:	07d0      	lsls	r0, r2, #31
 80a139e:	bf5c      	itt	pl
 80a13a0:	2201      	movpl	r2, #1
 80a13a2:	601a      	strpl	r2, [r3, #0]
 80a13a4:	4b1c      	ldr	r3, [pc, #112]	; (80a1418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a13a6:	681a      	ldr	r2, [r3, #0]
 80a13a8:	07d1      	lsls	r1, r2, #31
 80a13aa:	bf5c      	itt	pl
 80a13ac:	2201      	movpl	r2, #1
 80a13ae:	601a      	strpl	r2, [r3, #0]
 80a13b0:	4b1a      	ldr	r3, [pc, #104]	; (80a141c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a13b2:	681a      	ldr	r2, [r3, #0]
 80a13b4:	07d2      	lsls	r2, r2, #31
 80a13b6:	bf5c      	itt	pl
 80a13b8:	2201      	movpl	r2, #1
 80a13ba:	601a      	strpl	r2, [r3, #0]
 80a13bc:	4b18      	ldr	r3, [pc, #96]	; (80a1420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a13be:	681a      	ldr	r2, [r3, #0]
 80a13c0:	07d0      	lsls	r0, r2, #31
 80a13c2:	bf5c      	itt	pl
 80a13c4:	2201      	movpl	r2, #1
 80a13c6:	601a      	strpl	r2, [r3, #0]
 80a13c8:	4b16      	ldr	r3, [pc, #88]	; (80a1424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a13ca:	681a      	ldr	r2, [r3, #0]
 80a13cc:	07d1      	lsls	r1, r2, #31
 80a13ce:	bf5c      	itt	pl
 80a13d0:	2201      	movpl	r2, #1
 80a13d2:	601a      	strpl	r2, [r3, #0]
 80a13d4:	4b14      	ldr	r3, [pc, #80]	; (80a1428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a13d6:	681a      	ldr	r2, [r3, #0]
 80a13d8:	07d2      	lsls	r2, r2, #31
 80a13da:	bf5c      	itt	pl
 80a13dc:	2201      	movpl	r2, #1
 80a13de:	601a      	strpl	r2, [r3, #0]
 80a13e0:	4b12      	ldr	r3, [pc, #72]	; (80a142c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a13e2:	681a      	ldr	r2, [r3, #0]
 80a13e4:	07d0      	lsls	r0, r2, #31
 80a13e6:	bf5c      	itt	pl
 80a13e8:	2201      	movpl	r2, #1
 80a13ea:	601a      	strpl	r2, [r3, #0]
 80a13ec:	4b10      	ldr	r3, [pc, #64]	; (80a1430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a13ee:	681a      	ldr	r2, [r3, #0]
 80a13f0:	07d1      	lsls	r1, r2, #31
 80a13f2:	bf5c      	itt	pl
 80a13f4:	2201      	movpl	r2, #1
 80a13f6:	601a      	strpl	r2, [r3, #0]
 80a13f8:	4b0e      	ldr	r3, [pc, #56]	; (80a1434 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a13fa:	681a      	ldr	r2, [r3, #0]
 80a13fc:	07d2      	lsls	r2, r2, #31
 80a13fe:	bf5c      	itt	pl
 80a1400:	2201      	movpl	r2, #1
 80a1402:	601a      	strpl	r2, [r3, #0]
 80a1404:	4770      	bx	lr
 80a1406:	bf00      	nop
 80a1408:	20000640 	.word	0x20000640
 80a140c:	2000063c 	.word	0x2000063c
 80a1410:	20000638 	.word	0x20000638
 80a1414:	20000634 	.word	0x20000634
 80a1418:	20000630 	.word	0x20000630
 80a141c:	2000062c 	.word	0x2000062c
 80a1420:	20000628 	.word	0x20000628
 80a1424:	20000624 	.word	0x20000624
 80a1428:	20000620 	.word	0x20000620
 80a142c:	2000061c 	.word	0x2000061c
 80a1430:	20000618 	.word	0x20000618
 80a1434:	20000614 	.word	0x20000614

080a1438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1438:	4b18      	ldr	r3, [pc, #96]	; (80a149c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a143a:	681a      	ldr	r2, [r3, #0]
 80a143c:	07d1      	lsls	r1, r2, #31
 80a143e:	bf5c      	itt	pl
 80a1440:	2201      	movpl	r2, #1
 80a1442:	601a      	strpl	r2, [r3, #0]
 80a1444:	4b16      	ldr	r3, [pc, #88]	; (80a14a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1446:	681a      	ldr	r2, [r3, #0]
 80a1448:	07d2      	lsls	r2, r2, #31
 80a144a:	bf5c      	itt	pl
 80a144c:	2201      	movpl	r2, #1
 80a144e:	601a      	strpl	r2, [r3, #0]
 80a1450:	4b14      	ldr	r3, [pc, #80]	; (80a14a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1452:	681a      	ldr	r2, [r3, #0]
 80a1454:	07d0      	lsls	r0, r2, #31
 80a1456:	bf5c      	itt	pl
 80a1458:	2201      	movpl	r2, #1
 80a145a:	601a      	strpl	r2, [r3, #0]
 80a145c:	4b12      	ldr	r3, [pc, #72]	; (80a14a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a145e:	681a      	ldr	r2, [r3, #0]
 80a1460:	07d1      	lsls	r1, r2, #31
 80a1462:	bf5c      	itt	pl
 80a1464:	2201      	movpl	r2, #1
 80a1466:	601a      	strpl	r2, [r3, #0]
 80a1468:	4b10      	ldr	r3, [pc, #64]	; (80a14ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a146a:	681a      	ldr	r2, [r3, #0]
 80a146c:	07d2      	lsls	r2, r2, #31
 80a146e:	bf5c      	itt	pl
 80a1470:	2201      	movpl	r2, #1
 80a1472:	601a      	strpl	r2, [r3, #0]
 80a1474:	4b0e      	ldr	r3, [pc, #56]	; (80a14b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1476:	681a      	ldr	r2, [r3, #0]
 80a1478:	07d0      	lsls	r0, r2, #31
 80a147a:	bf5c      	itt	pl
 80a147c:	2201      	movpl	r2, #1
 80a147e:	601a      	strpl	r2, [r3, #0]
 80a1480:	4b0c      	ldr	r3, [pc, #48]	; (80a14b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1482:	681a      	ldr	r2, [r3, #0]
 80a1484:	07d1      	lsls	r1, r2, #31
 80a1486:	bf5c      	itt	pl
 80a1488:	2201      	movpl	r2, #1
 80a148a:	601a      	strpl	r2, [r3, #0]
 80a148c:	4b0a      	ldr	r3, [pc, #40]	; (80a14b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a148e:	681a      	ldr	r2, [r3, #0]
 80a1490:	07d2      	lsls	r2, r2, #31
 80a1492:	bf5c      	itt	pl
 80a1494:	2201      	movpl	r2, #1
 80a1496:	601a      	strpl	r2, [r3, #0]
 80a1498:	4770      	bx	lr
 80a149a:	bf00      	nop
 80a149c:	20000660 	.word	0x20000660
 80a14a0:	2000065c 	.word	0x2000065c
 80a14a4:	20000658 	.word	0x20000658
 80a14a8:	20000654 	.word	0x20000654
 80a14ac:	20000650 	.word	0x20000650
 80a14b0:	2000064c 	.word	0x2000064c
 80a14b4:	20000648 	.word	0x20000648
 80a14b8:	20000644 	.word	0x20000644

080a14bc <__cxa_atexit>:
 80a14bc:	b510      	push	{r4, lr}
 80a14be:	4c05      	ldr	r4, [pc, #20]	; (80a14d4 <__cxa_atexit+0x18>)
 80a14c0:	4613      	mov	r3, r2
 80a14c2:	b12c      	cbz	r4, 80a14d0 <__cxa_atexit+0x14>
 80a14c4:	460a      	mov	r2, r1
 80a14c6:	4601      	mov	r1, r0
 80a14c8:	2002      	movs	r0, #2
 80a14ca:	f3af 8000 	nop.w
 80a14ce:	bd10      	pop	{r4, pc}
 80a14d0:	4620      	mov	r0, r4
 80a14d2:	bd10      	pop	{r4, pc}
 80a14d4:	00000000 	.word	0x00000000

080a14d8 <memcpy>:
 80a14d8:	b510      	push	{r4, lr}
 80a14da:	1e43      	subs	r3, r0, #1
 80a14dc:	440a      	add	r2, r1
 80a14de:	4291      	cmp	r1, r2
 80a14e0:	d004      	beq.n	80a14ec <memcpy+0x14>
 80a14e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a14e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a14ea:	e7f8      	b.n	80a14de <memcpy+0x6>
 80a14ec:	bd10      	pop	{r4, pc}

080a14ee <memset>:
 80a14ee:	4603      	mov	r3, r0
 80a14f0:	4402      	add	r2, r0
 80a14f2:	4293      	cmp	r3, r2
 80a14f4:	d002      	beq.n	80a14fc <memset+0xe>
 80a14f6:	f803 1b01 	strb.w	r1, [r3], #1
 80a14fa:	e7fa      	b.n	80a14f2 <memset+0x4>
 80a14fc:	4770      	bx	lr
	...

080a1500 <srand>:
 80a1500:	b538      	push	{r3, r4, r5, lr}
 80a1502:	4b12      	ldr	r3, [pc, #72]	; (80a154c <srand+0x4c>)
 80a1504:	4605      	mov	r5, r0
 80a1506:	681c      	ldr	r4, [r3, #0]
 80a1508:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a150a:	b9d3      	cbnz	r3, 80a1542 <srand+0x42>
 80a150c:	2018      	movs	r0, #24
 80a150e:	f7ff f859 	bl	80a05c4 <malloc>
 80a1512:	f243 330e 	movw	r3, #13070	; 0x330e
 80a1516:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1518:	8003      	strh	r3, [r0, #0]
 80a151a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a151e:	8043      	strh	r3, [r0, #2]
 80a1520:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1524:	8083      	strh	r3, [r0, #4]
 80a1526:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a152a:	80c3      	strh	r3, [r0, #6]
 80a152c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1530:	8103      	strh	r3, [r0, #8]
 80a1532:	2305      	movs	r3, #5
 80a1534:	8143      	strh	r3, [r0, #10]
 80a1536:	230b      	movs	r3, #11
 80a1538:	8183      	strh	r3, [r0, #12]
 80a153a:	2201      	movs	r2, #1
 80a153c:	2300      	movs	r3, #0
 80a153e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1542:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1544:	2200      	movs	r2, #0
 80a1546:	611d      	str	r5, [r3, #16]
 80a1548:	615a      	str	r2, [r3, #20]
 80a154a:	bd38      	pop	{r3, r4, r5, pc}
 80a154c:	200000d8 	.word	0x200000d8

080a1550 <rand>:
 80a1550:	4b19      	ldr	r3, [pc, #100]	; (80a15b8 <rand+0x68>)
 80a1552:	b510      	push	{r4, lr}
 80a1554:	681c      	ldr	r4, [r3, #0]
 80a1556:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1558:	b9d3      	cbnz	r3, 80a1590 <rand+0x40>
 80a155a:	2018      	movs	r0, #24
 80a155c:	f7ff f832 	bl	80a05c4 <malloc>
 80a1560:	f243 330e 	movw	r3, #13070	; 0x330e
 80a1564:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1566:	8003      	strh	r3, [r0, #0]
 80a1568:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a156c:	8043      	strh	r3, [r0, #2]
 80a156e:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1572:	8083      	strh	r3, [r0, #4]
 80a1574:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a1578:	80c3      	strh	r3, [r0, #6]
 80a157a:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a157e:	8103      	strh	r3, [r0, #8]
 80a1580:	2305      	movs	r3, #5
 80a1582:	8143      	strh	r3, [r0, #10]
 80a1584:	230b      	movs	r3, #11
 80a1586:	8183      	strh	r3, [r0, #12]
 80a1588:	2201      	movs	r2, #1
 80a158a:	2300      	movs	r3, #0
 80a158c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1590:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a1592:	4c0a      	ldr	r4, [pc, #40]	; (80a15bc <rand+0x6c>)
 80a1594:	690b      	ldr	r3, [r1, #16]
 80a1596:	6948      	ldr	r0, [r1, #20]
 80a1598:	435c      	muls	r4, r3
 80a159a:	4a09      	ldr	r2, [pc, #36]	; (80a15c0 <rand+0x70>)
 80a159c:	fb02 4000 	mla	r0, r2, r0, r4
 80a15a0:	fba3 2302 	umull	r2, r3, r3, r2
 80a15a4:	3201      	adds	r2, #1
 80a15a6:	4403      	add	r3, r0
 80a15a8:	f143 0300 	adc.w	r3, r3, #0
 80a15ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80a15b0:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80a15b4:	bd10      	pop	{r4, pc}
 80a15b6:	bf00      	nop
 80a15b8:	200000d8 	.word	0x200000d8
 80a15bc:	5851f42d 	.word	0x5851f42d
 80a15c0:	4c957f2d 	.word	0x4c957f2d

080a15c4 <strcmp>:
 80a15c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a15c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a15cc:	2a01      	cmp	r2, #1
 80a15ce:	bf28      	it	cs
 80a15d0:	429a      	cmpcs	r2, r3
 80a15d2:	d0f7      	beq.n	80a15c4 <strcmp>
 80a15d4:	1ad0      	subs	r0, r2, r3
 80a15d6:	4770      	bx	lr

080a15d8 <strlen>:
 80a15d8:	4603      	mov	r3, r0
 80a15da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a15de:	2a00      	cmp	r2, #0
 80a15e0:	d1fb      	bne.n	80a15da <strlen+0x2>
 80a15e2:	1a18      	subs	r0, r3, r0
 80a15e4:	3801      	subs	r0, #1
 80a15e6:	4770      	bx	lr

080a15e8 <dynalib_user>:
 80a15e8:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a15f8:	0000 0000                                   ....

080a15fc <_ZL9script_js>:
 80a15fc:	6176 2072 6162 6573 755f 6c72 273d 7468     var base_url='ht
 80a160c:	7074 2f3a 312f 3239 312e 3836 302e 312e     tp://192.168.0.1
 80a161c:	272f 763b 7261 6e20 7465 6f77 6b72 6c5f     /';var network_l
 80a162c:	7369 3b74 6176 2072 7570 6c62 6369 6b5f     ist;var public_k
 80a163c:	7965 763b 7261 7220 6173 6e3d 7765 5220     ey;var rsa=new R
 80a164c:	4153 654b 2879 3b29 6176 2072 6373 6e61     SAKey();var scan
 80a165c:	7542 7474 6e6f 643d 636f 6d75 6e65 2e74     Button=document.
 80a166c:	6567 4574 656c 656d 746e 7942 6449 2728     getElementById('
 80a167c:	6373 6e61 622d 7475 6f74 276e 3b29 6176     scan-button');va
 80a168c:	2072 6f63 6e6e 6365 4274 7475 6f74 3d6e     r connectButton=
 80a169c:	6f64 7563 656d 746e 672e 7465 6c45 6d65     document.getElem
 80a16ac:	6e65 4274 4979 2864 6327 6e6f 656e 7463     entById('connect
 80a16bc:	622d 7475 6f74 276e 3b29 6176 2072 6f63     -button');var co
 80a16cc:	7970 7542 7474 6e6f 643d 636f 6d75 6e65     pyButton=documen
 80a16dc:	2e74 6567 4574 656c 656d 746e 7942 6449     t.getElementById
 80a16ec:	2728 6f63 7970 622d 7475 6f74 276e 3b29     ('copy-button');
 80a16fc:	6176 2072 6873 776f 7542 7474 6e6f 643d     var showButton=d
 80a170c:	636f 6d75 6e65 2e74 6567 4574 656c 656d     ocument.getEleme
 80a171c:	746e 7942 6449 2728 6873 776f 622d 7475     ntById('show-but
 80a172c:	6f74 276e 3b29 6176 2072 6564 6976 6563     ton');var device
 80a173c:	4449 643d 636f 6d75 6e65 2e74 6567 4574     ID=document.getE
 80a174c:	656c 656d 746e 7942 6449 2728 6564 6976     lementById('devi
 80a175c:	6563 692d 2764 3b29 6176 2072 6f63 6e6e     ce-id');var conn
 80a176c:	6365 4674 726f 3d6d 6f64 7563 656d 746e     ectForm=document
 80a177c:	672e 7465 6c45 6d65 6e65 4274 4979 2864     .getElementById(
 80a178c:	6327 6e6f 656e 7463 662d 726f 276d 3b29     'connect-form');
 80a179c:	6176 2072 7570 6c62 6369 6b5f 7965 635f     var public_key_c
 80a17ac:	6c61 626c 6361 3d6b 737b 6375 6563 7373     allback={success
 80a17bc:	663a 6e75 7463 6f69 286e 2961 637b 6e6f     :function(a){con
 80a17cc:	6f73 656c 6c2e 676f 2728 7550 6c62 6369     sole.log('Public
 80a17dc:	6b20 7965 203a 2b27 2e61 2962 703b 6275      key: '+a.b);pub
 80a17ec:	696c 5f63 656b 3d79 2e61 3b62 7372 2e61     lic_key=a.b;rsa.
 80a17fc:	6573 5074 6275 696c 2863 7570 6c62 6369     setPublic(public
 80a180c:	6b5f 7965 732e 6275 7473 6972 676e 3528     _key.substring(5
 80a181c:	2c38 3835 322b 3635 2c29 7570 6c62 6369     8,58+256),public
 80a182c:	6b5f 7965 732e 6275 7473 6972 676e 3328     _key.substring(3
 80a183c:	3831 332c 3831 362b 2929 7d3b 652c 7272     18,318+6));},err
 80a184c:	726f 663a 6e75 7463 6f69 286e 2c61 2962     or:function(a,b)
 80a185c:	637b 6e6f 6f73 656c 6c2e 676f 6128 3b29     {console.log(a);
 80a186c:	6977 646e 776f 612e 656c 7472 2728 6854     window.alert('Th
 80a187c:	7265 2065 6177 2073 2061 7270 626f 656c     ere was a proble
 80a188c:	206d 6566 6374 6968 676e 6920 706d 726f     m fetching impor
 80a189c:	6174 746e 6920 666e 726f 616d 6974 6e6f     tant information
 80a18ac:	6620 6f72 206d 6f79 7275 6420 7665 6369      from your devic
 80a18bc:	2e65 5020 656c 7361 2065 6576 6972 7966     e. Please verify
 80a18cc:	7920 756f 2072 6f63 6e6e 6365 6974 6e6f      your connection
 80a18dc:	202c 6874 6e65 7220 6c65 616f 2064 6874     , then reload th
 80a18ec:	7369 7020 6761 2e65 2927 7d3b 3b7d 6176     is page.');}};va
 80a18fc:	2072 6564 6976 6563 695f 5f64 6163 6c6c     r device_id_call
 80a190c:	6162 6b63 7b3d 7573 6363 7365 3a73 7566     back={success:fu
 80a191c:	636e 6974 6e6f 6128 7b29 6176 2072 3d62     nction(a){var b=
 80a192c:	2e61 6469 643b 7665 6369 4965 2e44 6176     a.id;deviceID.va
 80a193c:	756c 3d65 3b62 2c7d 7265 6f72 3a72 7566     lue=b;},error:fu
 80a194c:	636e 6974 6e6f 6128 622c 7b29 6f63 736e     nction(a,b){cons
 80a195c:	6c6f 2e65 6f6c 2867 2961 763b 7261 6320     ole.log(a);var c
 80a196c:	273d 4f43 4d4d 4e55 4349 5441 4f49 5f4e     ='COMMUNICATION_
 80a197c:	5245 4f52 2752 643b 7665 6369 4965 2e44     ERROR';deviceID.
 80a198c:	6176 756c 3d65 3b63 7d7d 763b 7261 7320     value=c;}};var s
 80a199c:	6163 3d6e 7566 636e 6974 6e6f 2928 637b     can=function(){c
 80a19ac:	6e6f 6f73 656c 6c2e 676f 2728 6353 6e61     onsole.log('Scan
 80a19bc:	696e 676e 2e2e 212e 2927 643b 7369 6261     ning...!');disab
 80a19cc:	656c 7542 7474 6e6f 2873 3b29 6373 6e61     leButtons();scan
 80a19dc:	7542 7474 6e6f 692e 6e6e 7265 5448 4c4d     Button.innerHTML
 80a19ec:	273d 6353 6e61 696e 676e 2e2e 272e 633b     ='Scanning...';c
 80a19fc:	6e6f 656e 7463 7542 7474 6e6f 692e 6e6e     onnectButton.inn
 80a1a0c:	7265 5448 4c4d 273d 6f43 6e6e 6365 2774     erHTML='Connect'
 80a1a1c:	643b 636f 6d75 6e65 2e74 6567 4574 656c     ;document.getEle
 80a1a2c:	656d 746e 7942 6449 2728 6f63 6e6e 6365     mentById('connec
 80a1a3c:	2d74 6964 2776 2e29 7473 6c79 2e65 6964     t-div').style.di
 80a1a4c:	7073 616c 3d79 6e27 6e6f 2765 643b 636f     splay='none';doc
 80a1a5c:	6d75 6e65 2e74 6567 4574 656c 656d 746e     ument.getElement
 80a1a6c:	7942 6449 2728 656e 7774 726f 736b 642d     ById('networks-d
 80a1a7c:	7669 2927 732e 7974 656c 642e 7369 6c70     iv').style.displ
 80a1a8c:	7961 273d 6f6e 656e 3b27 6567 5274 7165     ay='none';getReq
 80a1a9c:	6575 7473 6228 7361 5f65 7275 2b6c 7327     uest(base_url+'s
 80a1aac:	6163 2d6e 7061 2c27 6373 6e61 635f 6c61     can-ap',scan_cal
 80a1abc:	626c 6361 296b 7d3b 763b 7261 7320 6163     lback);};var sca
 80a1acc:	5f6e 6163 6c6c 6162 6b63 7b3d 7573 6363     n_callback={succ
 80a1adc:	7365 3a73 7566 636e 6974 6e6f 6128 7b29     ess:function(a){
 80a1aec:	656e 7774 726f 5f6b 696c 7473 613d 732e     network_list=a.s
 80a1afc:	6163 736e 633b 6e6f 6f73 656c 6c2e 676f     cans;console.log
 80a1b0c:	2728 2049 6f66 6e75 3a64 2927 763b 7261     ('I found:');var
 80a1b1c:	6220 643d 636f 6d75 6e65 2e74 6567 4574      b=document.getE
 80a1b2c:	656c 656d 746e 7942 6449 2728 656e 7774     lementById('netw
 80a1b3c:	726f 736b 642d 7669 2927 623b 692e 6e6e     orks-div');b.inn
 80a1b4c:	7265 5448 4c4d 273d 3b27 6669 6e28 7465     erHTML='';if(net
 80a1b5c:	6f77 6b72 6c5f 7369 2e74 656c 676e 6874     work_list.length
 80a1b6c:	303e 6629 726f 7628 7261 6320 303d 633b     >0)for(var c=0;c
 80a1b7c:	6e3c 7465 6f77 6b72 6c5f 7369 2e74 656c     <network_list.le
 80a1b8c:	676e 6874 633b 2b2b 7b29 7373 6469 6e3d     ngth;c++){ssid=n
 80a1b9c:	7465 6f77 6b72 6c5f 7369 5b74 5d63 732e     etwork_list[c].s
 80a1bac:	6973 3b64 6f63 736e 6c6f 2e65 6f6c 2867     sid;console.log(
 80a1bbc:	656e 7774 726f 5f6b 696c 7473 635b 295d     network_list[c])
 80a1bcc:	613b 6464 775f 6669 5f69 706f 6974 6e6f     ;add_wifi_option
 80a1bdc:	6228 732c 6973 2964 643b 636f 6d75 6e65     (b,ssid);documen
 80a1bec:	2e74 6567 4574 656c 656d 746e 7942 6449     t.getElementById
 80a1bfc:	2728 6f63 6e6e 6365 2d74 6964 2776 2e29     ('connect-div').
 80a1c0c:	7473 6c79 2e65 6964 7073 616c 3d79 6227     style.display='b
 80a1c1c:	6f6c 6b63 3b27 657d 736c 2065 2e62 6e69     lock';}else b.in
 80a1c2c:	656e 4872 4d54 3d4c 3c27 2070 6c63 7361     nerHTML='<p clas
 80a1c3c:	3d73 275c 6373 6e61 696e 676e 652d 7272     s=\'scanning-err
 80a1c4c:	726f 275c 4e3e 206f 656e 7774 726f 736b     or\'>No networks
 80a1c5c:	6620 756f 646e 3c2e 702f 273e 7d3b 652c      found.</p>';},e
 80a1c6c:	7272 726f 663a 6e75 7463 6f69 286e 2961     rror:function(a)
 80a1c7c:	637b 6e6f 6f73 656c 6c2e 676f 2728 6353     {console.log('Sc
 80a1c8c:	6e61 696e 676e 6520 7272 726f 273a 612b     anning error:'+a
 80a1c9c:	3b29 6f64 7563 656d 746e 672e 7465 6c45     );document.getEl
 80a1cac:	6d65 6e65 4274 4979 2864 6e27 7465 6f77     ementById('netwo
 80a1cbc:	6b72 2d73 6964 2776 2e29 6e69 656e 4872     rks-div').innerH
 80a1ccc:	4d54 3d4c 3c27 2070 6c63 7361 3d73 275c     TML='<p class=\'
 80a1cdc:	6373 6e61 696e 676e 652d 7272 726f 275c     scanning-error\'
 80a1cec:	533e 6163 6e6e 6e69 2067 7265 6f72 2e72     >Scanning error.
 80a1cfc:	2f3c 3e70 3b27 2c7d 6572 6167 6472 656c     </p>';},regardle
 80a1d0c:	7373 663a 6e75 7463 6f69 286e 7b29 6373     ss:function(){sc
 80a1d1c:	6e61 7542 7474 6e6f 692e 6e6e 7265 5448     anButton.innerHT
 80a1d2c:	4c4d 273d 6552 532d 6163 276e 653b 616e     ML='Re-Scan';ena
 80a1d3c:	6c62 4265 7475 6f74 736e 2928 643b 636f     bleButtons();doc
 80a1d4c:	6d75 6e65 2e74 6567 4574 656c 656d 746e     ument.getElement
 80a1d5c:	7942 6449 2728 656e 7774 726f 736b 642d     ById('networks-d
 80a1d6c:	7669 2927 732e 7974 656c 642e 7369 6c70     iv').style.displ
 80a1d7c:	7961 273d 6c62 636f 276b 7d3b 3b7d 6176     ay='block';}};va
 80a1d8c:	2072 6f63 666e 6769 7275 3d65 7566 636e     r configure=func
 80a1d9c:	6974 6e6f 6128 7b29 2e61 7270 7665 6e65     tion(a){a.preven
 80a1dac:	4474 6665 7561 746c 2928 763b 7261 6220     tDefault();var b
 80a1dbc:	673d 7465 735f 6c65 6365 6574 5f64 656e     =get_selected_ne
 80a1dcc:	7774 726f 286b 3b29 6176 2072 3d63 6f64     twork();var c=do
 80a1ddc:	7563 656d 746e 672e 7465 6c45 6d65 6e65     cument.getElemen
 80a1dec:	4274 4979 2864 7027 7361 7773 726f 2764     tById('password'
 80a1dfc:	2e29 6176 756c 3b65 6669 2128 2962 777b     ).value;if(!b){w
 80a1e0c:	6e69 6f64 2e77 6c61 7265 2874 5027 656c     indow.alert('Ple
 80a1e1c:	7361 2065 6573 656c 7463 6120 6e20 7465     ase select a net
 80a1e2c:	6f77 6b72 2721 3b29 6572 7574 6e72 6620     work!');return f
 80a1e3c:	6c61 6573 7d3b 6176 2072 3d64 697b 7864     alse;}var d={idx
 80a1e4c:	303a 732c 6973 3a64 2e62 7373 6469 702c     :0,ssid:b.ssid,p
 80a1e5c:	6477 723a 6173 652e 636e 7972 7470 6328     wd:rsa.encrypt(c
 80a1e6c:	2c29 6573 3a63 2e62 6573 2c63 6863 623a     ),sec:b.sec,ch:b
 80a1e7c:	632e 7d68 633b 6e6f 656e 7463 7542 7474     .ch};connectButt
 80a1e8c:	6e6f 692e 6e6e 7265 5448 4c4d 273d 6553     on.innerHTML='Se
 80a1e9c:	646e 6e69 2067 7263 6465 6e65 6974 6c61     nding credential
 80a1eac:	2e73 2e2e 3b27 6964 6173 6c62 4265 7475     s...';disableBut
 80a1ebc:	6f74 736e 2928 633b 6e6f 6f73 656c 6c2e     tons();console.l
 80a1ecc:	676f 2728 6553 646e 6e69 2067 7263 6465     og('Sending cred
 80a1edc:	6e65 6974 6c61 3a73 2720 4a2b 4f53 2e4e     entials: '+JSON.
 80a1eec:	7473 6972 676e 6669 2879 2964 3b29 6f70     stringify(d));po
 80a1efc:	7473 6552 7571 7365 2874 6162 6573 755f     stRequest(base_u
 80a1f0c:	6c72 272b 6f63 666e 6769 7275 2d65 7061     rl+'configure-ap
 80a1f1c:	2c27 2c64 6f63 666e 6769 7275 5f65 6163     ',d,configure_ca
 80a1f2c:	6c6c 6162 6b63 3b29 3b7d 6176 2072 6f63     llback);};var co
 80a1f3c:	666e 6769 7275 5f65 6163 6c6c 6162 6b63     nfigure_callback
 80a1f4c:	7b3d 7573 6363 7365 3a73 7566 636e 6974     ={success:functi
 80a1f5c:	6e6f 6128 7b29 6f63 736e 6c6f 2e65 6f6c     on(a){console.lo
 80a1f6c:	2867 4327 6572 6564 746e 6169 736c 7220     g('Credentials r
 80a1f7c:	6365 6965 6576 2e64 2927 633b 6e6f 656e     eceived.');conne
 80a1f8c:	7463 7542 7474 6e6f 692e 6e6e 7265 5448     ctButton.innerHT
 80a1f9c:	4c4d 273d 7243 6465 6e65 6974 6c61 2073     ML='Credentials 
 80a1fac:	6572 6563 7669 6465 2e2e 272e 703b 736f     received...';pos
 80a1fbc:	5274 7165 6575 7473 6228 7361 5f65 7275     tRequest(base_ur
 80a1fcc:	2b6c 6327 6e6f 656e 7463 612d 2770 7b2c     l+'connect-ap',{
 80a1fdc:	6469 3a78 7d30 632c 6e6f 656e 7463 635f     idx:0},connect_c
 80a1fec:	6c61 626c 6361 296b 7d3b 652c 7272 726f     allback);},error
 80a1ffc:	663a 6e75 7463 6f69 286e 2c61 2962 637b     :function(a,b){c
 80a200c:	6e6f 6f73 656c 6c2e 676f 2728 6f43 666e     onsole.log('Conf
 80a201c:	6769 7275 2065 7265 6f72 3a72 2720 612b     igure error: '+a
 80a202c:	3b29 6977 646e 776f 612e 656c 7472 2728     );window.alert('
 80a203c:	6854 2065 6f63 666e 6769 7275 7461 6f69     The configuratio
 80a204c:	206e 6f63 6d6d 6e61 2064 6166 6c69 6465     n command failed
 80a205c:	202c 6863 6365 206b 6874 7461 7920 756f     , check that you
 80a206c:	6120 6572 7320 6974 6c6c 7720 6c65 206c      are still well 
 80a207c:	6f63 6e6e 6365 6574 2064 6f74 7420 6568     connected to the
 80a208c:	6420 7665 6369 5c65 7327 5720 4669 2069      device\'s WiFi 
 80a209c:	6f68 7374 6f70 2074 6e61 2064 6572 7274     hotspot and retr
 80a20ac:	2e79 2927 633b 6e6f 656e 7463 7542 7474     y.');connectButt
 80a20bc:	6e6f 692e 6e6e 7265 5448 4c4d 273d 6552     on.innerHTML='Re
 80a20cc:	7274 2779 653b 616e 6c62 4265 7475 6f74     try';enableButto
 80a20dc:	736e 2928 7d3b 3b7d 6176 2072 6f63 6e6e     ns();}};var conn
 80a20ec:	6365 5f74 6163 6c6c 6162 6b63 7b3d 7573     ect_callback={su
 80a20fc:	6363 7365 3a73 7566 636e 6974 6e6f 6128     ccess:function(a
 80a210c:	7b29 6f63 736e 6c6f 2e65 6f6c 2867 4127     ){console.log('A
 80a211c:	7474 6d65 7470 6e69 2067 6f74 6320 6e6f     ttempting to con
 80a212c:	656e 7463 7420 206f 6874 2065 6c63 756f     nect to the clou
 80a213c:	2e64 2927 633b 6e6f 656e 7463 7542 7474     d.');connectButt
 80a214c:	6e6f 692e 6e6e 7265 5448 4c4d 273d 7441     on.innerHTML='At
 80a215c:	6574 706d 6974 676e 7420 206f 6f63 6e6e     tempting to conn
 80a216c:	6365 2e74 2e2e 3b27 6977 646e 776f 612e     ect...';window.a
 80a217c:	656c 7472 2728 6f59 7275 6420 7665 6369     lert('Your devic
 80a218c:	2065 6873 756f 646c 6e20 776f 7320 6174     e should now sta
 80a219c:	7472 6620 616c 6873 6e69 2067 7267 6565     rt flashing gree
 80a21ac:	206e 6e61 2064 7461 6574 706d 2074 6f74     n and attempt to
 80a21bc:	6320 6e6f 656e 7463 7420 206f 6874 2065      connect to the 
 80a21cc:	6c63 756f 2e64 5420 6968 2073 7375 6175     cloud. This usua
 80a21dc:	6c6c 2079 6174 656b 2073 6261 756f 2074     lly takes about 
 80a21ec:	3032 7320 6365 6e6f 7364 202c 6661 6574     20 seconds, afte
 80a21fc:	2072 6877 6369 2068 7469 7720 6c69 206c     r which it will 
 80a220c:	6562 6967 206e 6c73 776f 796c 6220 696c     begin slowly bli
 80a221c:	6b6e 6e69 2067 7963 6e61 202e 6e5c 6e5c     nking cyan. \n\n
 80a222c:	6e5c 6649 7420 6968 2073 7270 636f 7365     \nIf this proces
 80a223c:	2073 6166 6c69 2073 6562 6163 7375 2065     s fails because 
 80a224c:	6f79 2075 6e65 6574 6572 2064 6874 2065     you entered the 
 80a225c:	7277 6e6f 2067 6170 7373 6f77 6472 202c     wrong password, 
 80a226c:	6874 2065 6564 6976 6563 7720 6c69 206c     the device will 
 80a227c:	6c66 7361 2068 7267 6565 206e 6e69 6564     flash green inde
 80a228c:	6966 696e 6574 796c 202e 6e49 7420 6968     finitely. In thi
 80a229c:	2073 6163 6573 202c 6f68 646c 7420 6568     s case, hold the
 80a22ac:	7320 7465 7075 6220 7475 6f74 206e 6f66      setup button fo
 80a22bc:	2072 2036 6573 6f63 646e 2073 6e75 6974     r 6 seconds unti
 80a22cc:	206c 6874 2065 6564 6976 6563 7320 6174     l the device sta
 80a22dc:	7472 2073 6c62 6e69 696b 676e 6220 756c     rts blinking blu
 80a22ec:	2065 6761 6961 2e6e 5420 6568 206e 6572     e again. Then re
 80a22fc:	6f63 6e6e 6365 2074 6f74 7420 6568 5720     connect to the W
 80a230c:	4669 2069 6f68 7374 6f70 2074 7469 6720     iFi hotspot it g
 80a231c:	6e65 7265 7461 7365 6120 646e 7220 6c65     enerates and rel
 80a232c:	616f 2064 6874 7369 7020 6761 2065 6f74     oad this page to
 80a233c:	7420 7972 6120 6167 6e69 272e 3b29 2c7d      try again.');},
 80a234c:	7265 6f72 3a72 7566 636e 6974 6e6f 6128     error:function(a
 80a235c:	622c 7b29 6f63 736e 6c6f 2e65 6f6c 2867     ,b){console.log(
 80a236c:	4327 6e6f 656e 7463 6520 7272 726f 203a     'Connect error: 
 80a237c:	2b27 2961 773b 6e69 6f64 2e77 6c61 7265     '+a);window.aler
 80a238c:	2874 5427 6568 6320 6e6f 656e 7463 6320     t('The connect c
 80a239c:	6d6f 616d 646e 6620 6961 656c 2c64 6320     ommand failed, c
 80a23ac:	6568 6b63 7420 6168 2074 6f79 2075 7261     heck that you ar
 80a23bc:	2065 7473 6c69 206c 6577 6c6c 6320 6e6f     e still well con
 80a23cc:	656e 7463 6465 7420 206f 6874 2065 6564     nected to the de
 80a23dc:	6976 6563 275c 2073 6957 6946 6820 746f     vice\'s WiFi hot
 80a23ec:	7073 746f 6120 646e 7220 7465 7972 272e     spot and retry.'
 80a23fc:	3b29 6f63 6e6e 6365 4274 7475 6f74 2e6e     );connectButton.
 80a240c:	6e69 656e 4872 4d54 3d4c 5227 7465 7972     innerHTML='Retry
 80a241c:	3b27 6e65 6261 656c 7542 7474 6e6f 2873     ';enableButtons(
 80a242c:	3b29 7d7d 763b 7261 6420 7369 6261 656c     );}};var disable
 80a243c:	7542 7474 6e6f 3d73 7566 636e 6974 6e6f     Buttons=function
 80a244c:	2928 637b 6e6f 656e 7463 7542 7474 6e6f     (){connectButton
 80a245c:	642e 7369 6261 656c 3d64 7274 6575 733b     .disabled=true;s
 80a246c:	6163 426e 7475 6f74 2e6e 6964 6173 6c62     canButton.disabl
 80a247c:	6465 743d 7572 3b65 3b7d 6176 2072 6e65     ed=true;};var en
 80a248c:	6261 656c 7542 7474 6e6f 3d73 7566 636e     ableButtons=func
 80a249c:	6974 6e6f 2928 637b 6e6f 656e 7463 7542     tion(){connectBu
 80a24ac:	7474 6e6f 642e 7369 6261 656c 3d64 6166     tton.disabled=fa
 80a24bc:	736c 3b65 6373 6e61 7542 7474 6e6f 642e     lse;scanButton.d
 80a24cc:	7369 6261 656c 3d64 6166 736c 3b65 3b7d     isabled=false;};
 80a24dc:	6176 2072 6461 5f64 6977 6966 6f5f 7470     var add_wifi_opt
 80a24ec:	6f69 3d6e 7566 636e 6974 6e6f 6128 622c     ion=function(a,b
 80a24fc:	7b29 6176 2072 3d63 6f64 7563 656d 746e     ){var c=document
 80a250c:	632e 6572 7461 4565 656c 656d 746e 2728     .createElement('
 80a251c:	4e49 5550 2754 3b29 2e63 7974 6570 273d     INPUT');c.type='
 80a252c:	6172 6964 276f 633b 762e 6c61 6575 623d     radio';c.value=b
 80a253c:	633b 692e 3d64 3b62 2e63 616e 656d 273d     ;c.id=b;c.name='
 80a254c:	7373 6469 3b27 2e63 6c63 7361 4e73 6d61     ssid';c.classNam
 80a255c:	3d65 7227 6461 6f69 3b27 6176 2072 3d64     e='radio';var d=
 80a256c:	6f64 7563 656d 746e 632e 6572 7461 4565     document.createE
 80a257c:	656c 656d 746e 2728 4944 2756 3b29 2e64     lement('DIV');d.
 80a258c:	6c63 7361 4e73 6d61 3d65 7227 6461 6f69     className='radio
 80a259c:	642d 7669 3b27 2e64 7061 6570 646e 6843     -div';d.appendCh
 80a25ac:	6c69 2864 2963 763b 7261 6520 643d 636f     ild(c);var e=doc
 80a25bc:	6d75 6e65 2e74 7263 6165 6574 6c45 6d65     ument.createElem
 80a25cc:	6e65 2874 6c27 6261 6c65 2927 653b 682e     ent('label');e.h
 80a25dc:	6d74 466c 726f 623d 653b 692e 6e6e 7265     tmlFor=b;e.inner
 80a25ec:	5448 4c4d 623d 643b 612e 7070 6e65 4364     HTML=b;d.appendC
 80a25fc:	6968 646c 6528 3b29 2e61 7061 6570 646e     hild(e);a.append
 80a260c:	6843 6c69 2864 2964 7d3b 763b 7261 6720     Child(d);};var g
 80a261c:	7465 735f 6c65 6365 6574 5f64 656e 7774     et_selected_netw
 80a262c:	726f 3d6b 7566 636e 6974 6e6f 2928 667b     ork=function(){f
 80a263c:	726f 7628 7261 6120 303d 613b 6e3c 7465     or(var a=0;a<net
 80a264c:	6f77 6b72 6c5f 7369 2e74 656c 676e 6874     work_list.length
 80a265c:	613b 2b2b 7b29 7373 6469 6e3d 7465 6f77     ;a++){ssid=netwo
 80a266c:	6b72 6c5f 7369 5b74 5d61 732e 6973 3b64     rk_list[a].ssid;
 80a267c:	6669 6428 636f 6d75 6e65 2e74 6567 4574     if(document.getE
 80a268c:	656c 656d 746e 7942 6449 7328 6973 2964     lementById(ssid)
 80a269c:	632e 6568 6b63 6465 7229 7465 7275 206e     .checked)return 
 80a26ac:	656e 7774 726f 5f6b 696c 7473 615b 3b5d     network_list[a];
 80a26bc:	7d7d 763b 7261 6320 706f 3d79 7566 636e     }};var copy=func
 80a26cc:	6974 6e6f 2928 777b 6e69 6f64 2e77 7270     tion(){window.pr
 80a26dc:	6d6f 7470 2728 6f43 7970 7420 206f 6c63     ompt('Copy to cl
 80a26ec:	7069 6f62 7261 3a64 4320 7274 206c 202b     ipboard: Ctrl + 
 80a26fc:	2c43 4520 746e 7265 2c27 6564 6976 6563     C, Enter',device
 80a270c:	4449 762e 6c61 6575 3b29 3b7d 6176 2072     ID.value);};var 
 80a271c:	6f74 6767 656c 6853 776f 663d 6e75 7463     toggleShow=funct
 80a272c:	6f69 286e 7b29 6176 2072 3d61 6f64 7563     ion(){var a=docu
 80a273c:	656d 746e 672e 7465 6c45 6d65 6e65 4274     ment.getElementB
 80a274c:	4979 2864 7027 7361 7773 726f 2764 3b29     yId('password');
 80a275c:	6e69 7570 5474 7079 3d65 2e61 7974 6570     inputType=a.type
 80a276c:	693b 2866 6e69 7570 5474 7079 3d65 3d3d     ;if(inputType===
 80a277c:	7027 7361 7773 726f 2764 7b29 6873 776f     'password'){show
 80a278c:	7542 7474 6e6f 692e 6e6e 7265 5448 4c4d     Button.innerHTML
 80a279c:	273d 6948 6564 3b27 2e61 7974 6570 273d     ='Hide';a.type='
 80a27ac:	6574 7478 3b27 657d 736c 7b65 6873 776f     text';}else{show
 80a27bc:	7542 7474 6e6f 692e 6e6e 7265 5448 4c4d     Button.innerHTML
 80a27cc:	273d 6853 776f 3b27 2e61 7974 6570 273d     ='Show';a.type='
 80a27dc:	6170 7373 6f77 6472 3b27 7d7d 763b 7261     password';}};var
 80a27ec:	6720 7465 6552 7571 7365 3d74 7566 636e      getRequest=func
 80a27fc:	6974 6e6f 6128 622c 7b29 6176 2072 3d63     tion(a,b){var c=
 80a280c:	656e 2077 4d58 484c 7474 5270 7165 6575     new XMLHttpReque
 80a281c:	7473 2928 633b 6f2e 6570 286e 4727 5445     st();c.open('GET
 80a282c:	2c27 2c61 7274 6575 3b29 2e63 6974 656d     ',a,true);c.time
 80a283c:	756f 3d74 3038 3030 633b 732e 6e65 2864     out=8000;c.send(
 80a284c:	3b29 2e63 6e6f 6572 6461 7379 6174 6574     );c.onreadystate
 80a285c:	6863 6e61 6567 663d 6e75 7463 6f69 286e     change=function(
 80a286c:	7b29 6669 6328 722e 6165 7964 7453 7461     ){if(c.readyStat
 80a287c:	3d65 343d 6929 2866 2962 697b 2866 2e63     e==4)if(b){if(c.
 80a288c:	7473 7461 7375 3d3d 3032 2930 697b 2866     status==200){if(
 80a289c:	2e62 7573 6363 7365 2973 2e62 7573 6363     b.success)b.succ
 80a28ac:	7365 2873 534a 4e4f 702e 7261 6573 6328     ess(JSON.parse(c
 80a28bc:	722e 7365 6f70 736e 5465 7865 2974 3b29     .responseText));
 80a28cc:	657d 736c 2065 6669 6228 652e 7272 726f     }else if(b.error
 80a28dc:	6229 652e 7272 726f 6328 732e 6174 7574     )b.error(c.statu
 80a28ec:	2c73 2e63 6572 7073 6e6f 6573 6554 7478     s,c.responseText
 80a28fc:	3b29 6669 6228 722e 6765 7261 6c64 7365     );if(b.regardles
 80a290c:	2973 2e62 6572 6167 6472 656c 7373 2928     s)b.regardless()
 80a291c:	7d3b 3b7d 3b7d 6176 2072 6f70 7473 6552     ;}};};var postRe
 80a292c:	7571 7365 3d74 7566 636e 6974 6e6f 6128     quest=function(a
 80a293c:	622c 632c 7b29 6176 2072 3d64 534a 4e4f     ,b,c){var d=JSON
 80a294c:	732e 7274 6e69 6967 7966 6228 3b29 6176     .stringify(b);va
 80a295c:	2072 3d65 656e 2077 4d58 484c 7474 5270     r e=new XMLHttpR
 80a296c:	7165 6575 7473 2928 653b 6f2e 6570 286e     equest();e.open(
 80a297c:	5027 534f 2754 612c 742c 7572 2965 653b     'POST',a,true);e
 80a298c:	742e 6d69 6f65 7475 343d 3030 3b30 2e65     .timeout=4000;e.
 80a299c:	6573 5274 7165 6575 7473 6548 6461 7265     setRequestHeader
 80a29ac:	2728 6f43 746e 6e65 2d74 7954 6570 2c27     ('Content-Type',
 80a29bc:	6d27 6c75 6974 6170 7472 662f 726f 2d6d     'multipart/form-
 80a29cc:	6164 6174 2927 653b 732e 6e65 2864 2964     data');e.send(d)
 80a29dc:	653b 6f2e 726e 6165 7964 7473 7461 6365     ;e.onreadystatec
 80a29ec:	6168 676e 3d65 7566 636e 6974 6e6f 2928     hange=function()
 80a29fc:	697b 2866 2e65 6572 6461 5379 6174 6574     {if(e.readyState
 80a2a0c:	3d3d 2934 6669 6328 7b29 6669 6528 732e     ==4)if(c){if(e.s
 80a2a1c:	6174 7574 3d73 323d 3030 7b29 6669 6328     tatus==200){if(c
 80a2a2c:	732e 6375 6563 7373 6329 732e 6375 6563     .success)c.succe
 80a2a3c:	7373 4a28 4f53 2e4e 6170 7372 2865 2e65     ss(JSON.parse(e.
 80a2a4c:	6572 7073 6e6f 6573 6554 7478 2929 7d3b     responseText));}
 80a2a5c:	6c65 6573 6920 2866 2e63 7265 6f72 2972     else if(c.error)
 80a2a6c:	2e63 7265 6f72 2872 2e65 7473 7461 7375     c.error(e.status
 80a2a7c:	652c 722e 7365 6f70 736e 5465 7865 2974     ,e.responseText)
 80a2a8c:	693b 2866 2e63 6572 6167 6472 656c 7373     ;if(c.regardless
 80a2a9c:	6329 722e 6765 7261 6c64 7365 2873 3b29     )c.regardless();
 80a2aac:	7d7d 7d3b 693b 2866 6373 6e61 7542 7474     }};};if(scanButt
 80a2abc:	6e6f 612e 6464 7645 6e65 4c74 7369 6574     on.addEventListe
 80a2acc:	656e 2972 637b 706f 4279 7475 6f74 2e6e     ner){copyButton.
 80a2adc:	6461 4564 6576 746e 694c 7473 6e65 7265     addEventListener
 80a2aec:	2728 6c63 6369 276b 632c 706f 2979 733b     ('click',copy);s
 80a2afc:	6f68 4277 7475 6f74 2e6e 6461 4564 6576     howButton.addEve
 80a2b0c:	746e 694c 7473 6e65 7265 2728 6c63 6369     ntListener('clic
 80a2b1c:	276b 742c 676f 6c67 5365 6f68 2977 733b     k',toggleShow);s
 80a2b2c:	6163 426e 7475 6f74 2e6e 6461 4564 6576     canButton.addEve
 80a2b3c:	746e 694c 7473 6e65 7265 2728 6c63 6369     ntListener('clic
 80a2b4c:	276b 732c 6163 296e 633b 6e6f 656e 7463     k',scan);connect
 80a2b5c:	6f46 6d72 612e 6464 7645 6e65 4c74 7369     Form.addEventLis
 80a2b6c:	6574 656e 2872 7327 6275 696d 2774 632c     tener('submit',c
 80a2b7c:	6e6f 6966 7567 6572 3b29 657d 736c 2065     onfigure);}else 
 80a2b8c:	6669 7328 6163 426e 7475 6f74 2e6e 7461     if(scanButton.at
 80a2b9c:	6174 6863 7645 6e65 2974 637b 706f 4279     tachEvent){copyB
 80a2bac:	7475 6f74 2e6e 7461 6174 6863 7645 6e65     utton.attachEven
 80a2bbc:	2874 6f27 636e 696c 6b63 2c27 6f63 7970     t('onclick',copy
 80a2bcc:	3b29 6873 776f 7542 7474 6e6f 612e 7474     );showButton.att
 80a2bdc:	6361 4568 6576 746e 2728 6e6f 6c63 6369     achEvent('onclic
 80a2bec:	276b 742c 676f 6c67 5365 6f68 2977 733b     k',toggleShow);s
 80a2bfc:	6163 426e 7475 6f74 2e6e 7461 6174 6863     canButton.attach
 80a2c0c:	7645 6e65 2874 6f27 636e 696c 6b63 2c27     Event('onclick',
 80a2c1c:	6373 6e61 3b29 6f63 6e6e 6365 4674 726f     scan);connectFor
 80a2c2c:	2e6d 7461 6174 6863 7645 6e65 2874 6f27     m.attachEvent('o
 80a2c3c:	736e 6275 696d 2774 632c 6e6f 6966 7567     nsubmit',configu
 80a2c4c:	6572 3b29 677d 7465 6552 7571 7365 2874     re);}getRequest(
 80a2c5c:	6162 6573 755f 6c72 272b 6564 6976 6563     base_url+'device
 80a2c6c:	692d 2764 642c 7665 6369 5f65 6469 635f     -id',device_id_c
 80a2c7c:	6c61 626c 6361 296b 673b 7465 6552 7571     allback);getRequ
 80a2c8c:	7365 2874 6162 6573 755f 6c72 272b 7570     est(base_url+'pu
 80a2c9c:	6c62 6369 6b2d 7965 2c27 7570 6c62 6369     blic-key',public
 80a2cac:	6b5f 7965 635f 6c61 626c 6361 296b 003b     _key_callback);.

080a2cbc <_ZL9style_css>:
 80a2cbc:	7468 6c6d 687b 6965 6867 3a74 3031 2530     html{height:100%
 80a2ccc:	6d3b 7261 6967 3a6e 7561 6f74 623b 6361     ;margin:auto;bac
 80a2cdc:	676b 6f72 6e75 2d64 6f63 6f6c 3a72 6877     kground-color:wh
 80a2cec:	7469 7d65 6f62 7964 627b 786f 732d 7a69     ite}body{box-siz
 80a2cfc:	6e69 3a67 6f62 6472 7265 622d 786f 6d3b     ing:border-box;m
 80a2d0c:	6e69 682d 6965 6867 3a74 3031 2530 703b     in-height:100%;p
 80a2d1c:	6461 6964 676e 323a 7030 3b78 6162 6b63     adding:20px;back
 80a2d2c:	7267 756f 646e 632d 6c6f 726f 233a 6131     ground-color:#1a
 80a2d3c:	6261 3065 663b 6e6f 2d74 6166 696d 796c     abe0;font-family
 80a2d4c:	273a 754c 6963 6164 5320 6e61 2073 6e55     :'Lucida Sans Un
 80a2d5c:	6369 646f 2765 272c 754c 6963 6164 4720     icode','Lucida G
 80a2d6c:	6172 646e 2765 732c 6e61 2d73 6573 6972     rande',sans-seri
 80a2d7c:	3b66 6f66 746e 772d 6965 6867 3a74 6f6e     f;font-weight:no
 80a2d8c:	6d72 6c61 633b 6c6f 726f 773a 6968 6574     rmal;color:white
 80a2d9c:	6d3b 7261 6967 2d6e 6f74 3a70 3b30 616d     ;margin-top:0;ma
 80a2dac:	6772 6e69 6c2d 6665 3a74 7561 6f74 6d3b     rgin-left:auto;m
 80a2dbc:	7261 6967 2d6e 6972 6867 3a74 7561 6f74     argin-right:auto
 80a2dcc:	6d3b 7261 6967 2d6e 6f62 7474 6d6f 303a     ;margin-bottom:0
 80a2ddc:	6d3b 7861 772d 6469 6874 343a 3030 7870     ;max-width:400px
 80a2dec:	743b 7865 2d74 6c61 6769 3a6e 6563 746e     ;text-align:cent
 80a2dfc:	7265 623b 726f 6564 3a72 7031 2078 6f73     er;border:1px so
 80a2e0c:	696c 2064 3623 3665 3765 3b30 6f62 6472     lid #6e6e70;bord
 80a2e1c:	7265 722d 6461 7569 3a73 7034 7d78 6964     er-radius:4px}di
 80a2e2c:	7b76 616d 6772 6e69 742d 706f 323a 7035     v{margin-top:25p
 80a2e3c:	3b78 616d 6772 6e69 622d 746f 6f74 3a6d     x;margin-bottom:
 80a2e4c:	3532 7870 687d 7b31 616d 6772 6e69 742d     25px}h1{margin-t
 80a2e5c:	706f 323a 7035 3b78 616d 6772 6e69 622d     op:25px;margin-b
 80a2e6c:	746f 6f74 3a6d 3532 7870 627d 7475 6f74     ottom:25px}butto
 80a2e7c:	7b6e 6f62 6472 7265 632d 6c6f 726f 233a     n{border-color:#
 80a2e8c:	6331 3537 6562 623b 6361 676b 6f72 6e75     1c75be;backgroun
 80a2e9c:	2d64 6f63 6f6c 3a72 3123 3763 6235 3b65     d-color:#1c75be;
 80a2eac:	6f63 6f6c 3a72 6877 7469 3b65 6f62 6472     color:white;bord
 80a2ebc:	7265 722d 6461 7569 3a73 7035 3b78 6568     er-radius:5px;he
 80a2ecc:	6769 7468 333a 7030 3b78 6f66 746e 732d     ight:30px;font-s
 80a2edc:	7a69 3a65 3531 7870 663b 6e6f 2d74 6577     ize:15px;font-we
 80a2eec:	6769 7468 623a 6c6f 7d64 7562 7474 6e6f     ight:bold}button
 80a2efc:	692e 706e 7475 682d 6c65 6570 7b72 6162     .input-helper{ba
 80a2f0c:	6b63 7267 756f 646e 632d 6c6f 726f 233a     ckground-color:#
 80a2f1c:	6562 6562 6562 623b 726f 6564 2d72 6f63     bebebe;border-co
 80a2f2c:	6f6c 3a72 6223 6265 6265 3b65 6f63 6f6c     lor:#bebebe;colo
 80a2f3c:	3a72 3623 3665 3765 3b30 616d 6772 6e69     r:#6e6e70;margin
 80a2f4c:	6c2d 6665 3a74 7033 7d78 7562 7474 6e6f     -left:3px}button
 80a2f5c:	643a 7369 6261 656c 7b64 6162 6b63 7267     :disabled{backgr
 80a2f6c:	756f 646e 632d 6c6f 726f 233a 6562 6562     ound-color:#bebe
 80a2f7c:	6562 623b 726f 6564 2d72 6f63 6f6c 3a72     be;border-color:
 80a2f8c:	6223 6265 6265 3b65 6f63 6f6c 3a72 6877     #bebebe;color:wh
 80a2f9c:	7469 7d65 6e69 7570 5b74 7974 6570 273d     ite}input[type='
 80a2fac:	6574 7478 5d27 692c 706e 7475 745b 7079     text'],input[typ
 80a2fbc:	3d65 7027 7361 7773 726f 2764 7b5d 6162     e='password']{ba
 80a2fcc:	6b63 7267 756f 646e 632d 6c6f 726f 773a     ckground-color:w
 80a2fdc:	6968 6574 633b 6c6f 726f 233a 6536 6536     hite;color:#6e6e
 80a2fec:	3037 623b 726f 6564 2d72 6f63 6f6c 3a72     70;border-color:
 80a2ffc:	6877 7469 3b65 6f62 6472 7265 722d 6461     white;border-rad
 80a300c:	7569 3a73 7035 3b78 6568 6769 7468 323a     ius:5px;height:2
 80a301c:	7035 3b78 6574 7478 612d 696c 6e67 633a     5px;text-align:c
 80a302c:	6e65 6574 3b72 6f66 746e 732d 7a69 3a65     enter;font-size:
 80a303c:	3531 7870 697d 706e 7475 643a 7369 6261     15px}input:disab
 80a304c:	656c 7b64 6162 6b63 7267 756f 646e 632d     led{background-c
 80a305c:	6c6f 726f 233a 6562 6562 6562 623b 726f     olor:#bebebe;bor
 80a306c:	6564 2d72 6f63 6f6c 3a72 6223 6265 6265     der-color:#bebeb
 80a307c:	7d65 6e69 7570 5b74 7974 6570 273d 6172     e}input[type='ra
 80a308c:	6964 276f 7b5d 6f70 6973 6974 6e6f 723a     dio']{position:r
 80a309c:	6c65 7461 7669 3b65 6f62 7474 6d6f 2d3a     elative;bottom:-
 80a30ac:	2e30 3333 6d65 6d3b 7261 6967 3a6e 3b30     0.33em;margin:0;
 80a30bc:	6f62 6472 7265 303a 683b 6965 6867 3a74     border:0;height:
 80a30cc:	2e31 6535 3b6d 6977 7464 3a68 3531 7d25     1.5em;width:15%}
 80a30dc:	616c 6562 7b6c 6170 6464 6e69 2d67 6f74     label{padding-to
 80a30ec:	3a70 7037 3b78 6170 6464 6e69 2d67 6f62     p:7px;padding-bo
 80a30fc:	7474 6d6f 373a 7870 703b 6461 6964 676e     ttom:7px;padding
 80a310c:	6c2d 6665 3a74 2535 643b 7369 6c70 7961     -left:5%;display
 80a311c:	693a 6c6e 6e69 2d65 6c62 636f 3b6b 6977     :inline-block;wi
 80a312c:	7464 3a68 3038 3b25 6574 7478 612d 696c     dth:80%;text-ali
 80a313c:	6e67 6c3a 6665 7d74 6e69 7570 5b74 7974     gn:left}input[ty
 80a314c:	6570 273d 6172 6964 276f 3a5d 6863 6365     pe='radio']:chec
 80a315c:	656b 2b64 616c 6562 7b6c 6f66 746e 772d     ked+label{font-w
 80a316c:	6965 6867 3a74 6f62 646c 633b 6c6f 726f     eight:bold;color
 80a317c:	233a 6331 3537 6562 2e7d 6373 6e61 696e     :#1c75be}.scanni
 80a318c:	676e 652d 7272 726f 667b 6e6f 2d74 6577     ng-error{font-we
 80a319c:	6769 7468 623a 6c6f 3b64 6574 7478 612d     ight:bold;text-a
 80a31ac:	696c 6e67 633a 6e65 6574 7d72 722e 6461     lign:center}.rad
 80a31bc:	6f69 642d 7669 627b 786f 732d 7a69 6e69     io-div{box-sizin
 80a31cc:	3a67 6f62 6472 7265 622d 786f 6d3b 7261     g:border-box;mar
 80a31dc:	6967 3a6e 7032 3b78 616d 6772 6e69 6c2d     gin:2px;margin-l
 80a31ec:	6665 3a74 7561 6f74 6d3b 7261 6967 2d6e     eft:auto;margin-
 80a31fc:	6972 6867 3a74 7561 6f74 623b 6361 676b     right:auto;backg
 80a320c:	6f72 6e75 2d64 6f63 6f6c 3a72 6877 7469     round-color:whit
 80a321c:	3b65 6f63 6f6c 3a72 3623 3665 3765 3b30     e;color:#6e6e70;
 80a322c:	6f62 6472 7265 313a 7870 7320 6c6f 6469     border:1px solid
 80a323c:	2320 6536 6536 3037 623b 726f 6564 2d72      #6e6e70;border-
 80a324c:	6172 6964 7375 333a 7870 773b 6469 6874     radius:3px;width
 80a325c:	313a 3030 3b25 6170 6464 6e69 3a67 7035     :100%;padding:5p
 80a326c:	7d78 6e23 7465 6f77 6b72 2d73 6964 7b76     x}#networks-div{
 80a327c:	616d 6772 6e69 6c2d 6665 3a74 7561 6f74     margin-left:auto
 80a328c:	6d3b 7261 6967 2d6e 6972 6867 3a74 7561     ;margin-right:au
 80a329c:	6f74 743b 7865 2d74 6c61 6769 3a6e 656c     to;text-align:le
 80a32ac:	7466 237d 6564 6976 6563 692d 7b64 6574     ft}#device-id{te
 80a32bc:	7478 612d 696c 6e67 633a 6e65 6574 7d72     xt-align:center}
 80a32cc:	7323 6163 2d6e 7562 7474 6e6f 6d7b 6e69     #scan-button{min
 80a32dc:	772d 6469 6874 313a 3030 7870 237d 6f63     -width:100px}#co
 80a32ec:	6e6e 6365 2d74 7562 7474 6e6f 647b 7369     nnect-button{dis
 80a32fc:	6c70 7961 623a 6f6c 6b63 6d3b 6e69 772d     play:block;min-w
 80a330c:	6469 6874 313a 3030 7870 6d3b 7261 6967     idth:100px;margi
 80a331c:	2d6e 6f74 3a70 3031 7870 6d3b 7261 6967     n-top:10px;margi
 80a332c:	2d6e 656c 7466 613a 7475 3b6f 616d 6772     n-left:auto;marg
 80a333c:	6e69 722d 6769 7468 613a 7475 3b6f 616d     in-right:auto;ma
 80a334c:	6772 6e69 622d 746f 6f74 3a6d 3032 7870     rgin-bottom:20px
 80a335c:	237d 6170 7373 6f77 6472 6d7b 7261 6967     }#password{margi
 80a336c:	2d6e 6f74 3a70 3032 7870 6d3b 7261 6967     n-top:20px;margi
 80a337c:	2d6e 6f62 7474 6d6f 313a 7030 7d78 6600          n-bottom:10px}.

080a338b <_ZL9jsbn_2_js>:
 80a338b:	7566 636e 6974 6e6f 6220 706e 5352 6968     function bnpRShi
 80a339b:	7466 6f54 6128 622c 7b29 2e62 3d73 6874     ftTo(a,b){b.s=th
 80a33ab:	7369 732e 763b 7261 6320 4d3d 7461 2e68     is.s;var c=Math.
 80a33bb:	6c66 6f6f 2872 2f61 6874 7369 442e 2942     floor(a/this.DB)
 80a33cb:	693b 2866 3e63 743d 6968 2e73 2974 627b     ;if(c>=this.t){b
 80a33db:	742e 303d 723b 7465 7275 3b6e 767d 7261     .t=0;return;}var
 80a33eb:	6420 613d 7425 6968 2e73 4244 763b 7261      d=a%this.DB;var
 80a33fb:	6520 743d 6968 2e73 4244 642d 763b 7261      e=this.DB-d;var
 80a340b:	6620 283d 3c31 643c 2d29 3b31 5b62 5d30      f=(1<<d)-1;b[0]
 80a341b:	743d 6968 5b73 5d63 3e3e 3b64 6f66 2872     =this[c]>>d;for(
 80a342b:	6176 2072 3d67 2b63 3b31 3c67 6874 7369     var g=c+1;g<this
 80a343b:	742e 2b3b 672b 7b29 5b62 2d67 2d63 5d31     .t;++g){b[g-c-1]
 80a344b:	3d7c 7428 6968 5b73 5d67 6626 3c29 653c     |=(this[g]&f)<<e
 80a345b:	623b 675b 632d 3d5d 6874 7369 675b 3e5d     ;b[g-c]=this[g]>
 80a346b:	643e 7d3b 6669 6428 303e 6229 745b 6968     >d;}if(d>0)b[thi
 80a347b:	2e73 2d74 2d63 5d31 3d7c 7428 6968 2e73     s.t-c-1]|=(this.
 80a348b:	2673 2966 3c3c 3b65 2e62 3d74 6874 7369     s&f)<<e;b.t=this
 80a349b:	742e 632d 623b 632e 616c 706d 2928 7d3b     .t-c;b.clamp();}
 80a34ab:	7566 636e 6974 6e6f 6220 706e 7553 5462     function bnpSubT
 80a34bb:	286f 2c61 2962 767b 7261 6320 303d 642c     o(a,b){var c=0,d
 80a34cb:	303d 652c 4d3d 7461 2e68 696d 286e 2e61     =0,e=Math.min(a.
 80a34db:	2c74 6874 7369 742e 3b29 6877 6c69 2865     t,this.t);while(
 80a34eb:	3c63 2965 647b 3d2b 6874 7369 635b 2d5d     c<e){d+=this[c]-
 80a34fb:	5b61 5d63 623b 635b 2b2b 3d5d 2664 6874     a[c];b[c++]=d&th
 80a350b:	7369 442e 3b4d 3e64 3d3e 6874 7369 442e     is.DM;d>>=this.D
 80a351b:	3b42 697d 2866 2e61 3c74 6874 7369 742e     B;}if(a.t<this.t
 80a352b:	7b29 2d64 613d 732e 773b 6968 656c 6328     ){d-=a.s;while(c
 80a353b:	743c 6968 2e73 2974 647b 3d2b 6874 7369     <this.t){d+=this
 80a354b:	635b 3b5d 5b62 2b63 5d2b 643d 7426 6968     [c];b[c++]=d&thi
 80a355b:	2e73 4d44 643b 3e3e 743d 6968 2e73 4244     s.DM;d>>=this.DB
 80a356b:	7d3b 2b64 743d 6968 2e73 3b73 657d 736c     ;}d+=this.s;}els
 80a357b:	7b65 2b64 743d 6968 2e73 3b73 6877 6c69     e{d+=this.s;whil
 80a358b:	2865 3c63 2e61 2974 647b 3d2d 5b61 5d63     e(c<a.t){d-=a[c]
 80a359b:	623b 635b 2b2b 3d5d 2664 6874 7369 442e     ;b[c++]=d&this.D
 80a35ab:	3b4d 3e64 3d3e 6874 7369 442e 3b42 647d     M;d>>=this.DB;}d
 80a35bb:	3d2d 2e61 3b73 627d 732e 283d 3c64 2930     -=a.s;}b.s=(d<0)
 80a35cb:	2d3f 3a31 3b30 6669 6428 2d3c 2931 5b62     ?-1:0;if(d<-1)b[
 80a35db:	2b63 5d2b 743d 6968 2e73 5644 642b 653b     c++]=this.DV+d;e
 80a35eb:	736c 2065 6669 6428 303e 6229 635b 2b2b     lse if(d>0)b[c++
 80a35fb:	3d5d 3b64 2e62 3d74 3b63 2e62 6c63 6d61     ]=d;b.t=c;b.clam
 80a360b:	2870 3b29 667d 6e75 7463 6f69 206e 6e62     p();}function bn
 80a361b:	4d70 6c75 6974 6c70 5479 286f 2c61 2962     pMultiplyTo(a,b)
 80a362b:	767b 7261 6320 743d 6968 2e73 6261 2873     {var c=this.abs(
 80a363b:	2c29 3d64 2e61 6261 2873 3b29 6176 2072     ),d=a.abs();var 
 80a364b:	3d65 2e63 3b74 2e62 3d74 2b65 2e64 3b74     e=c.t;b.t=e+d.t;
 80a365b:	6877 6c69 2865 2d2d 3e65 303d 6229 655b     while(--e>=0)b[e
 80a366b:	3d5d 3b30 6f66 2872 3d65 3b30 3c65 2e64     ]=0;for(e=0;e<d.
 80a367b:	3b74 2b2b 2965 5b62 2b65 2e63 5d74 633d     t;++e)b[e+c.t]=c
 80a368b:	612e 286d 2c30 5b64 5d65 622c 652c 302c     .am(0,d[e],b,e,0
 80a369b:	632c 742e 3b29 2e62 3d73 3b30 2e62 6c63     ,c.t);b.s=0;b.cl
 80a36ab:	6d61 2870 3b29 6669 7428 6968 2e73 2173     amp();if(this.s!
 80a36bb:	613d 732e 4229 6769 6e49 6574 6567 2e72     =a.s)BigInteger.
 80a36cb:	455a 4f52 732e 6275 6f54 6228 622c 3b29     ZERO.subTo(b,b);
 80a36db:	667d 6e75 7463 6f69 206e 6e62 5370 7571     }function bnpSqu
 80a36eb:	7261 5465 286f 2961 767b 7261 6220 743d     areTo(a){var b=t
 80a36fb:	6968 2e73 6261 2873 3b29 6176 2072 3d63     his.abs();var c=
 80a370b:	2e61 3d74 2a32 2e62 3b74 6877 6c69 2865     a.t=2*b.t;while(
 80a371b:	2d2d 3e63 303d 6129 635b 3d5d 3b30 6f66     --c>=0)a[c]=0;fo
 80a372b:	2872 3d63 3b30 3c63 2e62 2d74 3b31 2b2b     r(c=0;c<b.t-1;++
 80a373b:	2963 767b 7261 6420 623d 612e 286d 2c63     c){var d=b.am(c,
 80a374b:	5b62 5d63 612c 322c 632a 302c 312c 3b29     b[c],a,2*c,0,1);
 80a375b:	6669 2828 5b61 2b63 2e62 5d74 3d2b 2e62     if((a[c+b.t]+=b.
 80a376b:	6d61 6328 312b 322c 622a 635b 2c5d 2c61     am(c+1,2*b[c],a,
 80a377b:	2a32 2b63 2c31 2c64 2e62 2d74 2d63 2931     2*c+1,d,b.t-c-1)
 80a378b:	3e29 623d 442e 2956 617b 635b 622b 742e     )>=b.DV){a[c+b.t
 80a379b:	2d5d 623d 442e 3b56 5b61 2b63 2e62 2b74     ]-=b.DV;a[c+b.t+
 80a37ab:	5d31 313d 7d3b 697d 2866 2e61 3e74 2930     1]=1;}}if(a.t>0)
 80a37bb:	5b61 2e61 2d74 5d31 3d2b 2e62 6d61 6328     a[a.t-1]+=b.am(c
 80a37cb:	622c 635b 2c5d 2c61 2a32 2c63 2c30 2931     ,b[c],a,2*c,0,1)
 80a37db:	613b 732e 303d 613b 632e 616c 706d 2928     ;a.s=0;a.clamp()
 80a37eb:	7d3b 7566 636e 6974 6e6f 6220 706e 6944     ;}function bnpDi
 80a37fb:	5276 6d65 6f54 6128 622c 632c 7b29 6176     vRemTo(a,b,c){va
 80a380b:	2072 3d64 2e61 6261 2873 3b29 6669 6428     r d=a.abs();if(d
 80a381b:	742e 3d3c 2930 6572 7574 6e72 763b 7261     .t<=0)return;var
 80a382b:	6520 743d 6968 2e73 6261 2873 3b29 6669      e=this.abs();if
 80a383b:	6528 742e 643c 742e 7b29 6669 6228 3d21     (e.t<d.t){if(b!=
 80a384b:	756e 6c6c 6229 662e 6f72 496d 746e 3028     null)b.fromInt(0
 80a385b:	3b29 6669 6328 3d21 756e 6c6c 7429 6968     );if(c!=null)thi
 80a386b:	2e73 6f63 7970 6f54 6328 3b29 6572 7574     s.copyTo(c);retu
 80a387b:	6e72 7d3b 6669 6328 3d3d 756e 6c6c 6329     rn;}if(c==null)c
 80a388b:	6e3d 6962 2928 763b 7261 6620 6e3d 6962     =nbi();var f=nbi
 80a389b:	2928 672c 743d 6968 2e73 2c73 3d68 2e61     (),g=this.s,h=a.
 80a38ab:	3b73 6176 2072 3d69 6874 7369 442e 2d42     s;var i=this.DB-
 80a38bb:	626e 7469 2873 5b64 2e64 2d74 5d31 3b29     nbits(d[d.t-1]);
 80a38cb:	6669 6928 303e 7b29 2e64 536c 6968 7466     if(i>0){d.lShift
 80a38db:	6f54 6928 662c 3b29 2e65 536c 6968 7466     To(i,f);e.lShift
 80a38eb:	6f54 6928 632c 3b29 657d 736c 7b65 2e64     To(i,c);}else{d.
 80a38fb:	6f63 7970 6f54 6628 3b29 2e65 6f63 7970     copyTo(f);e.copy
 80a390b:	6f54 6328 3b29 767d 7261 6a20 663d 742e     To(c);}var j=f.t
 80a391b:	763b 7261 6b20 663d 6a5b 312d 3b5d 6669     ;var k=f[j-1];if
 80a392b:	6b28 3d3d 2930 6572 7574 6e72 763b 7261     (k==0)return;var
 80a393b:	6c20 6b3d 282a 3c31 743c 6968 2e73 3146      l=k*(1<<this.F1
 80a394b:	2b29 2828 3e6a 2931 663f 6a5b 322d 3e5d     )+((j>1)?f[j-2]>
 80a395b:	743e 6968 2e73 3246 303a 3b29 6176 2072     >this.F2:0);var 
 80a396b:	3d6d 6874 7369 462e 2f56 2c6c 3d6e 3128     m=this.FV/l,n=(1
 80a397b:	3c3c 6874 7369 462e 2931 6c2f 6f2c 313d     <<this.F1)/l,o=1
 80a398b:	3c3c 6874 7369 462e 3b32 6176 2072 3d70     <<this.F2;var p=
 80a399b:	2e63 2c74 3d71 2d70 2c6a 3d72 6228 3d3d     c.t,q=p-j,r=(b==
 80a39ab:	756e 6c6c 3f29 626e 2869 3a29 3b62 2e66     null)?nbi():b;f.
 80a39bb:	6c64 6853 6669 5474 286f 2c71 2972 693b     dlShiftTo(q,r);i
 80a39cb:	2866 2e63 6f63 706d 7261 5465 286f 2972     f(c.compareTo(r)
 80a39db:	3d3e 2930 637b 635b 742e 2b2b 3d5d 3b31     >=0){c[c.t++]=1;
 80a39eb:	2e63 7573 5462 286f 2c72 2963 7d3b 6942     c.subTo(r,c);}Bi
 80a39fb:	4967 746e 6765 7265 4f2e 454e 642e 536c     gInteger.ONE.dlS
 80a3a0b:	6968 7466 6f54 6a28 722c 3b29 2e72 7573     hiftTo(j,r);r.su
 80a3a1b:	5462 286f 2c66 2966 773b 6968 656c 6628     bTo(f,f);while(f
 80a3a2b:	742e 6a3c 6629 665b 742e 2b2b 3d5d 3b30     .t<j)f[f.t++]=0;
 80a3a3b:	6877 6c69 2865 2d2d 3e71 303d 7b29 6176     while(--q>=0){va
 80a3a4b:	2072 3d73 6328 2d5b 702d 3d5d 6b3d 3f29     r s=(c[--p]==k)?
 80a3a5b:	6874 7369 442e 3a4d 614d 6874 662e 6f6c     this.DM:Math.flo
 80a3a6b:	726f 6328 705b 2a5d 2b6d 6328 705b 312d     or(c[p]*m+(c[p-1
 80a3a7b:	2b5d 296f 6e2a 3b29 6669 2828 5b63 5d70     ]+o)*n);if((c[p]
 80a3a8b:	3d2b 2e66 6d61 3028 732c 632c 712c 302c     +=f.am(0,s,c,q,0
 80a3a9b:	6a2c 2929 733c 7b29 2e66 6c64 6853 6669     ,j))<s){f.dlShif
 80a3aab:	5474 286f 2c71 2972 633b 732e 6275 6f54     tTo(q,r);c.subTo
 80a3abb:	7228 632c 3b29 6877 6c69 2865 5b63 5d70     (r,c);while(c[p]
 80a3acb:	2d3c 732d 6329 732e 6275 6f54 7228 632c     <--s)c.subTo(r,c
 80a3adb:	3b29 7d7d 6669 6228 3d21 756e 6c6c 7b29     );}}if(b!=null){
 80a3aeb:	2e63 7264 6853 6669 5474 286f 2c6a 2962     c.drShiftTo(j,b)
 80a3afb:	693b 2866 2167 683d 4229 6769 6e49 6574     ;if(g!=h)BigInte
 80a3b0b:	6567 2e72 455a 4f52 732e 6275 6f54 6228     ger.ZERO.subTo(b
 80a3b1b:	622c 3b29 637d 742e 6a3d 633b 632e 616c     ,b);}c.t=j;c.cla
 80a3b2b:	706d 2928 693b 2866 3e69 2930 2e63 5372     mp();if(i>0)c.rS
 80a3b3b:	6968 7466 6f54 6928 632c 3b29 6669 6728     hiftTo(i,c);if(g
 80a3b4b:	303c 4229 6769 6e49 6574 6567 2e72 455a     <0)BigInteger.ZE
 80a3b5b:	4f52 732e 6275 6f54 6328 632c 3b29 667d     RO.subTo(c,c);}f
 80a3b6b:	6e75 7463 6f69 206e 6e62 6f4d 2864 2961     unction bnMod(a)
 80a3b7b:	767b 7261 6220 6e3d 6962 2928 743b 6968     {var b=nbi();thi
 80a3b8b:	2e73 6261 2873 2e29 6964 5276 6d65 6f54     s.abs().divRemTo
 80a3b9b:	6128 6e2c 6c75 2c6c 2962 693b 2866 6874     (a,null,b);if(th
 80a3bab:	7369 732e 303c 2626 2e62 6f63 706d 7261     is.s<0&&b.compar
 80a3bbb:	5465 286f 6942 4967 746e 6765 7265 5a2e     eTo(BigInteger.Z
 80a3bcb:	5245 294f 303e 6129 732e 6275 6f54 6228     ERO)>0)a.subTo(b
 80a3bdb:	622c 3b29 6572 7574 6e72 6220 7d3b 7566     ,b);return b;}fu
 80a3beb:	636e 6974 6e6f 4320 616c 7373 6369 6128     nction Classic(a
 80a3bfb:	7b29 6874 7369 6d2e 613d 7d3b 7566 636e     ){this.m=a;}func
 80a3c0b:	6974 6e6f 6320 6f43 766e 7265 2874 2961     tion cConvert(a)
 80a3c1b:	697b 2866 2e61 3c73 7c30 617c 632e 6d6f     {if(a.s<0||a.com
 80a3c2b:	6170 6572 6f54 7428 6968 2e73 296d 3d3e     pareTo(this.m)>=
 80a3c3b:	2930 6572 7574 6e72 6120 6d2e 646f 7428     0)return a.mod(t
 80a3c4b:	6968 2e73 296d 653b 736c 2065 6572 7574     his.m);else retu
 80a3c5b:	6e72 6120 7d3b 7566 636e 6974 6e6f 6320     rn a;}function c
 80a3c6b:	6552 6576 7472 6128 7b29 6572 7574 6e72     Revert(a){return
 80a3c7b:	6120 7d3b 7566 636e 6974 6e6f 6320 6552      a;}function cRe
 80a3c8b:	7564 6563 6128 7b29 2e61 6964 5276 6d65     duce(a){a.divRem
 80a3c9b:	6f54 7428 6968 2e73 2c6d 756e 6c6c 612c     To(this.m,null,a
 80a3cab:	3b29 667d 6e75 7463 6f69 206e 4d63 6c75     );}function cMul
 80a3cbb:	6f54 6128 622c 632c 7b29 2e61 756d 746c     To(a,b,c){a.mult
 80a3ccb:	7069 796c 6f54 6228 632c 3b29 6874 7369     iplyTo(b,c);this
 80a3cdb:	722e 6465 6375 2865 2963 7d3b 7566 636e     .reduce(c);}func
 80a3ceb:	6974 6e6f 6320 7153 5472 286f 2c61 2962     tion cSqrTo(a,b)
 80a3cfb:	617b 732e 7571 7261 5465 286f 2962 743b     {a.squareTo(b);t
 80a3d0b:	6968 2e73 6572 7564 6563 6228 3b29 437d     his.reduce(b);}C
 80a3d1b:	616c 7373 6369 702e 6f72 6f74 7974 6570     lassic.prototype
 80a3d2b:	632e 6e6f 6576 7472 633d 6f43 766e 7265     .convert=cConver
 80a3d3b:	3b74 6c43 7361 6973 2e63 7270 746f 746f     t;Classic.protot
 80a3d4b:	7079 2e65 6572 6576 7472 633d 6552 6576     ype.revert=cReve
 80a3d5b:	7472 433b 616c 7373 6369 702e 6f72 6f74     rt;Classic.proto
 80a3d6b:	7974 6570 722e 6465 6375 3d65 5263 6465     type.reduce=cRed
 80a3d7b:	6375 3b65 6c43 7361 6973 2e63 7270 746f     uce;Classic.prot
 80a3d8b:	746f 7079 2e65 756d 546c 3d6f 4d63 6c75     otype.mulTo=cMul
 80a3d9b:	6f54 433b 616c 7373 6369 702e 6f72 6f74     To;Classic.proto
 80a3dab:	7974 6570 732e 7271 6f54 633d 7153 5472     type.sqrTo=cSqrT
 80a3dbb:	3b6f 7566 636e 6974 6e6f 6220 706e 6e49     o;function bnpIn
 80a3dcb:	4476 6769 7469 2928 697b 2866 6874 7369     vDigit(){if(this
 80a3ddb:	742e 313c 7229 7465 7275 206e 3b30 6176     .t<1)return 0;va
 80a3deb:	2072 3d61 6874 7369 305b 3b5d 6669 2828     r a=this[0];if((
 80a3dfb:	2661 2931 3d3d 2930 6572 7574 6e72 3020     a&1)==0)return 0
 80a3e0b:	763b 7261 6220 613d 3326 623b 283d 2a62     ;var b=a&3;b=(b*
 80a3e1b:	3228 282d 2661 7830 2966 622a 2929 3026     (2-(a&0xf)*b))&0
 80a3e2b:	6678 623b 283d 2a62 3228 282d 2661 7830     xf;b=(b*(2-(a&0x
 80a3e3b:	6666 2a29 2962 2629 7830 6666 623b 283d     ff)*b))&0xff;b=(
 80a3e4b:	2a62 3228 282d 2828 2661 7830 6666 6666     b*(2-(((a&0xffff
 80a3e5b:	2a29 2962 3026 6678 6666 2966 2929 3026     )*b)&0xffff)))&0
 80a3e6b:	6678 6666 3b66 3d62 6228 282a 2d32 2a61     xffff;b=(b*(2-a*
 80a3e7b:	2562 6874 7369 442e 2956 2529 6874 7369     b%this.DV))%this
 80a3e8b:	442e 3b56 6572 7574 6e72 6228 303e 3f29     .DV;return(b>0)?
 80a3e9b:	6874 7369 442e 2d56 3a62 622d 7d3b 7566     this.DV-b:-b;}fu
 80a3eab:	636e 6974 6e6f 4d20 6e6f 6774 6d6f 7265     nction Montgomer
 80a3ebb:	2879 2961 747b 6968 2e73 3d6d 3b61 6874     y(a){this.m=a;th
 80a3ecb:	7369 6d2e 3d70 2e61 6e69 4476 6769 7469     is.mp=a.invDigit
 80a3edb:	2928 743b 6968 2e73 706d 3d6c 6874 7369     ();this.mpl=this
 80a3eeb:	6d2e 2670 7830 6637 6666 743b 6968 2e73     .mp&0x7fff;this.
 80a3efb:	706d 3d68 6874 7369 6d2e 3e70 313e 3b35     mph=this.mp>>15;
 80a3f0b:	6874 7369 752e 3d6d 3128 3c3c 6128 442e     this.um=(1<<(a.D
 80a3f1b:	2d42 3531 2929 312d 743b 6968 2e73 746d     B-15))-1;this.mt
 80a3f2b:	3d32 2a32 2e61 3b74 667d 6e75 7463 6f69     2=2*a.t;}functio
 80a3f3b:	206e 6f6d 746e 6f43 766e 7265 2874 2961     n montConvert(a)
 80a3f4b:	767b 7261 6220 6e3d 6962 2928 613b 612e     {var b=nbi();a.a
 80a3f5b:	7362 2928 642e 536c 6968 7466 6f54 7428     bs().dlShiftTo(t
 80a3f6b:	6968 2e73 2e6d 2c74 2962 623b 642e 7669     his.m.t,b);b.div
 80a3f7b:	6552 546d 286f 6874 7369 6d2e 6e2c 6c75     RemTo(this.m,nul
 80a3f8b:	2c6c 2962 693b 2866 2e61 3c73 2630 6226     l,b);if(a.s<0&&b
 80a3f9b:	632e 6d6f 6170 6572 6f54 4228 6769 6e49     .compareTo(BigIn
 80a3fab:	6574 6567 2e72 455a 4f52 3e29 2930 6874     teger.ZERO)>0)th
 80a3fbb:	7369 6d2e 732e 6275 6f54 6228 622c 3b29     is.m.subTo(b,b);
 80a3fcb:	6572 7574 6e72 6220 7d3b 7566 636e 6974     return b;}functi
 80a3fdb:	6e6f 6d20 6e6f 5274 7665 7265 2874 2961     on montRevert(a)
 80a3feb:	767b 7261 6220 6e3d 6962 2928 613b 632e     {var b=nbi();a.c
 80a3ffb:	706f 5479 286f 2962 743b 6968 2e73 6572     opyTo(b);this.re
 80a400b:	7564 6563 6228 3b29 6572 7574 6e72 6220     duce(b);return b
 80a401b:	7d3b 7566 636e 6974 6e6f 6d20 6e6f 5274     ;}function montR
 80a402b:	6465 6375 2865 2961 777b 6968 656c 6128     educe(a){while(a
 80a403b:	742e 3d3c 6874 7369 6d2e 3274 6129 615b     .t<=this.mt2)a[a
 80a404b:	742e 2b2b 3d5d 3b30 6f66 2872 6176 2072     .t++]=0;for(var 
 80a405b:	3d62 3b30 3c62 6874 7369 6d2e 742e 2b3b     b=0;b<this.m.t;+
 80a406b:	622b 7b29 6176 2072 3d63 5b61 5d62 3026     +b){var c=a[b]&0
 80a407b:	3778 6666 3b66 6176 2072 3d64 6328 742a     x7fff;var d=(c*t
 80a408b:	6968 2e73 706d 2b6c 2828 6328 742a 6968     his.mpl+(((c*thi
 80a409b:	2e73 706d 2b68 6128 625b 3e5d 313e 2935     s.mph+(a[b]>>15)
 80a40ab:	742a 6968 2e73 706d 296c 7426 6968 2e73     *this.mpl)&this.
 80a40bb:	6d75 3c29 313c 2935 2629 2e61 4d44 633b     um)<<15))&a.DM;c
 80a40cb:	623d 742b 6968 2e73 2e6d 3b74 5b61 5d63     =b+this.m.t;a[c]
 80a40db:	3d2b 6874 7369 6d2e 612e 286d 2c30 2c64     +=this.m.am(0,d,
 80a40eb:	2c61 2c62 2c30 6874 7369 6d2e 742e 3b29     a,b,0,this.m.t);
 80a40fb:	6877 6c69 2865 5b61 5d63 3d3e 2e61 5644     while(a[c]>=a.DV
 80a410b:	7b29 5b61 5d63 3d2d 2e61 5644 613b 2b5b     ){a[c]-=a.DV;a[+
 80a411b:	632b 2b5d 3b2b 7d7d 2e61 6c63 6d61 2870     +c]++;}}a.clamp(
 80a412b:	3b29 2e61 7264 6853 6669 5474 286f 6874     );a.drShiftTo(th
 80a413b:	7369 6d2e 742e 612c 3b29 6669 6128 632e     is.m.t,a);if(a.c
 80a414b:	6d6f 6170 6572 6f54 7428 6968 2e73 296d     ompareTo(this.m)
 80a415b:	3d3e 2930 2e61 7573 5462 286f 6874 7369     >=0)a.subTo(this
 80a416b:	6d2e 612c 3b29 667d 6e75 7463 6f69 206e     .m,a);}function 
 80a417b:	6f6d 746e 7153 5472 286f 2c61 2962 617b     montSqrTo(a,b){a
 80a418b:	732e 7571 7261 5465 286f 2962 743b 6968     .squareTo(b);thi
 80a419b:	2e73 6572 7564 6563 6228 3b29 667d 6e75     s.reduce(b);}fun
 80a41ab:	7463 6f69 206e 6f6d 746e 754d 546c 286f     ction montMulTo(
 80a41bb:	2c61 2c62 2963 617b 6d2e 6c75 6974 6c70     a,b,c){a.multipl
 80a41cb:	5479 286f 2c62 2963 743b 6968 2e73 6572     yTo(b,c);this.re
 80a41db:	7564 6563 6328 3b29 4d7d 6e6f 6774 6d6f     duce(c);}Montgom
 80a41eb:	7265 2e79 7270 746f 746f 7079 2e65 6f63     ery.prototype.co
 80a41fb:	766e 7265 3d74 6f6d 746e 6f43 766e 7265     nvert=montConver
 80a420b:	3b74 6f4d 746e 6f67 656d 7972 702e 6f72     t;Montgomery.pro
 80a421b:	6f74 7974 6570 722e 7665 7265 3d74 6f6d     totype.revert=mo
 80a422b:	746e 6552 6576 7472 4d3b 6e6f 6774 6d6f     ntRevert;Montgom
 80a423b:	7265 2e79 7270 746f 746f 7079 2e65 6572     ery.prototype.re
 80a424b:	7564 6563 6d3d 6e6f 5274 6465 6375 3b65     duce=montReduce;
 80a425b:	6f4d 746e 6f67 656d 7972 702e 6f72 6f74     Montgomery.proto
 80a426b:	7974 6570 6d2e 6c75 6f54 6d3d 6e6f 4d74     type.mulTo=montM
 80a427b:	6c75 6f54 4d3b 6e6f 6774 6d6f 7265 2e79     ulTo;Montgomery.
 80a428b:	7270 746f 746f 7079 2e65 7173 5472 3d6f     prototype.sqrTo=
 80a429b:	6f6d 746e 7153 5472 3b6f 7566 636e 6974     montSqrTo;functi
 80a42ab:	6e6f 6220 706e 7349 7645 6e65 2928 727b     on bnpIsEven(){r
 80a42bb:	7465 7275 286e 7428 6968 2e73 3e74 2930     eturn((this.t>0)
 80a42cb:	283f 6874 7369 305b 265d 2931 743a 6968     ?(this[0]&1):thi
 80a42db:	2e73 2973 3d3d 3b30 667d 6e75 7463 6f69     s.s)==0;}functio
 80a42eb:	206e 6e62 4570 7078 6128 622c 7b29 6669     n bnpExp(a,b){if
 80a42fb:	6128 303e 6678 6666 6666 6666 7c66 617c     (a>0xffffffff||a
 80a430b:	313c 7229 7465 7275 206e 6942 4967 746e     <1)return BigInt
 80a431b:	6765 7265 4f2e 454e 763b 7261 6320 6e3d     eger.ONE;var c=n
 80a432b:	6962 2928 642c 6e3d 6962 2928 652c 623d     bi(),d=nbi(),e=b
 80a433b:	632e 6e6f 6576 7472 7428 6968 2973 662c     .convert(this),f
 80a434b:	6e3d 6962 7374 6128 2d29 3b31 2e65 6f63     =nbits(a)-1;e.co
 80a435b:	7970 6f54 6328 3b29 6877 6c69 2865 2d2d     pyTo(c);while(--
 80a436b:	3e66 303d 7b29 2e62 7173 5472 286f 2c63     f>=0){b.sqrTo(c,
 80a437b:	2964 693b 2866 6128 2826 3c31 663c 2929     d);if((a&(1<<f))
 80a438b:	303e 6229 6d2e 6c75 6f54 6428 652c 632c     >0)b.mulTo(d,e,c
 80a439b:	3b29 6c65 6573 767b 7261 6720 633d 633b     );else{var g=c;c
 80a43ab:	643d 643b 673d 7d3b 727d 7465 7275 206e     =d;d=g;}}return 
 80a43bb:	2e62 6572 6576 7472 6328 3b29 667d 6e75     b.revert(c);}fun
 80a43cb:	7463 6f69 206e 6e62 6f4d 5064 776f 6e49     ction bnModPowIn
 80a43db:	2874 2c61 2962 767b 7261 6320 693b 2866     t(a,b){var c;if(
 80a43eb:	3c61 3532 7c36 627c 692e 4573 6576 286e     a<256||b.isEven(
 80a43fb:	2929 3d63 656e 2077 6c43 7361 6973 2863     ))c=new Classic(
 80a440b:	2962 653b 736c 2065 3d63 656e 2077 6f4d     b);else c=new Mo
 80a441b:	746e 6f67 656d 7972 6228 3b29 6572 7574     ntgomery(b);retu
 80a442b:	6e72 7420 6968 2e73 7865 2870 2c61 2963     rn this.exp(a,c)
 80a443b:	7d3b 6942 4967 746e 6765 7265 702e 6f72     ;}BigInteger.pro
 80a444b:	6f74 7974 6570 632e 706f 5479 3d6f 6e62     totype.copyTo=bn
 80a445b:	4370 706f 5479 3b6f 6942 4967 746e 6765     pCopyTo;BigInteg
 80a446b:	7265 702e 6f72 6f74 7974 6570 662e 6f72     er.prototype.fro
 80a447b:	496d 746e 623d 706e 7246 6d6f 6e49 3b74     mInt=bnpFromInt;
 80a448b:	6942 4967 746e 6765 7265 702e 6f72 6f74     BigInteger.proto
 80a449b:	7974 6570 662e 6f72 536d 7274 6e69 3d67     type.fromString=
 80a44ab:	6e62 4670 6f72 536d 7274 6e69 3b67 6942     bnpFromString;Bi
 80a44bb:	4967 746e 6765 7265 702e 6f72 6f74 7974     gInteger.prototy
 80a44cb:	6570 632e 616c 706d 623d 706e 6c43 6d61     pe.clamp=bnpClam
 80a44db:	3b70 6942 4967 746e 6765 7265 702e 6f72     p;BigInteger.pro
 80a44eb:	6f74 7974 6570 642e 536c 6968 7466 6f54     totype.dlShiftTo
 80a44fb:	623d 706e 4c44 6853 6669 5474 3b6f 6942     =bnpDLShiftTo;Bi
 80a450b:	4967 746e 6765 7265 702e 6f72 6f74 7974     gInteger.prototy
 80a451b:	6570 642e 5372 6968 7466 6f54 623d 706e     pe.drShiftTo=bnp
 80a452b:	5244 6853 6669 5474 3b6f 6942 4967 746e     DRShiftTo;BigInt
 80a453b:	6765 7265 702e 6f72 6f74 7974 6570 6c2e     eger.prototype.l
 80a454b:	6853 6669 5474 3d6f 6e62 4c70 6853 6669     ShiftTo=bnpLShif
 80a455b:	5474 3b6f 6942 4967 746e 6765 7265 702e     tTo;BigInteger.p
 80a456b:	6f72 6f74 7974 6570 722e 6853 6669 5474     rototype.rShiftT
 80a457b:	3d6f 6e62 5270 6853 6669 5474 3b6f 6942     o=bnpRShiftTo;Bi
 80a458b:	4967 746e 6765 7265 702e 6f72 6f74 7974     gInteger.prototy
 80a459b:	6570 732e 6275 6f54 623d 706e 7553 5462     pe.subTo=bnpSubT
 80a45ab:	3b6f 6942 4967 746e 6765 7265 702e 6f72     o;BigInteger.pro
 80a45bb:	6f74 7974 6570 6d2e 6c75 6974 6c70 5479     totype.multiplyT
 80a45cb:	3d6f 6e62 4d70 6c75 6974 6c70 5479 3b6f     o=bnpMultiplyTo;
 80a45db:	6942 4967 746e 6765 7265 702e 6f72 6f74     BigInteger.proto
 80a45eb:	7974 6570 732e 7571 7261 5465 3d6f 6e62     type.squareTo=bn
 80a45fb:	5370 7571 7261 5465 3b6f 6942 4967 746e     pSquareTo;BigInt
 80a460b:	6765 7265 702e 6f72 6f74 7974 6570 642e     eger.prototype.d
 80a461b:	7669 6552 546d 3d6f 6e62 4470 7669 6552     ivRemTo=bnpDivRe
 80a462b:	546d 3b6f 6942 4967 746e 6765 7265 702e     mTo;BigInteger.p
 80a463b:	6f72 6f74 7974 6570 692e 766e 6944 6967     rototype.invDigi
 80a464b:	3d74 6e62 4970 766e 6944 6967 3b74 6942     t=bnpInvDigit;Bi
 80a465b:	4967 746e 6765 7265 702e 6f72 6f74 7974     gInteger.prototy
 80a466b:	6570 692e 4573 6576 3d6e 6e62 4970 4573     pe.isEven=bnpIsE
 80a467b:	6576 3b6e 6942 4967 746e 6765 7265 702e     ven;BigInteger.p
 80a468b:	6f72 6f74 7974 6570 652e 7078 623d 706e     rototype.exp=bnp
 80a469b:	7845 3b70 6942 4967 746e 6765 7265 702e     Exp;BigInteger.p
 80a46ab:	6f72 6f74 7974 6570 742e 536f 7274 6e69     rototype.toStrin
 80a46bb:	3d67 6e62 6f54 7453 6972 676e 423b 6769     g=bnToString;Big
 80a46cb:	6e49 6574 6567 2e72 7270 746f 746f 7079     Integer.prototyp
 80a46db:	2e65 656e 6167 6574 623d 4e6e 6765 7461     e.negate=bnNegat
 80a46eb:	3b65 6942 4967 746e 6765 7265 702e 6f72     e;BigInteger.pro
 80a46fb:	6f74 7974 6570 612e 7362 623d 416e 7362     totype.abs=bnAbs
 80a470b:	423b 6769 6e49 6574 6567 2e72 7270 746f     ;BigInteger.prot
 80a471b:	746f 7079 2e65 6f63 706d 7261 5465 3d6f     otype.compareTo=
 80a472b:	6e62 6f43 706d 7261 5465 3b6f 6942 4967     bnCompareTo;BigI
 80a473b:	746e 6765 7265 702e 6f72 6f74 7974 6570     nteger.prototype
 80a474b:	622e 7469 654c 676e 6874 623d 426e 7469     .bitLength=bnBit
 80a475b:	654c 676e 6874 423b 6769 6e49 6574 6567     Length;BigIntege
 80a476b:	2e72 7270 746f 746f 7079 2e65 6f6d 3d64     r.prototype.mod=
 80a477b:	6e62 6f4d 3b64 6942 4967 746e 6765 7265     bnMod;BigInteger
 80a478b:	702e 6f72 6f74 7974 6570 6d2e 646f 6f50     .prototype.modPo
 80a479b:	4977 746e 623d 4d6e 646f 6f50 4977 746e     wInt=bnModPowInt
 80a47ab:	423b 6769 6e49 6574 6567 2e72 455a 4f52     ;BigInteger.ZERO
 80a47bb:	6e3d 7662 3028 3b29 6942 4967 746e 6765     =nbv(0);BigInteg
 80a47cb:	7265 4f2e 454e 6e3d 7662 3128 3b29 3c00          er.ONE=nbv(1);.

080a47da <_ZL10index_html>:
 80a47da:	213c 4f44 5443 5059 2045 7468 6c6d 3c3e     <!DOCTYPE html><
 80a47ea:	7468 6c6d 3c3e 6568 6461 3c3e 656d 6174     html><head><meta
 80a47fa:	6e20 6d61 3d65 7627 6569 7077 726f 2774      name='viewport'
 80a480a:	6320 6e6f 6574 746e 273d 6977 7464 3d68      content='width=
 80a481a:	6564 6976 6563 772d 6469 6874 202c 6e69     device-width, in
 80a482a:	7469 6169 2d6c 6373 6c61 3d65 2731 3c3e     itial-scale=1'><
 80a483a:	6974 6c74 3e65 6553 7574 2070 6f79 7275     title>Setup your
 80a484a:	6420 7665 6369 3c65 742f 7469 656c 3c3e      device</title><
 80a485a:	696c 6b6e 7220 6c65 273d 7473 6c79 7365     link rel='styles
 80a486a:	6568 7465 2027 7974 6570 273d 6574 7478     heet' type='text
 80a487a:	632f 7373 2027 7268 6665 273d 7473 6c79     /css' href='styl
 80a488a:	2e65 7363 2773 3c3e 682f 6165 3e64 623c     e.css'></head><b
 80a489a:	646f 3e79 683c 3e31 6f43 6e6e 6365 2074     ody><h1>Connect 
 80a48aa:	656d 7420 206f 6f79 7275 5720 4669 2169     me to your WiFi!
 80a48ba:	2f3c 3168 3c3e 3368 4d3e 2079 6564 6976     </h1><h3>My devi
 80a48ca:	6563 4920 3a44 2f3c 3368 3c3e 6e69 7570     ce ID:</h3><inpu
 80a48da:	2074 7974 6570 743d 7865 2074 6469 273d     t type=text id='
 80a48ea:	6564 6976 6563 692d 2764 7320 7a69 3d65     device-id' size=
 80a48fa:	3227 2735 7620 6c61 6575 273d 2027 6964     '25' value='' di
 80a490a:	6173 6c62 6465 3e2f 623c 7475 6f74 206e     sabled/><button 
 80a491a:	7974 6570 273d 7562 7474 6e6f 2027 6c63     type='button' cl
 80a492a:	7361 3d73 6927 706e 7475 682d 6c65 6570     ass='input-helpe
 80a493a:	2772 6920 3d64 6327 706f 2d79 7562 7474     r' id='copy-butt
 80a494a:	6e6f 3e27 6f43 7970 2f3c 7562 7474 6e6f     on'>Copy</button
 80a495a:	3c3e 6964 2076 6469 273d 6373 6e61 642d     ><div id='scan-d
 80a496a:	7669 3e27 683c 3e33 6353 6e61 6620 726f     iv'><h3>Scan for
 80a497a:	7620 7369 6269 656c 5720 4669 2069 656e      visible WiFi ne
 80a498a:	7774 726f 736b 2f3c 3368 3c3e 7562 7474     tworks</h3><butt
 80a499a:	6e6f 6920 3d64 7327 6163 2d6e 7562 7474     on id='scan-butt
 80a49aa:	6e6f 2027 7974 6570 273d 7562 7474 6e6f     on' type='button
 80a49ba:	3e27 6353 6e61 2f3c 7562 7474 6e6f 3c3e     '>Scan</button><
 80a49ca:	642f 7669 3c3e 6964 2076 6469 273d 656e     /div><div id='ne
 80a49da:	7774 726f 736b 642d 7669 3e27 2f3c 6964     tworks-div'></di
 80a49ea:	3e76 643c 7669 6920 3d64 6327 6e6f 656e     v><div id='conne
 80a49fa:	7463 642d 7669 2027 7473 6c79 3d65 6427     ct-div' style='d
 80a4a0a:	7369 6c70 7961 203a 6f6e 656e 3e27 703c     isplay: none'><p
 80a4a1a:	443e 6e6f 7427 7320 6565 7920 756f 2072     >Don't see your 
 80a4a2a:	656e 7774 726f 3f6b 4d20 766f 2065 656d     network? Move me
 80a4a3a:	6320 6f6c 6573 2072 6f74 7920 756f 2072      closer to your 
 80a4a4a:	6f72 7475 7265 202c 6874 6e65 7220 2d65     router, then re-
 80a4a5a:	6373 6e61 3c2e 702f 3c3e 6f66 6d72 6920     scan.</p><form i
 80a4a6a:	3d64 6327 6e6f 656e 7463 662d 726f 276d     d='connect-form'
 80a4a7a:	3c3e 6e69 7570 2074 7974 6570 273d 6170     ><input type='pa
 80a4a8a:	7373 6f77 6472 2027 6469 273d 6170 7373     ssword' id='pass
 80a4a9a:	6f77 6472 2027 6973 657a 273d 3532 2027     word' size='25' 
 80a4aaa:	6c70 6361 6865 6c6f 6564 3d72 7027 7361     placeholder='pas
 80a4aba:	7773 726f 2764 3e2f 623c 7475 6f74 206e     sword'/><button 
 80a4aca:	7974 6570 273d 7562 7474 6e6f 2027 6c63     type='button' cl
 80a4ada:	7361 3d73 6927 706e 7475 682d 6c65 6570     ass='input-helpe
 80a4aea:	2772 6920 3d64 7327 6f68 2d77 7562 7474     r' id='show-butt
 80a4afa:	6e6f 3e27 6853 776f 2f3c 7562 7474 6e6f     on'>Show</button
 80a4b0a:	3c3e 7562 7474 6e6f 7420 7079 3d65 7327     ><button type='s
 80a4b1a:	6275 696d 2774 6920 3d64 6327 6e6f 656e     ubmit' id='conne
 80a4b2a:	7463 622d 7475 6f74 276e 433e 6e6f 656e     ct-button'>Conne
 80a4b3a:	7463 2f3c 7562 7474 6e6f 3c3e 662f 726f     ct</button></for
 80a4b4a:	3e6d 2f3c 6964 3e76 733c 7263 7069 2074     m></div><script 
 80a4b5a:	7273 3d63 7227 6173 752d 6974 736c 6a2f     src='rsa-utils/j
 80a4b6a:	6273 5f6e 2e31 736a 3e27 2f3c 6373 6972     sbn_1.js'></scri
 80a4b7a:	7470 3c3e 6373 6972 7470 7320 6372 273d     pt><script src='
 80a4b8a:	7372 2d61 7475 6c69 2f73 736a 6e62 325f     rsa-utils/jsbn_2
 80a4b9a:	6a2e 2773 3c3e 732f 7263 7069 3e74 733c     .js'></script><s
 80a4baa:	7263 7069 2074 7273 3d63 7227 6173 752d     cript src='rsa-u
 80a4bba:	6974 736c 702f 6e72 3467 6a2e 2773 3c3e     tils/prng4.js'><
 80a4bca:	732f 7263 7069 3e74 733c 7263 7069 2074     /script><script 
 80a4bda:	7273 3d63 7227 6173 752d 6974 736c 722f     src='rsa-utils/r
 80a4bea:	676e 6a2e 2773 3c3e 732f 7263 7069 3e74     ng.js'></script>
 80a4bfa:	733c 7263 7069 2074 7273 3d63 7227 6173     <script src='rsa
 80a4c0a:	752d 6974 736c 722f 6173 6a2e 2773 3c3e     -utils/rsa.js'><
 80a4c1a:	732f 7263 7069 3e74 733c 7263 7069 2074     /script><script 
 80a4c2a:	7273 3d63 7327 7263 7069 2e74 736a 3e27     src='script.js'>
 80a4c3a:	2f3c 6373 6972 7470 3c3e 622f 646f 3e79     </script></body>
 80a4c4a:	2f3c 7468 6c6d 003e 6168 646e 696c 676e     </html>.handling
 80a4c5a:	7020 6761 2065 7325 2f00 6e69 6564 0078      page %s./index.
 80a4c6a:	6573 646e 6e69 2067 6572 6964 6572 7463     sending redirect
 80a4c7a:	4c00 636f 7461 6f69 3a6e 2f20 6e69 6564     .Location: /inde
 80a4c8a:	2e78 7468 6c6d 0a0d 7400 7865 2f74 6c70     x.html...text/pl
 80a4c9a:	6961 006e 6e6f 6600 616c 656d 2f00 6e69     ain.on.flame./in
 80a4caa:	6564 2e78 7468 6c6d 7400 7865 2f74 7468     dex.html.text/ht
 80a4cba:	6c6d 2f00 7372 2d61 7475 6c69 2f73 7372     ml./rsa-utils/rs
 80a4cca:	2e61 736a 6100 7070 696c 6163 6974 6e6f     a.js.application
 80a4cda:	6a2f 7661 7361 7263 7069 0074 732f 7974     /javascript./sty
 80a4cea:	656c 632e 7373 7400 7865 2f74 7363 0073     le.css.text/css.
 80a4cfa:	722f 6173 752d 6974 736c 722f 676e 6a2e     /rsa-utils/rng.j
 80a4d0a:	0073 722f 6173 752d 6974 736c 6a2f 6273     s./rsa-utils/jsb
 80a4d1a:	5f6e 2e32 736a 2f00 7372 2d61 7475 6c69     n_2.js./rsa-util
 80a4d2a:	2f73 736a 6e62 315f 6a2e 0073 732f 7263     s/jsbn_1.js./scr
 80a4d3a:	7069 2e74 736a 2f00 7372 2d61 7475 6c69     ipt.js./rsa-util
 80a4d4a:	2f73 7270 676e 2e34 736a 6600                    s/prng4.js.

080a4d55 <_ZL8prng4_js>:
 80a4d55:	7566 636e 6974 6e6f 4120 6372 6f66 7275     function Arcfour
 80a4d65:	2928 747b 6968 2e73 3d69 3b30 6874 7369     (){this.i=0;this
 80a4d75:	6a2e 303d 743b 6968 2e73 3d53 656e 2077     .j=0;this.S=new 
 80a4d85:	7241 6172 2879 3b29 667d 6e75 7463 6f69     Array();}functio
 80a4d95:	206e 5241 3443 6e69 7469 6128 7b29 6176     n ARC4init(a){va
 80a4da5:	2072 2c62 2c63 3b64 6f66 2872 3d62 3b30     r b,c,d;for(b=0;
 80a4db5:	3c62 3532 3b36 2b2b 2962 6874 7369 532e     b<256;++b)this.S
 80a4dc5:	625b 3d5d 3b62 3d63 3b30 6f66 2872 3d62     [b]=b;c=0;for(b=
 80a4dd5:	3b30 3c62 3532 3b36 2b2b 2962 637b 283d     0;b<256;++b){c=(
 80a4de5:	2b63 6874 7369 532e 625b 2b5d 5b61 2562     c+this.S[b]+a[b%
 80a4df5:	2e61 656c 676e 6874 295d 3226 3535 643b     a.length])&255;d
 80a4e05:	743d 6968 2e73 5b53 5d62 743b 6968 2e73     =this.S[b];this.
 80a4e15:	5b53 5d62 743d 6968 2e73 5b53 5d63 743b     S[b]=this.S[c];t
 80a4e25:	6968 2e73 5b53 5d63 643d 7d3b 6874 7369     his.S[c]=d;}this
 80a4e35:	692e 303d 743b 6968 2e73 3d6a 3b30 667d     .i=0;this.j=0;}f
 80a4e45:	6e75 7463 6f69 206e 5241 3443 656e 7478     unction ARC4next
 80a4e55:	2928 767b 7261 6120 743b 6968 2e73 3d69     (){var a;this.i=
 80a4e65:	7428 6968 2e73 2b69 2931 3226 3535 743b     (this.i+1)&255;t
 80a4e75:	6968 2e73 3d6a 7428 6968 2e73 2b6a 6874     his.j=(this.j+th
 80a4e85:	7369 532e 745b 6968 2e73 5d69 2629 3532     is.S[this.i])&25
 80a4e95:	3b35 3d61 6874 7369 532e 745b 6968 2e73     5;a=this.S[this.
 80a4ea5:	5d69 743b 6968 2e73 5b53 6874 7369 692e     i];this.S[this.i
 80a4eb5:	3d5d 6874 7369 532e 745b 6968 2e73 5d6a     ]=this.S[this.j]
 80a4ec5:	743b 6968 2e73 5b53 6874 7369 6a2e 3d5d     ;this.S[this.j]=
 80a4ed5:	3b61 6572 7574 6e72 7420 6968 2e73 5b53     a;return this.S[
 80a4ee5:	6128 742b 6968 2e73 5b53 6874 7369 692e     (a+this.S[this.i
 80a4ef5:	295d 3226 3535 3b5d 417d 6372 6f66 7275     ])&255];}Arcfour
 80a4f05:	702e 6f72 6f74 7974 6570 692e 696e 3d74     .prototype.init=
 80a4f15:	5241 3443 6e69 7469 413b 6372 6f66 7275     ARC4init;Arcfour
 80a4f25:	702e 6f72 6f74 7974 6570 6e2e 7865 3d74     .prototype.next=
 80a4f35:	5241 3443 656e 7478 663b 6e75 7463 6f69     ARC4next;functio
 80a4f45:	206e 7270 676e 6e5f 7765 7473 7461 2865     n prng_newstate(
 80a4f55:	7b29 6572 7574 6e72 6e20 7765 4120 6372     ){return new Arc
 80a4f65:	6f66 7275 2928 7d3b 6176 2072 6e72 5f67     four();}var rng_
 80a4f75:	7370 7a69 3d65 3532 3b36 6600                    psize=256;.

080a4f80 <_ZL6rsa_js>:
 80a4f80:	7566 636e 6974 6e6f 7020 7261 6573 6942     function parseBi
 80a4f90:	4967 746e 6128 622c 7b29 6572 7574 6e72     gInt(a,b){return
 80a4fa0:	6e20 7765 4220 6769 6e49 6574 6567 2872      new BigInteger(
 80a4fb0:	2c61 2962 7d3b 7566 636e 6974 6e6f 6c20     a,b);}function l
 80a4fc0:	6e69 6265 6b72 6128 622c 7b29 6176 2072     inebrk(a,b){var 
 80a4fd0:	3d63 2727 763b 7261 6420 303d 773b 6968     c='';var d=0;whi
 80a4fe0:	656c 6428 622b 613c 6c2e 6e65 7467 2968     le(d+b<a.length)
 80a4ff0:	637b 3d2b 2e61 7573 7362 7274 6e69 2867     {c+=a.substring(
 80a5000:	2c64 2b64 2962 272b 6e5c 3b27 2b64 623d     d,d+b)+'\n';d+=b
 80a5010:	7d3b 6572 7574 6e72 6320 612b 732e 6275     ;}return c+a.sub
 80a5020:	7473 6972 676e 6428 612c 6c2e 6e65 7467     string(d,a.lengt
 80a5030:	2968 7d3b 7566 636e 6974 6e6f 6220 7479     h);}function byt
 80a5040:	3265 6548 2878 2961 697b 2866 3c61 7830     e2Hex(a){if(a<0x
 80a5050:	3031 7229 7465 7275 206e 3027 2b27 2e61     10)return '0'+a.
 80a5060:	6f74 7453 6972 676e 3128 2936 653b 736c     toString(16);els
 80a5070:	2065 6572 7574 6e72 6120 742e 536f 7274     e return a.toStr
 80a5080:	6e69 2867 3631 3b29 667d 6e75 7463 6f69     ing(16);}functio
 80a5090:	206e 6b70 7363 7031 6461 2832 2c61 2962     n pkcs1pad2(a,b)
 80a50a0:	697b 2866 3c62 2e61 656c 676e 6874 312b     {if(b<a.length+1
 80a50b0:	2931 617b 656c 7472 2728 654d 7373 6761     1){alert('Messag
 80a50c0:	2065 6f74 206f 6f6c 676e 6620 726f 5220     e too long for R
 80a50d0:	4153 2927 723b 7465 7275 206e 756e 6c6c     SA');return null
 80a50e0:	7d3b 6176 2072 3d63 656e 2077 7241 6172     ;}var c=new Arra
 80a50f0:	2879 3b29 6176 2072 3d64 2e61 656c 676e     y();var d=a.leng
 80a5100:	6874 312d 773b 6968 656c 6428 3d3e 2630     th-1;while(d>=0&
 80a5110:	6226 303e 7b29 6176 2072 3d65 2e61 6863     &b>0){var e=a.ch
 80a5120:	7261 6f43 6564 7441 6428 2d2d 3b29 6669     arCodeAt(d--);if
 80a5130:	6528 313c 3832 6329 2d5b 622d 3d5d 3b65     (e<128)c[--b]=e;
 80a5140:	6c65 6573 6920 2866 6528 313e 3732 2629     else if((e>127)&
 80a5150:	2826 3c65 3032 3834 2929 637b 2d5b 622d     &(e<2048)){c[--b
 80a5160:	3d5d 6528 3626 2933 317c 3832 633b 2d5b     ]=(e&63)|128;c[-
 80a5170:	622d 3d5d 6528 3e3e 2936 317c 3239 7d3b     -b]=(e>>6)|192;}
 80a5180:	6c65 6573 637b 2d5b 622d 3d5d 6528 3626     else{c[--b]=(e&6
 80a5190:	2933 317c 3832 633b 2d5b 622d 3d5d 2828     3)|128;c[--b]=((
 80a51a0:	3e65 363e 2629 3336 7c29 3231 3b38 5b63     e>>6)&63)|128;c[
 80a51b0:	2d2d 5d62 283d 3e65 313e 2932 327c 3432     --b]=(e>>12)|224
 80a51c0:	7d3b 637d 2d5b 622d 3d5d 3b30 6176 2072     ;}}c[--b]=0;var 
 80a51d0:	3d66 656e 2077 6553 7563 6572 6152 646e     f=new SecureRand
 80a51e0:	6d6f 2928 763b 7261 6720 6e3d 7765 4120     om();var g=new A
 80a51f0:	7272 7961 2928 773b 6968 656c 6228 323e     rray();while(b>2
 80a5200:	7b29 5b67 5d30 303d 773b 6968 656c 6728     ){g[0]=0;while(g
 80a5210:	305b 3d5d 303d 6629 6e2e 7865 4274 7479     [0]==0)f.nextByt
 80a5220:	7365 6728 3b29 5b63 2d2d 5d62 673d 305b     es(g);c[--b]=g[0
 80a5230:	3b5d 637d 2d5b 622d 3d5d 3b32 5b63 2d2d     ];}c[--b]=2;c[--
 80a5240:	5d62 303d 723b 7465 7275 206e 656e 2077     b]=0;return new 
 80a5250:	6942 4967 746e 6765 7265 6328 3b29 667d     BigInteger(c);}f
 80a5260:	6e75 7463 6f69 206e 5352 4b41 7965 2928     unction RSAKey()
 80a5270:	747b 6968 2e73 3d6e 756e 6c6c 743b 6968     {this.n=null;thi
 80a5280:	2e73 3d65 3b30 6874 7369 642e 6e3d 6c75     s.e=0;this.d=nul
 80a5290:	3b6c 6874 7369 702e 6e3d 6c75 3b6c 6874     l;this.p=null;th
 80a52a0:	7369 712e 6e3d 6c75 3b6c 6874 7369 642e     is.q=null;this.d
 80a52b0:	706d 3d31 756e 6c6c 743b 6968 2e73 6d64     mp1=null;this.dm
 80a52c0:	3171 6e3d 6c75 3b6c 6874 7369 632e 656f     q1=null;this.coe
 80a52d0:	6666 6e3d 6c75 3b6c 667d 6e75 7463 6f69     ff=null;}functio
 80a52e0:	206e 5352 5341 7465 7550 6c62 6369 6128     n RSASetPublic(a
 80a52f0:	622c 7b29 6669 6128 3d21 756e 6c6c 2626     ,b){if(a!=null&&
 80a5300:	2162 6e3d 6c75 266c 6126 6c2e 6e65 7467     b!=null&&a.lengt
 80a5310:	3e68 2630 6226 6c2e 6e65 7467 3e68 2930     h>0&&b.length>0)
 80a5320:	747b 6968 2e73 3d6e 6170 7372 4265 6769     {this.n=parseBig
 80a5330:	6e49 2874 2c61 3631 3b29 6874 7369 652e     Int(a,16);this.e
 80a5340:	703d 7261 6573 6e49 2874 2c62 3631 3b29     =parseInt(b,16);
 80a5350:	657d 736c 2065 6c61 7265 2874 4927 766e     }else alert('Inv
 80a5360:	6c61 6469 5220 4153 7020 6275 696c 2063     alid RSA public 
 80a5370:	656b 2779 3b29 667d 6e75 7463 6f69 206e     key');}function 
 80a5380:	5352 4441 506f 6275 696c 2863 2961 727b     RSADoPublic(a){r
 80a5390:	7465 7275 206e 2e61 6f6d 5064 776f 6e49     eturn a.modPowIn
 80a53a0:	2874 6874 7369 652e 742c 6968 2e73 296e     t(this.e,this.n)
 80a53b0:	7d3b 7566 636e 6974 6e6f 5220 4153 6e45     ;}function RSAEn
 80a53c0:	7263 7079 2874 2961 767b 7261 6220 703d     crypt(a){var b=p
 80a53d0:	636b 3173 6170 3264 6128 282c 6874 7369     kcs1pad2(a,(this
 80a53e0:	6e2e 622e 7469 654c 676e 6874 2928 372b     .n.bitLength()+7
 80a53f0:	3e29 333e 3b29 6669 6228 3d3d 756e 6c6c     )>>3);if(b==null
 80a5400:	7229 7465 7275 206e 756e 6c6c 763b 7261     )return null;var
 80a5410:	6320 743d 6968 2e73 6f64 7550 6c62 6369      c=this.doPublic
 80a5420:	6228 3b29 6669 6328 3d3d 756e 6c6c 7229     (b);if(c==null)r
 80a5430:	7465 7275 206e 756e 6c6c 763b 7261 6420     eturn null;var d
 80a5440:	633d 742e 536f 7274 6e69 2867 3631 3b29     =c.toString(16);
 80a5450:	6669 2828 2e64 656c 676e 6874 3126 3d29     if((d.length&1)=
 80a5460:	303d 7229 7465 7275 206e 3b64 6c65 6573     =0)return d;else
 80a5470:	7220 7465 7275 206e 3027 2b27 3b64 527d      return '0'+d;}R
 80a5480:	4153 654b 2e79 7270 746f 746f 7079 2e65     SAKey.prototype.
 80a5490:	6f64 7550 6c62 6369 523d 4153 6f44 7550     doPublic=RSADoPu
 80a54a0:	6c62 6369 523b 4153 654b 2e79 7270 746f     blic;RSAKey.prot
 80a54b0:	746f 7079 2e65 6573 5074 6275 696c 3d63     otype.setPublic=
 80a54c0:	5352 5341 7465 7550 6c62 6369 523b 4153     RSASetPublic;RSA
 80a54d0:	654b 2e79 7270 746f 746f 7079 2e65 6e65     Key.prototype.en
 80a54e0:	7263 7079 3d74 5352 4541 636e 7972 7470     crypt=RSAEncrypt
 80a54f0:	003b                                        ;.

080a54f2 <_ZL9jsbn_1_js>:
 80a54f2:	6176 2072 6264 7469 3b73 6176 2072 6163     var dbits;var ca
 80a5502:	616e 7972 303d 6478 6165 6264 6565 6366     nary=0xdeadbeefc
 80a5512:	6661 3b65 6176 2072 5f6a 6d6c 283d 6328     afe;var j_lm=((c
 80a5522:	6e61 7261 2679 7830 6666 6666 6666 3d29     anary&0xffffff)=
 80a5532:	303d 6578 6366 6661 2965 663b 6e75 7463     =0xefcafe);funct
 80a5542:	6f69 206e 6942 4967 746e 6765 7265 6128     ion BigInteger(a
 80a5552:	622c 632c 7b29 6669 6128 3d21 756e 6c6c     ,b,c){if(a!=null
 80a5562:	6929 2866 6e27 6d75 6562 2772 3d3d 7974     )if('number'==ty
 80a5572:	6570 666f 6120 7429 6968 2e73 7266 6d6f     peof a)this.from
 80a5582:	754e 626d 7265 6128 622c 632c 3b29 6c65     Number(a,b,c);el
 80a5592:	6573 6920 2866 3d62 6e3d 6c75 266c 2726     se if(b==null&&'
 80a55a2:	7473 6972 676e 2127 743d 7079 6f65 2066     string'!=typeof 
 80a55b2:	2961 6874 7369 662e 6f72 536d 7274 6e69     a)this.fromStrin
 80a55c2:	2867 2c61 3532 2936 653b 736c 2065 6874     g(a,256);else th
 80a55d2:	7369 662e 6f72 536d 7274 6e69 2867 2c61     is.fromString(a,
 80a55e2:	2962 7d3b 7566 636e 6974 6e6f 6e20 6962     b);}function nbi
 80a55f2:	2928 727b 7465 7275 206e 656e 2077 6942     (){return new Bi
 80a5602:	4967 746e 6765 7265 6e28 6c75 296c 7d3b     gInteger(null);}
 80a5612:	7566 636e 6974 6e6f 6120 316d 6128 622c     function am1(a,b
 80a5622:	632c 642c 652c 662c 7b29 6877 6c69 2865     ,c,d,e,f){while(
 80a5632:	2d2d 3e66 303d 7b29 6176 2072 3d67 2a62     --f>=0){var g=b*
 80a5642:	6874 7369 615b 2b2b 2b5d 5b63 5d64 652b     this[a++]+c[d]+e
 80a5652:	653b 4d3d 7461 2e68 6c66 6f6f 2872 2f67     ;e=Math.floor(g/
 80a5662:	7830 3034 3030 3030 2930 633b 645b 2b2b     0x4000000);c[d++
 80a5672:	3d5d 2667 7830 6633 6666 6666 3b66 727d     ]=g&0x3ffffff;}r
 80a5682:	7465 7275 206e 3b65 667d 6e75 7463 6f69     eturn e;}functio
 80a5692:	206e 6d61 2832 2c61 2c62 2c63 2c64 2c65     n am2(a,b,c,d,e,
 80a56a2:	2966 767b 7261 6720 623d 3026 3778 6666     f){var g=b&0x7ff
 80a56b2:	2c66 3d68 3e62 313e 3b35 6877 6c69 2865     f,h=b>>15;while(
 80a56c2:	2d2d 3e66 303d 7b29 6176 2072 3d69 6874     --f>=0){var i=th
 80a56d2:	7369 615b 265d 7830 6637 6666 763b 7261     is[a]&0x7fff;var
 80a56e2:	6a20 743d 6968 5b73 2b61 5d2b 3e3e 3531      j=this[a++]>>15
 80a56f2:	763b 7261 6b20 683d 692a 6a2b 672a 693b     ;var k=h*i+j*g;i
 80a5702:	673d 692a 282b 6b28 3026 3778 6666 2966     =g*i+((k&0x7fff)
 80a5712:	3c3c 3531 2b29 5b63 5d64 282b 2665 7830     <<15)+c[d]+(e&0x
 80a5722:	6633 6666 6666 6666 3b29 3d65 6928 3e3e     3fffffff);e=(i>>
 80a5732:	333e 2930 282b 3e6b 3e3e 3531 2b29 2a68     >30)+(k>>>15)+h*
 80a5742:	2b6a 6528 3e3e 333e 2930 633b 645b 2b2b     j+(e>>>30);c[d++
 80a5752:	3d5d 2669 7830 6633 6666 6666 6666 7d3b     ]=i&0x3fffffff;}
 80a5762:	6572 7574 6e72 6520 7d3b 7566 636e 6974     return e;}functi
 80a5772:	6e6f 6120 336d 6128 622c 632c 642c 652c     on am3(a,b,c,d,e
 80a5782:	662c 7b29 6176 2072 3d67 2662 7830 6633     ,f){var g=b&0x3f
 80a5792:	6666 682c 623d 3e3e 3431 773b 6968 656c     ff,h=b>>14;while
 80a57a2:	2d28 662d 3d3e 2930 767b 7261 6920 743d     (--f>=0){var i=t
 80a57b2:	6968 5b73 5d61 3026 3378 6666 3b66 6176     his[a]&0x3fff;va
 80a57c2:	2072 3d6a 6874 7369 615b 2b2b 3e5d 313e     r j=this[a++]>>1
 80a57d2:	3b34 6176 2072 3d6b 2a68 2b69 2a6a 3b67     4;var k=h*i+j*g;
 80a57e2:	3d69 2a67 2b69 2828 266b 7830 6633 6666     i=g*i+((k&0x3fff
 80a57f2:	3c29 313c 2934 632b 645b 2b5d 3b65 3d65     )<<14)+c[d]+e;e=
 80a5802:	6928 3e3e 3832 2b29 6b28 3e3e 3431 2b29     (i>>28)+(k>>14)+
 80a5812:	2a68 3b6a 5b63 2b64 5d2b 693d 3026 6678     h*j;c[d++]=i&0xf
 80a5822:	6666 6666 6666 7d3b 6572 7574 6e72 6520     ffffff;}return e
 80a5832:	7d3b 6669 6a28 6c5f 266d 2826 616e 6976     ;}if(j_lm&&(navi
 80a5842:	6167 6f74 2e72 7061 4e70 6d61 3d65 273d     gator.appName=='
 80a5852:	694d 7263 736f 666f 2074 6e49 6574 6e72     Microsoft Intern
 80a5862:	7465 4520 7078 6f6c 6572 2772 2929 427b     et Explorer')){B
 80a5872:	6769 6e49 6574 6567 2e72 7270 746f 746f     igInteger.protot
 80a5882:	7079 2e65 6d61 613d 326d 643b 6962 7374     ype.am=am2;dbits
 80a5892:	333d 3b30 657d 736c 2065 6669 6a28 6c5f     =30;}else if(j_l
 80a58a2:	266d 2826 616e 6976 6167 6f74 2e72 7061     m&&(navigator.ap
 80a58b2:	4e70 6d61 2165 273d 654e 7374 6163 6570     pName!='Netscape
 80a58c2:	2927 7b29 6942 4967 746e 6765 7265 702e     ')){BigInteger.p
 80a58d2:	6f72 6f74 7974 6570 612e 3d6d 6d61 3b31     rototype.am=am1;
 80a58e2:	6264 7469 3d73 3632 7d3b 6c65 6573 427b     dbits=26;}else{B
 80a58f2:	6769 6e49 6574 6567 2e72 7270 746f 746f     igInteger.protot
 80a5902:	7079 2e65 6d61 613d 336d 643b 6962 7374     ype.am=am3;dbits
 80a5912:	323d 3b38 427d 6769 6e49 6574 6567 2e72     =28;}BigInteger.
 80a5922:	7270 746f 746f 7079 2e65 4244 643d 6962     prototype.DB=dbi
 80a5932:	7374 423b 6769 6e49 6574 6567 2e72 7270     ts;BigInteger.pr
 80a5942:	746f 746f 7079 2e65 4d44 283d 3128 3c3c     ototype.DM=((1<<
 80a5952:	6264 7469 2973 312d 3b29 6942 4967 746e     dbits)-1);BigInt
 80a5962:	6765 7265 702e 6f72 6f74 7974 6570 442e     eger.prototype.D
 80a5972:	3d56 3128 3c3c 6264 7469 2973 763b 7261     V=(1<<dbits);var
 80a5982:	4220 5f49 5046 353d 3b32 6942 4967 746e      BI_FP=52;BigInt
 80a5992:	6765 7265 702e 6f72 6f74 7974 6570 462e     eger.prototype.F
 80a59a2:	3d56 614d 6874 702e 776f 3228 422c 5f49     V=Math.pow(2,BI_
 80a59b2:	5046 3b29 6942 4967 746e 6765 7265 702e     FP);BigInteger.p
 80a59c2:	6f72 6f74 7974 6570 462e 3d31 4942 465f     rototype.F1=BI_F
 80a59d2:	2d50 6264 7469 3b73 6942 4967 746e 6765     P-dbits;BigInteg
 80a59e2:	7265 702e 6f72 6f74 7974 6570 462e 3d32     er.prototype.F2=
 80a59f2:	2a32 6264 7469 2d73 4942 465f 3b50 6176     2*dbits-BI_FP;va
 80a5a02:	2072 4942 525f 3d4d 3027 3231 3433 3635     r BI_RM='0123456
 80a5a12:	3837 6139 6362 6564 6766 6968 6b6a 6d6c     789abcdefghijklm
 80a5a22:	6f6e 7170 7372 7574 7776 7978 277a 763b     nopqrstuvwxyz';v
 80a5a32:	7261 4220 5f49 4352 6e3d 7765 4120 7272     ar BI_RC=new Arr
 80a5a42:	7961 2928 763b 7261 7220 2c72 7676 723b     ay();var rr,vv;r
 80a5a52:	3d72 3027 2e27 6863 7261 6f43 6564 7441     r='0'.charCodeAt
 80a5a62:	3028 3b29 6f66 2872 7676 303d 763b 3c76     (0);for(vv=0;vv<
 80a5a72:	393d 2b3b 762b 2976 4942 525f 5b43 7272     =9;++vv)BI_RC[rr
 80a5a82:	2b2b 3d5d 7676 723b 3d72 6127 2e27 6863     ++]=vv;rr='a'.ch
 80a5a92:	7261 6f43 6564 7441 3028 3b29 6f66 2872     arCodeAt(0);for(
 80a5aa2:	7676 313d 3b30 7676 333c 3b36 2b2b 7676     vv=10;vv<36;++vv
 80a5ab2:	4229 5f49 4352 725b 2b72 5d2b 763d 3b76     )BI_RC[rr++]=vv;
 80a5ac2:	7272 273d 2741 632e 6168 4372 646f 4165     rr='A'.charCodeA
 80a5ad2:	2874 2930 663b 726f 7628 3d76 3031 763b     t(0);for(vv=10;v
 80a5ae2:	3c76 3633 2b3b 762b 2976 4942 525f 5b43     v<36;++vv)BI_RC[
 80a5af2:	7272 2b2b 3d5d 7676 663b 6e75 7463 6f69     rr++]=vv;functio
 80a5b02:	206e 6e69 3274 6863 7261 6128 7b29 6572     n int2char(a){re
 80a5b12:	7574 6e72 4220 5f49 4d52 632e 6168 4172     turn BI_RM.charA
 80a5b22:	2874 2961 7d3b 7566 636e 6974 6e6f 6920     t(a);}function i
 80a5b32:	746e 7441 6128 622c 7b29 6176 2072 3d63     ntAt(a,b){var c=
 80a5b42:	4942 525f 5b43 2e61 6863 7261 6f43 6564     BI_RC[a.charCode
 80a5b52:	7441 6228 5d29 723b 7465 7275 286e 3d63     At(b)];return(c=
 80a5b62:	6e3d 6c75 296c 2d3f 3a31 3b63 667d 6e75     =null)?-1:c;}fun
 80a5b72:	7463 6f69 206e 6e62 4370 706f 5479 286f     ction bnpCopyTo(
 80a5b82:	2961 667b 726f 7628 7261 6220 743d 6968     a){for(var b=thi
 80a5b92:	2e73 2d74 3b31 3e62 303d 2d3b 622d 6129     s.t-1;b>=0;--b)a
 80a5ba2:	625b 3d5d 6874 7369 625b 3b5d 2e61 3d74     [b]=this[b];a.t=
 80a5bb2:	6874 7369 742e 613b 732e 743d 6968 2e73     this.t;a.s=this.
 80a5bc2:	3b73 667d 6e75 7463 6f69 206e 6e62 4670     s;}function bnpF
 80a5bd2:	6f72 496d 746e 6128 7b29 6874 7369 742e     romInt(a){this.t
 80a5be2:	313d 743b 6968 2e73 3d73 6128 303c 3f29     =1;this.s=(a<0)?
 80a5bf2:	312d 303a 693b 2866 3e61 2930 6874 7369     -1:0;if(a>0)this
 80a5c02:	305b 3d5d 3b61 6c65 6573 6920 2866 3c61     [0]=a;else if(a<
 80a5c12:	312d 7429 6968 5b73 5d30 613d 742b 6968     -1)this[0]=a+thi
 80a5c22:	2e73 5644 653b 736c 2065 6874 7369 742e     s.DV;else this.t
 80a5c32:	303d 7d3b 7566 636e 6974 6e6f 6e20 7662     =0;}function nbv
 80a5c42:	6128 7b29 6176 2072 3d62 626e 2869 3b29     (a){var b=nbi();
 80a5c52:	2e62 7266 6d6f 6e49 2874 2961 723b 7465     b.fromInt(a);ret
 80a5c62:	7275 206e 3b62 667d 6e75 7463 6f69 206e     urn b;}function 
 80a5c72:	6e62 4670 6f72 536d 7274 6e69 2867 2c61     bnpFromString(a,
 80a5c82:	2962 767b 7261 6320 693b 2866 3d62 313d     b){var c;if(b==1
 80a5c92:	2936 3d63 3b34 6c65 6573 6920 2866 3d62     6)c=4;else if(b=
 80a5ca2:	383d 6329 333d 653b 736c 2065 6669 6228     =8)c=3;else if(b
 80a5cb2:	3d3d 3532 2936 3d63 3b38 6c65 6573 6920     ==256)c=8;else i
 80a5cc2:	2866 3d62 323d 6329 313d 653b 736c 2065     f(b==2)c=1;else 
 80a5cd2:	6669 6228 3d3d 3233 6329 353d 653b 736c     if(b==32)c=5;els
 80a5ce2:	2065 6669 6228 3d3d 2934 3d63 3b32 6c65     e if(b==4)c=2;el
 80a5cf2:	6573 747b 6968 2e73 7266 6d6f 6152 6964     se{this.fromRadi
 80a5d02:	2878 2c61 2962 723b 7465 7275 3b6e 747d     x(a,b);return;}t
 80a5d12:	6968 2e73 3d74 3b30 6874 7369 732e 303d     his.t=0;this.s=0
 80a5d22:	763b 7261 6420 613d 6c2e 6e65 7467 2c68     ;var d=a.length,
 80a5d32:	3d65 6166 736c 2c65 3d66 3b30 6877 6c69     e=false,f=0;whil
 80a5d42:	2865 2d2d 3e64 303d 7b29 6176 2072 3d67     e(--d>=0){var g=
 80a5d52:	6328 3d3d 2938 613f 645b 265d 7830 6666     (c==8)?a[d]&0xff
 80a5d62:	693a 746e 7441 6128 642c 3b29 6669 6728     :intAt(a,d);if(g
 80a5d72:	303c 7b29 6669 6128 632e 6168 4172 2874     <0){if(a.charAt(
 80a5d82:	2964 3d3d 2d27 2927 3d65 7274 6575 633b     d)=='-')e=true;c
 80a5d92:	6e6f 6974 756e 3b65 657d 663d 6c61 6573     ontinue;}e=false
 80a5da2:	693b 2866 3d66 303d 7429 6968 5b73 6874     ;if(f==0)this[th
 80a5db2:	7369 742e 2b2b 3d5d 3b67 6c65 6573 6920     is.t++]=g;else i
 80a5dc2:	2866 2b66 3e63 6874 7369 442e 2942 747b     f(f+c>this.DB){t
 80a5dd2:	6968 5b73 6874 7369 742e 312d 7c5d 283d     his[this.t-1]|=(
 80a5de2:	2667 2828 3c31 283c 6874 7369 442e 2d42     g&((1<<(this.DB-
 80a5df2:	2966 2d29 2931 3c29 663c 743b 6968 5b73     f))-1))<<f;this[
 80a5e02:	6874 7369 742e 2b2b 3d5d 6728 3e3e 7428     this.t++]=(g>>(t
 80a5e12:	6968 2e73 4244 662d 2929 7d3b 6c65 6573     his.DB-f));}else
 80a5e22:	7420 6968 5b73 6874 7369 742e 312d 7c5d      this[this.t-1]|
 80a5e32:	673d 3c3c 3b66 2b66 633d 693b 2866 3e66     =g<<f;f+=c;if(f>
 80a5e42:	743d 6968 2e73 4244 6629 3d2d 6874 7369     =this.DB)f-=this
 80a5e52:	442e 3b42 697d 2866 3d63 383d 2626 6128     .DB;}if(c==8&&(a
 80a5e62:	305b 265d 7830 3038 2129 303d 7b29 6874     [0]&0x80)!=0){th
 80a5e72:	7369 732e 2d3d 3b31 6669 6628 303e 7429     is.s=-1;if(f>0)t
 80a5e82:	6968 5b73 6874 7369 742e 312d 7c5d 283d     his[this.t-1]|=(
 80a5e92:	3128 3c3c 7428 6968 2e73 4244 662d 2929     (1<<(this.DB-f))
 80a5ea2:	312d 3c29 663c 7d3b 6874 7369 632e 616c     -1)<<f;}this.cla
 80a5eb2:	706d 2928 693b 2866 2965 6942 4967 746e     mp();if(e)BigInt
 80a5ec2:	6765 7265 5a2e 5245 2e4f 7573 5462 286f     eger.ZERO.subTo(
 80a5ed2:	6874 7369 742c 6968 2973 7d3b 7566 636e     this,this);}func
 80a5ee2:	6974 6e6f 6220 706e 6c43 6d61 2870 7b29     tion bnpClamp(){
 80a5ef2:	6176 2072 3d61 6874 7369 732e 7426 6968     var a=this.s&thi
 80a5f02:	2e73 4d44 773b 6968 656c 7428 6968 2e73     s.DM;while(this.
 80a5f12:	3e74 2630 7426 6968 5b73 6874 7369 742e     t>0&&this[this.t
 80a5f22:	312d 3d5d 613d 2d29 742d 6968 2e73 3b74     -1]==a)--this.t;
 80a5f32:	667d 6e75 7463 6f69 206e 6e62 6f54 7453     }function bnToSt
 80a5f42:	6972 676e 6128 7b29 6669 7428 6968 2e73     ring(a){if(this.
 80a5f52:	3c73 2930 6572 7574 6e72 2720 272d 742b     s<0)return '-'+t
 80a5f62:	6968 2e73 656e 6167 6574 2928 742e 536f     his.negate().toS
 80a5f72:	7274 6e69 2867 2961 763b 7261 6220 693b     tring(a);var b;i
 80a5f82:	2866 3d61 313d 2936 3d62 3b34 6c65 6573     f(a==16)b=4;else
 80a5f92:	6920 2866 3d61 383d 6229 333d 653b 736c      if(a==8)b=3;els
 80a5fa2:	2065 6669 6128 3d3d 2932 3d62 3b31 6c65     e if(a==2)b=1;el
 80a5fb2:	6573 6920 2866 3d61 333d 2932 3d62 3b35     se if(a==32)b=5;
 80a5fc2:	6c65 6573 6920 2866 3d61 343d 6229 323d     else if(a==4)b=2
 80a5fd2:	653b 736c 2065 6572 7574 6e72 7420 6968     ;else return thi
 80a5fe2:	2e73 6f74 6152 6964 2878 2961 763b 7261     s.toRadix(a);var
 80a5ff2:	6320 283d 3c31 623c 2d29 2c31 2c64 3d65      c=(1<<b)-1,d,e=
 80a6002:	6166 736c 2c65 3d66 2727 672c 743d 6968     false,f='',g=thi
 80a6012:	2e73 3b74 6176 2072 3d68 6874 7369 442e     s.t;var h=this.D
 80a6022:	2d42 6728 742a 6968 2e73 4244 2529 3b62     B-(g*this.DB)%b;
 80a6032:	6669 6728 2d2d 303e 7b29 6669 6828 743c     if(g-->0){if(h<t
 80a6042:	6968 2e73 4244 2626 6428 743d 6968 5b73     his.DB&&(d=this[
 80a6052:	5d67 3e3e 2968 303e 7b29 3d65 7274 6575     g]>>h)>0){e=true
 80a6062:	663b 693d 746e 6332 6168 2872 2964 7d3b     ;f=int2char(d);}
 80a6072:	6877 6c69 2865 3e67 303d 7b29 6669 6828     while(g>=0){if(h
 80a6082:	623c 7b29 3d64 7428 6968 5b73 5d67 2826     <b){d=(this[g]&(
 80a6092:	3128 3c3c 2968 312d 2929 3c3c 6228 682d     (1<<h)-1))<<(b-h
 80a60a2:	3b29 7c64 743d 6968 5b73 2d2d 5d67 3e3e     );d|=this[--g]>>
 80a60b2:	6828 3d2b 6874 7369 442e 2d42 2962 7d3b     (h+=this.DB-b);}
 80a60c2:	6c65 6573 647b 283d 6874 7369 675b 3e5d     else{d=(this[g]>
 80a60d2:	283e 2d68 623d 2929 6326 693b 2866 3c68     >(h-=b))&c;if(h<
 80a60e2:	303d 7b29 2b68 743d 6968 2e73 4244 2d3b     =0){h+=this.DB;-
 80a60f2:	672d 7d3b 697d 2866 3e64 2930 3d65 7274     -g;}}if(d>0)e=tr
 80a6102:	6575 693b 2866 2965 2b66 693d 746e 6332     ue;if(e)f+=int2c
 80a6112:	6168 2872 2964 7d3b 727d 7465 7275 206e     har(d);}}return 
 80a6122:	3f65 3a66 3027 3b27 667d 6e75 7463 6f69     e?f:'0';}functio
 80a6132:	206e 6e62 654e 6167 6574 2928 767b 7261     n bnNegate(){var
 80a6142:	6120 6e3d 6962 2928 423b 6769 6e49 6574      a=nbi();BigInte
 80a6152:	6567 2e72 455a 4f52 732e 6275 6f54 7428     ger.ZERO.subTo(t
 80a6162:	6968 2c73 2961 723b 7465 7275 206e 3b61     his,a);return a;
 80a6172:	667d 6e75 7463 6f69 206e 6e62 6241 2873     }function bnAbs(
 80a6182:	7b29 6572 7574 6e72 7428 6968 2e73 3c73     ){return(this.s<
 80a6192:	2930 743f 6968 2e73 656e 6167 6574 2928     0)?this.negate()
 80a61a2:	743a 6968 3b73 667d 6e75 7463 6f69 206e     :this;}function 
 80a61b2:	6e62 6f43 706d 7261 5465 286f 2961 767b     bnCompareTo(a){v
 80a61c2:	7261 6220 743d 6968 2e73 2d73 2e61 3b73     ar b=this.s-a.s;
 80a61d2:	6669 6228 3d21 2930 6572 7574 6e72 6220     if(b!=0)return b
 80a61e2:	763b 7261 6320 743d 6968 2e73 3b74 3d62     ;var c=this.t;b=
 80a61f2:	2d63 2e61 3b74 6669 6228 3d21 2930 6572     c-a.t;if(b!=0)re
 80a6202:	7574 6e72 7428 6968 2e73 3c73 2930 2d3f     turn(this.s<0)?-
 80a6212:	3a62 3b62 6877 6c69 2865 2d2d 3e63 303d     b:b;while(--c>=0
 80a6222:	6929 2866 6228 743d 6968 5b73 5d63 612d     )if((b=this[c]-a
 80a6232:	635b 295d 3d21 2930 6572 7574 6e72 6220     [c])!=0)return b
 80a6242:	723b 7465 7275 206e 3b30 667d 6e75 7463     ;return 0;}funct
 80a6252:	6f69 206e 626e 7469 2873 2961 767b 7261     ion nbits(a){var
 80a6262:	6220 313d 632c 693b 2866 6328 613d 3e3e      b=1,c;if((c=a>>
 80a6272:	313e 2936 3d21 2930 617b 633d 623b 3d2b     >16)!=0){a=c;b+=
 80a6282:	3631 7d3b 6669 2828 3d63 3e61 383e 2129     16;}if((c=a>>8)!
 80a6292:	303d 7b29 3d61 3b63 2b62 383d 7d3b 6669     =0){a=c;b+=8;}if
 80a62a2:	2828 3d63 3e61 343e 2129 303d 7b29 3d61     ((c=a>>4)!=0){a=
 80a62b2:	3b63 2b62 343d 7d3b 6669 2828 3d63 3e61     c;b+=4;}if((c=a>
 80a62c2:	323e 2129 303d 7b29 3d61 3b63 2b62 323d     >2)!=0){a=c;b+=2
 80a62d2:	7d3b 6669 2828 3d63 3e61 313e 2129 303d     ;}if((c=a>>1)!=0
 80a62e2:	7b29 3d61 3b63 2b62 313d 7d3b 6572 7574     ){a=c;b+=1;}retu
 80a62f2:	6e72 6220 7d3b 7566 636e 6974 6e6f 6220     rn b;}function b
 80a6302:	426e 7469 654c 676e 6874 2928 697b 2866     nBitLength(){if(
 80a6312:	6874 7369 742e 3d3c 2930 6572 7574 6e72     this.t<=0)return
 80a6322:	3020 723b 7465 7275 206e 6874 7369 442e      0;return this.D
 80a6332:	2a42 7428 6968 2e73 2d74 2931 6e2b 6962     B*(this.t-1)+nbi
 80a6342:	7374 7428 6968 5b73 6874 7369 742e 312d     ts(this[this.t-1
 80a6352:	5e5d 7428 6968 2e73 2673 6874 7369 442e     ]^(this.s&this.D
 80a6362:	294d 3b29 667d 6e75 7463 6f69 206e 6e62     M));}function bn
 80a6372:	4470 534c 6968 7466 6f54 6128 622c 7b29     pDLShiftTo(a,b){
 80a6382:	6176 2072 3b63 6f66 2872 3d63 6874 7369     var c;for(c=this
 80a6392:	742e 312d 633b 3d3e 3b30 2d2d 2963 5b62     .t-1;c>=0;--c)b[
 80a63a2:	2b63 5d61 743d 6968 5b73 5d63 663b 726f     c+a]=this[c];for
 80a63b2:	6328 613d 312d 633b 3d3e 3b30 2d2d 2963     (c=a-1;c>=0;--c)
 80a63c2:	5b62 5d63 303d 623b 742e 743d 6968 2e73     b[c]=0;b.t=this.
 80a63d2:	2b74 3b61 2e62 3d73 6874 7369 732e 7d3b     t+a;b.s=this.s;}
 80a63e2:	7566 636e 6974 6e6f 6220 706e 5244 6853     function bnpDRSh
 80a63f2:	6669 5474 286f 2c61 2962 667b 726f 7628     iftTo(a,b){for(v
 80a6402:	7261 6320 613d 633b 743c 6968 2e73 3b74     ar c=a;c<this.t;
 80a6412:	2b2b 2963 5b62 2d63 5d61 743d 6968 5b73     ++c)b[c-a]=this[
 80a6422:	5d63 623b 742e 4d3d 7461 2e68 616d 2878     c];b.t=Math.max(
 80a6432:	6874 7369 742e 612d 302c 3b29 2e62 3d73     this.t-a,0);b.s=
 80a6442:	6874 7369 732e 7d3b 7566 636e 6974 6e6f     this.s;}function
 80a6452:	6220 706e 534c 6968 7466 6f54 6128 622c      bnpLShiftTo(a,b
 80a6462:	7b29 6176 2072 3d63 2561 6874 7369 442e     ){var c=a%this.D
 80a6472:	3b42 6176 2072 3d64 6874 7369 442e 2d42     B;var d=this.DB-
 80a6482:	3b63 6176 2072 3d65 3128 3c3c 2964 312d     c;var e=(1<<d)-1
 80a6492:	763b 7261 6620 4d3d 7461 2e68 6c66 6f6f     ;var f=Math.floo
 80a64a2:	2872 2f61 6874 7369 442e 2942 672c 283d     r(a/this.DB),g=(
 80a64b2:	6874 7369 732e 3c3c 2963 7426 6968 2e73     this.s<<c)&this.
 80a64c2:	4d44 682c 663b 726f 6828 743d 6968 2e73     DM,h;for(h=this.
 80a64d2:	2d74 3b31 3e68 303d 2d3b 682d 7b29 5b62     t-1;h>=0;--h){b[
 80a64e2:	2b68 2b66 5d31 283d 6874 7369 685b 3e5d     h+f+1]=(this[h]>
 80a64f2:	643e 7c29 3b67 3d67 7428 6968 5b73 5d68     >d)|g;g=(this[h]
 80a6502:	6526 3c29 633c 7d3b 6f66 2872 3d68 2d66     &e)<<c;}for(h=f-
 80a6512:	3b31 3e68 303d 2d3b 682d 6229 685b 3d5d     1;h>=0;--h)b[h]=
 80a6522:	3b30 5b62 5d66 673d 623b 742e 743d 6968     0;b[f]=g;b.t=thi
 80a6532:	2e73 2b74 2b66 3b31 2e62 3d73 6874 7369     s.t+f+1;b.s=this
 80a6542:	732e 623b 632e 616c 706d 2928 7d3b 7600          .s;b.clamp();}.

080a6551 <_ZL6rng_js>:
 80a6551:	6176 2072 6e72 5f67 7473 7461 3b65 6176     var rng_state;va
 80a6561:	2072 6e72 5f67 6f70 6c6f 763b 7261 7220     r rng_pool;var r
 80a6571:	676e 705f 7470 3b72 7566 636e 6974 6e6f     ng_pptr;function
 80a6581:	7220 676e 735f 6565 5f64 6e69 2874 2961      rng_seed_int(a)
 80a6591:	727b 676e 705f 6f6f 5b6c 6e72 5f67 7070     {rng_pool[rng_pp
 80a65a1:	7274 2b2b 5e5d 613d 3226 3535 723b 676e     tr++]^=a&255;rng
 80a65b1:	705f 6f6f 5b6c 6e72 5f67 7070 7274 2b2b     _pool[rng_pptr++
 80a65c1:	5e5d 283d 3e61 383e 2629 3532 3b35 6e72     ]^=(a>>8)&255;rn
 80a65d1:	5f67 6f70 6c6f 725b 676e 705f 7470 2b72     g_pool[rng_pptr+
 80a65e1:	5d2b 3d5e 6128 3e3e 3631 2629 3532 3b35     +]^=(a>>16)&255;
 80a65f1:	6e72 5f67 6f70 6c6f 725b 676e 705f 7470     rng_pool[rng_ppt
 80a6601:	2b72 5d2b 3d5e 6128 3e3e 3432 2629 3532     r++]^=(a>>24)&25
 80a6611:	3b35 6669 7228 676e 705f 7470 3e72 723d     5;if(rng_pptr>=r
 80a6621:	676e 705f 6973 657a 7229 676e 705f 7470     ng_psize)rng_ppt
 80a6631:	2d72 723d 676e 705f 6973 657a 7d3b 7566     r-=rng_psize;}fu
 80a6641:	636e 6974 6e6f 7220 676e 735f 6565 5f64     nction rng_seed_
 80a6651:	6974 656d 2928 727b 676e 735f 6565 5f64     time(){rng_seed_
 80a6661:	6e69 2874 656e 2077 6144 6574 2928 672e     int(new Date().g
 80a6671:	7465 6954 656d 2928 3b29 697d 2866 6e72     etTime());}if(rn
 80a6681:	5f67 6f70 6c6f 3d3d 756e 6c6c 7b29 6e72     g_pool==null){rn
 80a6691:	5f67 6f70 6c6f 6e3d 7765 4120 7272 7961     g_pool=new Array
 80a66a1:	2928 723b 676e 705f 7470 3d72 3b30 6176     ();rng_pptr=0;va
 80a66b1:	2072 3b74 6669 7728 6e69 6f64 2e77 7263     r t;if(window.cr
 80a66c1:	7079 6f74 2626 6977 646e 776f 632e 7972     ypto&&window.cry
 80a66d1:	7470 2e6f 6567 5274 6e61 6f64 566d 6c61     pto.getRandomVal
 80a66e1:	6575 2973 767b 7261 7520 3d61 656e 2077     ues){var ua=new 
 80a66f1:	6955 746e 4138 7272 7961 3328 2932 773b     Uint8Array(32);w
 80a6701:	6e69 6f64 2e77 7263 7079 6f74 672e 7465     indow.crypto.get
 80a6711:	6152 646e 6d6f 6156 756c 7365 7528 2961     RandomValues(ua)
 80a6721:	663b 726f 7428 303d 743b 333c 3b32 2b2b     ;for(t=0;t<32;++
 80a6731:	2974 6e72 5f67 6f70 6c6f 725b 676e 705f     t)rng_pool[rng_p
 80a6741:	7470 2b72 5d2b 753d 5b61 5d74 7d3b 6669     ptr++]=ua[t];}if
 80a6751:	6e28 7661 6769 7461 726f 612e 7070 614e     (navigator.appNa
 80a6761:	656d 3d3d 4e27 7465 6373 7061 2765 2626     me=='Netscape'&&
 80a6771:	616e 6976 6167 6f74 2e72 7061 5670 7265     navigator.appVer
 80a6781:	6973 6e6f 273c 2735 2626 6977 646e 776f     sion<'5'&&window
 80a6791:	632e 7972 7470 296f 767b 7261 7a20 773d     .crypto){var z=w
 80a67a1:	6e69 6f64 2e77 7263 7079 6f74 722e 6e61     indow.crypto.ran
 80a67b1:	6f64 286d 3233 3b29 6f66 2872 3d74 3b30     dom(32);for(t=0;
 80a67c1:	3c74 2e7a 656c 676e 6874 2b3b 742b 7229     t<z.length;++t)r
 80a67d1:	676e 705f 6f6f 5b6c 6e72 5f67 7070 7274     ng_pool[rng_pptr
 80a67e1:	2b2b 3d5d 2e7a 6863 7261 6f43 6564 7441     ++]=z.charCodeAt
 80a67f1:	7428 2629 3532 3b35 777d 6968 656c 7228     (t)&255;}while(r
 80a6801:	676e 705f 7470 3c72 6e72 5f67 7370 7a69     ng_pptr<rng_psiz
 80a6811:	2965 747b 4d3d 7461 2e68 6c66 6f6f 2872     e){t=Math.floor(
 80a6821:	3536 3335 2a36 614d 6874 722e 6e61 6f64     65536*Math.rando
 80a6831:	286d 2929 723b 676e 705f 6f6f 5b6c 6e72     m());rng_pool[rn
 80a6841:	5f67 7070 7274 2b2b 3d5d 3e74 3e3e 3b38     g_pptr++]=t>>>8;
 80a6851:	6e72 5f67 6f70 6c6f 725b 676e 705f 7470     rng_pool[rng_ppt
 80a6861:	2b72 5d2b 743d 3226 3535 7d3b 6e72 5f67     r++]=t&255;}rng_
 80a6871:	7070 7274 303d 723b 676e 735f 6565 5f64     pptr=0;rng_seed_
 80a6881:	6974 656d 2928 7d3b 7566 636e 6974 6e6f     time();}function
 80a6891:	7220 676e 675f 7465 625f 7479 2865 7b29      rng_get_byte(){
 80a68a1:	6669 7228 676e 735f 6174 6574 3d3d 756e     if(rng_state==nu
 80a68b1:	6c6c 7b29 6e72 5f67 6573 6465 745f 6d69     ll){rng_seed_tim
 80a68c1:	2865 3b29 6e72 5f67 7473 7461 3d65 7270     e();rng_state=pr
 80a68d1:	676e 6e5f 7765 7473 7461 2865 3b29 6e72     ng_newstate();rn
 80a68e1:	5f67 7473 7461 2e65 6e69 7469 7228 676e     g_state.init(rng
 80a68f1:	705f 6f6f 296c 663b 726f 7228 676e 705f     _pool);for(rng_p
 80a6901:	7470 3d72 3b30 6e72 5f67 7070 7274 723c     ptr=0;rng_pptr<r
 80a6911:	676e 705f 6f6f 2e6c 656c 676e 6874 2b3b     ng_pool.length;+
 80a6921:	722b 676e 705f 7470 2972 6e72 5f67 6f70     +rng_pptr)rng_po
 80a6931:	6c6f 725b 676e 705f 7470 5d72 303d 723b     ol[rng_pptr]=0;r
 80a6941:	676e 705f 7470 3d72 3b30 727d 7465 7275     ng_pptr=0;}retur
 80a6951:	206e 6e72 5f67 7473 7461 2e65 656e 7478     n rng_state.next
 80a6961:	2928 7d3b 7566 636e 6974 6e6f 7220 676e     ();}function rng
 80a6971:	675f 7465 625f 7479 7365 6128 7b29 6176     _get_bytes(a){va
 80a6981:	2072 3b62 6f66 2872 3d62 3b30 3c62 2e61     r b;for(b=0;b<a.
 80a6991:	656c 676e 6874 2b3b 622b 6129 625b 3d5d     length;++b)a[b]=
 80a69a1:	6e72 5f67 6567 5f74 7962 6574 2928 7d3b     rng_get_byte();}
 80a69b1:	7566 636e 6974 6e6f 5320 6365 7275 5265     function SecureR
 80a69c1:	6e61 6f64 286d 7b29 537d 6365 7275 5265     andom(){}SecureR
 80a69d1:	6e61 6f64 2e6d 7270 746f 746f 7079 2e65     andom.prototype.
 80a69e1:	656e 7478 7942 6574 3d73 6e72 5f67 6567     nextBytes=rng_ge
 80a69f1:	5f74 7962 6574 3b73 6200 7561 0064 6553     t_bytes;.baud.Se
 80a6a01:	6972 6c61 5500 4253 6553 6972 6c61 0031     rial.USBSerial1.
 80a6a11:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
 80a6a21:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
 80a6a31:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
 80a6a41:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
 80a6a51:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
 80a6a61:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
 80a6a71:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
 80a6a81:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
 80a6a91:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
 80a6aa1:	6600 6c00 006e 6e66 6300 646f 0065 6564     .f.ln.fn.code.de
 80a6ab1:	6174 6c69 6e00 6e6f 0065 7274 6361 0065     tail.none.trace.
 80a6ac1:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
 80a6ad1:	6170 696e 0063 6c61 006c 005a 2b25 3330     panic.all.Z.%+03
 80a6ae1:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
 80a6af1:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
 80a6b01:	656d 0000                                        me.

080a6b04 <_ZTV9IPAddress>:
	...
 80a6b0c:	0acb 080a 0abb 080a 0abd 080a               ............

080a6b18 <_ZTV9USBSerial>:
	...
 80a6b20:	0b85 080a 0bd5 080a 0be3 080a 0789 080a     ................
 80a6b30:	0bc1 080a 0b87 080a 0b9d 080a 0bcf 080a     ................
 80a6b40:	0bb3 080a 0b81 080a                         ........

080a6b48 <_ZTV11USARTSerial>:
	...
 80a6b50:	0d1d 080a 0d6d 080a 0d7b 080a 0789 080a     ....m...{.......
 80a6b60:	0d31 080a 0d53 080a 0d3f 080a 0d67 080a     1...S...?...g...
 80a6b70:	0d1f 080a 0d23 080a                         ....#...

080a6b78 <_ZTV7TwoWire>:
	...
 80a6b80:	0e21 080a 0e6b 080a 0e43 080a 0e23 080a     !...k...C...#...
 80a6b90:	0e4b 080a 0e53 080a 0e5b 080a 0e63 080a     K...S...[...c...

080a6ba0 <_ZTVN5spark9WiFiClassE>:
	...
 80a6ba8:	0f51 080a 0f47 080a 0f3d 080a 0ebb 080a     Q...G...=.......
 80a6bb8:	08b9 080a 0f31 080a 0f25 080a 0f1d 080a     ....1...%.......
 80a6bc8:	0f13 080a 0f09 080a 0ec5 080a               ............

080a6bd4 <_ZTVN5spark12NetworkClassE>:
	...
 80a6bdc:	0f71 080a 0f7b 080a 0f85 080a 0f8f 080a     q...{...........
 80a6bec:	0f99 080a 0fa5 080a 0fb1 080a 0fbd 080a     ................
 80a6bfc:	0fc5 080a 0fcf 080a 0fd9 080a               ............

080a6c08 <_ZSt7nothrow>:
 80a6c08:	0000 0000                                   ....

080a6c0c <__sf_fake_stdin>:
	...

080a6c2c <__sf_fake_stdout>:
	...

080a6c4c <__sf_fake_stderr>:
	...
 80a6c6c:	0043                                        C.

080a6c6e <link_const_variable_data_end>:
	...

080a6c70 <link_constructors_location>:
 80a6c70:	080a0271 	.word	0x080a0271
 80a6c74:	080a0649 	.word	0x080a0649
 80a6c78:	080a08c5 	.word	0x080a08c5
 80a6c7c:	080a08d5 	.word	0x080a08d5
 80a6c80:	080a090d 	.word	0x080a090d
 80a6c84:	080a0f5d 	.word	0x080a0f5d
 80a6c88:	080a1029 	.word	0x080a1029
 80a6c8c:	080a1139 	.word	0x080a1139
 80a6c90:	080a122d 	.word	0x080a122d
 80a6c94:	080a12b1 	.word	0x080a12b1
 80a6c98:	080a1375 	.word	0x080a1375
 80a6c9c:	080a1439 	.word	0x080a1439
